#ifndef TRAJECTORY_STOW_H
#define TRAJECTORY_STOW_H

#include "wam_ikfast_7dof_service/wam_ik_f7.h"
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Point.h>
#include <kdl/frames.hpp>
#include <tf_conversions/tf_kdl.h>

using namespace std;

#define NO_JOINTS 7
#define DEBUG 0

#define GRIPPER_DIM_X 0.05
#define GRIPPER_DIM_Y 0.05
#define GRIPPER_DIM_Z 0.13

#define SUCTION_DIM_X 0.1
#define SUCTION_DIM_Y 0.05
#define SUCTION_DIM_Z 0.13

#define VACUUM_DIM_X 0.01
#define VACUUM_DIM_Y 0.0
#define VACUUM_DIM_Z 0.16

bool getIK(vector<double> &shift_eef, vector<double> &jt_angle, double *min_norm_jts, tf::Vector3 &axis, tf::Vector3 &normal,
           geometry_msgs::Point &ee_psn, bool use_default)
{
    IkReal eerot[9],eetrans[3] = {0,0,0};
    IkReal eerot_t[9],eetrans_t[3] = {0,0,0};
    IkReal *jts = (IkReal*) malloc(sizeof(IkReal)*NO_JOINTS);

    // Compute the eef position wrt robot eef tool from the desired eef position taking into consideration of pipe lengths
    geometry_msgs::Point pt_eef;
    tf::Vector3 t_vector = normal.cross(axis);
    tf::Vector3 x_vector(axis.x(), axis.y(), axis.z()), y_vector(t_vector.x(), t_vector.y(), t_vector.z()), z_vector(normal.x(), normal.y(), normal.z());
    x_vector.normalize();
    y_vector.normalize();
    z_vector.normalize();

    pt_eef.x =  ee_psn.x - shift_eef[2]*z_vector.x() - shift_eef[0]*x_vector.x() - shift_eef[1]*y_vector.x();
    pt_eef.y =  ee_psn.y - shift_eef[2]*z_vector.y() - shift_eef[0]*x_vector.y() - shift_eef[1]*y_vector.y();
    pt_eef.z =  ee_psn.z - shift_eef[2]*z_vector.z() - shift_eef[0]*x_vector.z() - shift_eef[1]*y_vector.z();

    eetrans[0] = pt_eef.x+0.22; eetrans[1] = pt_eef.y+0.14; eetrans[2] = pt_eef.z+0.406;
    eerot[0] = x_vector.x();
    eerot[3] = x_vector.y();
    eerot[6] = x_vector.z();

    eerot[1] = y_vector.x();
    eerot[4] = y_vector.y();
    eerot[7] = y_vector.z();

    eerot[2] = z_vector.x();
    eerot[5] = z_vector.y();
    eerot[8] = z_vector.z();

    // Compute the inverse kinematics
    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());

    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = 0;
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution");
        if(use_default)
        {
            fprintf(stderr,"\nCopied default solution\n");
            for( std::size_t j = 0; j < GetNumJoints(); ++j)
                jt_angle[j] = min_norm_jts[j];// copy default joint angle values in case ik solution is not found

            return true;
        }
        else
            return false;
    }
    else
    {
        printf("Success: Found %d ik solutions:\n", (int)solutions.GetNumSolutions());

        std::vector<IkReal> solvalues(GetNumJoints());

        double least_norm = 1000;
        int least_norm_idx;
        for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
            const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
#if(DEBUG)
            printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
#endif
            std::vector<IkReal> vsolfree(sol.GetFree().size());
            sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
#if(DEBUG)
            for( std::size_t j = 0; j < solvalues.size(); ++j)
                printf("%.3f, ", solvalues[j]);
            printf("\n");
#endif
            double sum = 0;

            for( std::size_t j = 0; j < solvalues.size(); ++j)
                sum += (solvalues[j] - min_norm_jts[j])*(solvalues[j] - min_norm_jts[j]);
            double norm_sq_avg = sum/solvalues.size();

            if(norm_sq_avg<least_norm)
            {
                least_norm = norm_sq_avg;
                least_norm_idx = i;
            }
        }

//        copy the solution with minimum norm from home position
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(least_norm_idx);
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);

        for( std::size_t j = 0; j < solvalues.size(); ++j)
        {
            jt_angle[j] = solvalues[j];
            jts[j] = solvalues[j];
        }
        ComputeFk(jts, eetrans_t, eerot_t);
        cout << "Desired EEF position: [" << ee_psn.x << " " << ee_psn.y << " " << ee_psn.z << "]" << endl;
        double eef[3];
        pt_eef.x =  ee_psn.x - shift_eef[2]*z_vector.x() - shift_eef[0]*x_vector.x() - shift_eef[1]*y_vector.x();
        pt_eef.y =  ee_psn.y - shift_eef[2]*z_vector.y() - shift_eef[0]*x_vector.y() - shift_eef[1]*y_vector.y();
        pt_eef.z =  ee_psn.z - shift_eef[2]*z_vector.z() - shift_eef[0]*x_vector.z() - shift_eef[1]*y_vector.z();

        eetrans[0] = pt_eef.x+0.22; eetrans[1] = pt_eef.y+0.14; eetrans[2] = pt_eef.z+0.406;

        eef[0] = eetrans_t[0] - 0.22 + shift_eef[2]*z_vector.x() + shift_eef[0]*x_vector.x() + shift_eef[1]*y_vector.x();
        eef[1] = eetrans_t[1] - 0.14 + shift_eef[2]*z_vector.y() + shift_eef[0]*x_vector.y() + shift_eef[1]*y_vector.y();
        eef[2] = eetrans_t[2] - 0.406 + shift_eef[2]*z_vector.z() + shift_eef[0]*x_vector.z() + shift_eef[1]*y_vector.z();
        cout << "Inverse kinematics EEF position: [" << eef[0] << " " << eef[1] << " " << eef[2] << "]" << endl;

#if(DEBUG)
        cout << "Sent:[";
        for( std::size_t j = 0; j < solvalues.size(); ++j)
        {
            cout << solvalues[j] << " ";
        }
        cout << "]\nGot IK Solution to reach centroid\n";
#endif
        printf("/*********************************************************/\n");

        return true;
    }
}

bool computeGripperIK(vector<geometry_msgs::Point> &points, tf::Vector3 axis, tf::Vector3 normal, vector<vector<double> > &traj_angles)
{
//    double min_norm_jts[NO_JOINTS] = {0.040,  0.335, -0.006,  2.643, -0.0,  0.0,  0.00};// with tote placed in front of the robot
    double min_norm_jts[NO_JOINTS] = {-1.550, 0.358, 0.005, 2.567, 0.0, 0.0, 0.0};// with tote placed right of the robot8


    bool once = false;
    vector<vector<double> > jt_angles;
    axis.normalize();
    normal.normalize();
    vector<double> gripper_dim(3);
    gripper_dim[0] = (double) GRIPPER_DIM_X;  gripper_dim[1] = (double) GRIPPER_DIM_Y; gripper_dim[2] = (double) GRIPPER_DIM_Z;
    vector<double> angles(NO_JOINTS);
    vector<double> tmp_angles1(NO_JOINTS), tmp_angles2(NO_JOINTS);

    normal *= -1;

    for(int i=0; i<points.size(); i++)
    {
        bool success1 = getIK(gripper_dim, tmp_angles1, min_norm_jts, axis, normal, points[i], false);

        double lst_norm1 = 10000;
        if(success1)
        {
            lst_norm1 = 0;
            for(int j=0; j<NO_JOINTS; j++)
            {
                lst_norm1 += pow((tmp_angles1[j] - min_norm_jts[j]),2);
                angles[j] = tmp_angles1[j];
            }
        }
        else
        {
            if(once)// check if first time is over and failed to compute ik then return false
            {
                cout << "Failed to compute IK at step: " << i+1 << endl;
                return false;
            }
        }

        // reverse the axis and compute ik if first time
        if(!once)
        {
            axis *= -1;
            bool success2 = getIK(gripper_dim, tmp_angles2, min_norm_jts, axis, normal, points[i], false);
            if(success2)
            {
                double lst_norm2 = 0;
                for(int j=0; j<NO_JOINTS; j++)
                    lst_norm2 += pow((tmp_angles2[j] - min_norm_jts[j]),2);

                if(lst_norm1 < lst_norm2)// if previous norm is less than the present norm then make use  of that axis
                    axis *= -1;
                else// copy the jt angles corresponding to present axis
                {
                    for(int j=0; j<NO_JOINTS; j++)
                        angles[j] = tmp_angles2[j];
                }
            }
            else
            {
                if(!success1)// if success1 also false then return false that ik is not computed
                {
                    cout << "Failed to compute IK at step: " << i+1 << endl;
                    return false;
                }
                else
                {
                    axis *= -1;
                }
            }
            once = true;
        }

        traj_angles.push_back(angles);



    }
    return true;
}

void obtainLeastDistJoints(int &samples, double recorded_jts[][NO_JOINTS], IkReal* eerot, IkReal* eetrans, double &min_dist, geometry_msgs::Point &desired_eef,
                            IkReal* min_jts, double &length_x, double &length_y, double &length_z)
{
    IkReal *jts = (IkReal*) malloc(sizeof(IkReal)*NO_JOINTS);
    for(int i=0; i<samples; i++)
    {
        for(int j=0; j<NO_JOINTS; j++)
            jts[j] = recorded_jts[i][j];

        ComputeFk(jts, eetrans, eerot);

        geometry_msgs::Point pt_eef;
        tf::Vector3 x_vector(eerot[0], eerot[3], eerot[6]), y_vector(eerot[1], eerot[4], eerot[7]), z_vector(eerot[2], eerot[5], eerot[8]);
        x_vector.normalize();
        y_vector.normalize();
        z_vector.normalize();

        pt_eef.x =  desired_eef.x - length_z*z_vector.x() - length_x*x_vector.x() - length_y*y_vector.x();
        pt_eef.y =  desired_eef.y - length_z*z_vector.y() - length_x*x_vector.y() - length_y*y_vector.y();
        pt_eef.z =  desired_eef.z - length_z*z_vector.z() - length_x*x_vector.z() - length_y*y_vector.z();

        pt_eef.x = pt_eef.x+0.22; pt_eef.y = pt_eef.y+0.14; pt_eef.z = pt_eef.z+0.406;

        double dist = pow(eetrans[0]-pt_eef.x,2) + pow(eetrans[1]-pt_eef.y,2) + pow(eetrans[2]-pt_eef.z,2);
        if(dist<min_dist)
        {
            min_dist = dist;
            for(int j=0; j<NO_JOINTS; j++)
                min_jts[j] = jts[j];
        }
    }

    return;
}

// wrt robot arm left side joints pose for suction
#define N_DEF_GRIPPER 20
double tote_gripper_joints[][NO_JOINTS] = {{-1.23164, 1.11057, -0.152116, 1.89745, 0.631541, 0.344671, 1.49679},
                                           {-1.2358, 1.21513, -0.172961, 1.60506, 0.799568, 0.518391, 1.49658},
                                           {-1.27529, 1.15494, -0.0699234, 2.01914, 0.592876, 0.283866, 1.53521},
                                           {-1.27594, 1.11131, -0.0189746, 2.12772, 0.656449, 0.271372, 1.50912},
                                           {-1.33398, 1.20707, -0.189153, 1.6694, 0.46992, 0.364913, 1.60714},
                                           {-1.33434, 1.19993, -0.188834, 1.7605, 0.564647, 0.419631, 1.56213},
                                           {-1.33719, 1.12594, -0.141717, 1.93077, 0.655263, 0.396858, 1.46494},
                                           {-1.34201, 1.09418, -0.113529, 2.12917, 0.664435, 0.330438, 1.43422},
                                           {-1.45984, 1.19284, -0.13077, 1.6913, 0.451892, 0.402709, 1.64566},
                                           {-1.46506, 1.18136, -0.141671, 1.83055, 0.54828, 0.387132, 1.59974},
                                           {-1.46751, 1.13058, -0.135924, 1.98199, 0.522186, 0.399942, 1.42579},
                                           {-1.48449, 1.13346, -0.13711, 2.13402, 0.594615, 0.309643, 1.41963},
                                           {-1.55681, 1.24676, -0.149288, 1.65465, 0.639686, 0.315968, 1.23499},
                                           {-1.60502, 1.19175, -0.142447, 1.84231, 0.443668, 0.365704, 1.42538},
                                           {-1.61024, 1.16211, -0.146643, 1.99187, 0.499414, 0.31328, 1.37822},
                                           {-1.62945, 1.14902, -0.148741, 2.11357, 0.501865, 0.311461, 1.36877},
                                           {-1.77642, 1.24057, -0.066913, 1.58222, 0.276196, 0.326643, 1.35541},
                                           {-1.77661, 1.17978, -0.107827, 1.80175, 0.393774, 0.319606, 1.2915},
                                           {-1.78559, 1.16827, -0.128352, 1.93205, 0.438608, 0.320317, 1.26428},
                                           {-1.7949, 1.16534, -0.126437, 2.07496, 0.426589, 0.237134, 1.22431}
                                          };

bool computeGripperDefaultIK(vector<geometry_msgs::Point> &points, vector<vector<double> > &traj_angles)
{
    bool success = false;
    vector<double> gripper_dim(3);
    gripper_dim[0] = (double) GRIPPER_DIM_X;  gripper_dim[1] = (double) GRIPPER_DIM_Y; gripper_dim[2] = (double) GRIPPER_DIM_Z;
    for(int i=0; i<points.size(); i++)
    {
        IkReal eerot[9],eetrans[3] = {0,0,0};
        // dimensions of gripper to get the eef position of the three suction cups


        // compute forward kinematics for each sample joint angle and compare its eef_position with desired position
        // Choose the orientation matrix and joint angles which gives eef_position with least distance from desired position
        int n_samples = 1;
        double lst_dist = 10000.0;
        IkReal *lst_jts = (IkReal*) malloc(sizeof(IkReal)*NO_JOINTS);

        n_samples = N_DEF_GRIPPER;
        obtainLeastDistJoints(n_samples, tote_gripper_joints, eerot, eetrans, lst_dist, points[i], lst_jts, gripper_dim[0], gripper_dim[1], gripper_dim[2]);

        // Now with the joints giving least distance from desired point compute the orientation and make use of it to compute accurate IK
        ComputeFk(lst_jts, eetrans, eerot);

        double min_norm_jts[NO_JOINTS];
        for(int j=0; j<NO_JOINTS; j++)
            min_norm_jts[j] = lst_jts[j];
        vector<double> angles(NO_JOINTS);
        tf::Vector3 axis(eerot[0], eerot[3], eerot[6]), normal(eerot[2], eerot[5], eerot[8]);
        success = getIK(gripper_dim, angles, min_norm_jts, axis, normal, points[i], true);

        if(success)
        {
            traj_angles.push_back(angles);
        }
        else
            return false;
    }
    return true;
}

// wrt robot arm left side joints pose for suction
#define TOTE_LEFT 1
#define N_LEFT 24
double tote_left_joints[][NO_JOINTS] = {{-1.58665, 1.17164, 0.178982, 1.62789, -1.23944, -1.07497, 0.261383},
                                        {-1.60469, 1.14044, 0.145548, 1.74013, -1.3635, -1.10731, 0.281007},
                                        {-1.61145, 1.12195, 0.146232, 1.87043, -1.34698, -1.18235, 0.185557},
                                        {-1.61258, 1.10094, 0.140577, 1.94585, -1.38288, -1.19469, 0.180009},
                                        {-1.57792, 1.14229, 0.0912698, 1.80464, -1.67307, -1.28673, 0.227683},
                                        {-1.5914, 1.14058, 0.0886699, 1.87691, -1.71845, -1.31124, 0.14148},
                                        {-1.70283, 1.11272, 0.302043, 1.95796, -1.68983, -0.859425, 2.29142},
                                        {-1.6949, 1.10107, 0.313401, 2.07599, -1.68137, -0.828508, 2.23655},
                                        {-1.72847, 1.17204, 0.36622, 1.97526, -1.90965, -0.708873, 2.26912},
                                        {-1.73796, 1.14405, 0.38378, 1.97543, -1.72185, -0.628774, 1.95893},
                                        {-1.73848, 1.15182, 0.395001, 1.94176, -1.52354, -0.594141, 1.85824},
                                        {-1.74268, 1.15361, 0.398102, 1.91833, -1.43997, -0.604183, 1.853},
                                        {-1.74041, 1.1743, 0.38305, 1.90009, -1.37394, -0.816489, -0.0208572},
                                        {-1.73694, 1.20028, 0.38565, 1.82007, -1.36659, -0.797433, -0.00626744},
                                        {-1.72584, 1.2135, 0.39418, 1.74269, -1.35678, -0.784149, -0.00102745},
                                        {-1.70122, 1.23367, 0.400337, 1.64545, -1.28072, -0.735283, 0.00472626},
                                        {-1.69154, 1.18271, 0.350119, 1.68056, -1.35781, -0.84448, 0.107471},
                                        {-1.72449, 1.16995, 0.349389, 1.73033, -1.48338, -0.884965, 0.169632},
                                        {-1.72529, 1.15002, 0.350575, 1.80848, -1.52576, -0.926714, 0.166755},
                                        {-1.74655, 1.13506, 0.348705, 1.8804, -1.58767, -0.9143, 0.167782},
                                        {-1.8574, 1.19344, 0.595649, 1.89387, -1.46211, -0.581094, 1.49268},
                                        {-1.86244, 1.19786, 0.588031, 1.98156, -1.47412, -0.585996, 1.44911},
                                        {-1.87474, 1.19743, 0.588123, 2.03431, -1.50014, -0.592559, 1.41192},
                                        {-1.85973, 1.20549, 0.601578, 2.13147, -1.53833, -0.606081, 1.34925}
                                       };

// wrt robot arm inwards arm joints pose for suction
#define TOTE_INWARDS 2
#define N_INWARDS 52
double tote_inwards_joints[][NO_JOINTS] = {{-1.44695, 1.06798, 0.264733, 1.6261, 0.124458, 1.2381, 1.91866},
                                           {-1.47536, 1.06507, 0.257572, 1.62602, 0.0324983, 1.29463, 1.89996},
                                           {-1.47123, 1.12529, 0.328635, 1.62593, 0.103346, 1.2037, 2.01575},
                                           {-1.47138, 1.18733, 0.321474, 1.62474, 0.0952017, 1.13689, 2.0475},
                                           {-1.43449, 1.26107, 0.205163, 1.46649, 0.0954389, 1.43158, 2.27816},
                                           {-1.43467, 1.23872, 0.203749, 1.47006, 0.107932, 1.51477, 2.28648},
                                           {-1.43482, 1.20671, 0.210363, 1.49512, 0.129993, 1.53983, 2.28936},
                                           {-1.43493, 1.13186, 0.214879, 1.55648, 0.138058, 1.54078, 2.27734},
                                           {-1.47215, 1.27589, 0.220398, 1.47987, -0.0174747, 1.49468, 2.18425},
                                           {-1.47218, 1.23337, 0.227604, 1.4964, 0.0102793, 1.54046, 2.27302},
                                           {-1.47218, 1.19895, 0.22131, 1.52657, 0.00593034, 1.54418, 2.29234},
                                           {-1.47226, 1.12944, 0.2183, 1.57472, 0.00703733, 1.54355, 2.30097},
                                           {-1.48807, 1.21299, 0.101031, 1.58545, 0.185106, 1.07323, 0.263541},
                                           {-1.48833, 1.18928, 0.091133, 1.58571, 0.204004, 1.15618, 0.304022},
                                           {-1.48833, 1.16705, 0.0947363, 1.58716, 0.228674, 1.23272, 0.29159},
                                           {-1.48836, 1.12103, 0.0904944, 1.61409, 0.225195, 1.32492, 0.294672},
                                           {-1.50564, 1.10352, 0.0586116, 1.62005, 0.134263, 1.34548, 0.22573},
                                           {-1.50568, 1.13729, 0.0566958, 1.61997, 0.104058, 1.28032, 0.256143},
                                           {-1.50564, 1.17077, 0.0591133, 1.61699, 0.0912481, 1.22671, 0.281624},
                                           {-1.50571, 1.2365, 0.0519522, 1.55273, 0.117025, 1.19556, 0.266417},
                                           {-1.55202, 1.25613, 0.0214377, 1.55247, 0.0484706, 1.18109, 0.245149},
                                           {-1.55224, 1.22371, 0.0172414, 1.55179, 0.0548754, 1.25391, 0.242889},
                                           {-1.55232, 1.17451, 0.00921365, 1.55264, 0.0419868, 1.32974, 0.221518},
                                           {-1.55235, 1.12879, 0.00620325, 1.5685, 0.0398519, 1.42708, 0.217305},
                                           {-1.60681, 1.12646, 0.00063857, 1.57028, -0.00292563, 1.41719, 0.184735},
                                           {-1.60684, 1.17861, 0.00615763, 1.57054, -0.0512381, 1.36113, 0.208469},
                                           {-1.60681, 1.21372, 0.0125889, 1.57046, -0.0623081, 1.29946, 0.227066},
                                           {-1.60684, 1.26237, 0.0141398, 1.56815, -0.0851597, 1.18314, 0.21412},
                                           {-1.65779, 1.25797, 0.00857508, 1.54088, -0.165338, 1.19785, 0.223984},
                                           {-1.65779, 1.20851, 0.00729794, 1.53875, -0.160831, 1.30293, 0.218744},
                                           {-1.65779, 1.17386, 0.0030104, 1.53884, -0.167156, 1.36888, 0.198914},
                                           {-1.65779, 1.11975, -0.00551907, 1.54012, -0.153952, 1.45183, 0.163364},
                                           {-1.59008, 1.21641, -0.127851, 1.61085, -0.0921179, 1.02895, 0.0327756},
                                           {-1.59004, 1.18668, -0.137201, 1.61, -0.102397, 1.127, 0.0252752},
                                           {-1.59004, 1.13466, -0.132366, 1.61017, -0.0902993, 1.19809, -0.0422281},
                                           {-1.59004, 1.07558, -0.145685, 1.61111, -0.0861876, 1.32697, -0.0834288},
                                           {-1.64622, 1.0796, -0.146232, 1.61119, -0.130626, 1.30199, -0.160693},
                                           {-1.64622, 1.13053, -0.138478, 1.60778, -0.113625, 1.27423, -0.152062},
                                           {-1.64625, 1.18836, -0.140577, 1.57778, -0.111886, 1.226, -0.141069},
                                           {-1.64625, 1.2387, -0.136563, 1.56364, -0.133077, 1.13206, -0.101923},
                                           {-1.70612, 1.27198, -0.141945, 1.49384, -0.204794, 1.20157, -0.107574},
                                           {-1.70944, 1.2397, -0.160691, 1.49222, -0.22899, 1.25328, -0.126787},
                                           {-1.71404, 1.19064, -0.162014, 1.49307, -0.22472, 1.32254, -0.181756},
                                           {-1.71415, 1.13675, -0.164432, 1.49759, -0.231283, 1.40201, -0.226552},
                                           {-1.73829, 1.13965, -0.165572, 1.51447, -0.308299, 1.38129, -0.181653},
                                           {-1.73837, 1.19086, -0.154899, 1.51353, -0.322848, 1.29843, -0.181447},
                                           {-1.73833, 1.223, -0.129721, 1.51327, -0.316917, 1.23588, -0.155247},
                                           {-1.73833, 1.26164, -0.112434, 1.51072, -0.327197, 1.15238, -0.10367},
                                           {-1.40695, 1.24592, 0.13784, 1.60062, 0.213334, 1.05449, 1.69693},
                                           {-1.40717, 1.20229, 0.14272, 1.60003, 0.258879, 1.1693, 1.65861},
                                           {-1.40717, 1.18002, 0.138889, 1.56372, 0.265679, 1.35575, 1.71307},
                                           {-1.40717, 1.12771, 0.163656, 1.56381, 0.276275, 1.444, 1.75375}
                                          };

// wrt robot arm right side joints pose for suction
#define TOTE_RIGHT 3
#define N_RIGHT 40
double tote_right_joints[][NO_JOINTS] = {{-1.46404, 1.18041, -0.380724, 1.99758, -1.32001, 0.462092, 1.73012},
                                         {-1.4224, 1.19086, -0.356595, 1.99775, -1.35623, 0.748013, 1.78118},
                                         {-1.40768, 1.17408, -0.349571, 1.99895, -1.35504, 0.942449, 1.77163},
                                         {-1.40779, 1.16862, -0.358192, 1.99895, -1.31345, 1.10486, 1.73752},
                                         {-1.42909, 1.17413, -0.363711, 1.92838, -1.36445, 1.08438, 1.75478},
                                         {-1.4292, 1.24464, -0.348157, 1.89327, -1.35615, 0.988311, 1.79639},
                                         {-1.42825, 1.23957, -0.352764, 1.88714, -1.2105, 0.846931, 0.237854},
                                         {-1.42832, 1.29278, -0.344098, 1.85041, -1.1969, 0.813247, 0.208778},
                                         {-1.42828, 1.29769, -0.337575, 1.84649, -1.17618, 0.721841, 0.180831},
                                         {-1.42814, 1.29574, -0.339308, 1.7899, -1.23912, 0.700175, 0.169015},
                                         {-1.42836, 1.28816, -0.352217, 1.79067, -1.26988, 0.806842, 0.157919},
                                         {-1.42843, 1.27288, -0.377349, 1.7916, -1.24687, 0.9075, 0.146},
                                         {-1.42795, 1.20946, -0.398695, 1.79203, -1.22521, 0.971389, 0.0847645},
                                         {-1.42017, 1.18391, -0.348568, 1.79203, -1.42589, 0.961426, 0.106341},
                                         {-1.42291, 1.2318, -0.338442, 1.79212, -1.44178, 0.857922, 0.154323},
                                         {-1.42291, 1.26843, -0.338579, 1.79126, -1.47436, 0.782488, 0.194907},
                                         {-1.42317, 1.2933, -0.338123, 1.79109, -1.53003, 0.644114, 0.219258},
                                         {-1.43902, 1.30234, -0.355683, 1.71312, -1.52441, 0.639449, 0.176516},
                                         {-1.43193, 1.25675, -0.337119, 1.71312, -1.42755, 0.7934, 0.0217819},
                                         {-1.43186, 1.24581, -0.352855, 1.71312, -1.46013, 0.92877, 0.0118157},
                                         {-1.64731, 1.03969, 0.0237183, 1.81027, -1.52837, 0.96712, 0.0070894},
                                         {-1.64731, 1.08383, -0.0252691, 1.67229, -1.53303, 0.896509, -0.025789},
                                         {-1.64728, 1.144, -0.0126802, 1.64392, -1.51927, 0.8905, -0.0221929},
                                         {-1.64724, 1.2034, 0.00136836, 1.62108, -1.56015, 0.929956, 0.0309262},
                                         {-1.64724, 1.28556, 0.00355774, 1.55972, -1.53303, 0.878639, 0.0502422},
                                         {-1.64695, 1.2798, 0.00875752, 1.50066, -1.56695, 0.847564, 0.069661},
                                         {-1.64695, 1.23878, 0.00177887, 1.5016, -1.54545, 0.897853, 0.0679144},
                                         {-1.6464, 1.20723, 0.0470261, 1.50177, -1.58625, 1.0484, 0.0277411},
                                         {-1.6464, 1.15065, 0.0394545, 1.50185, -1.5596, 1.08011, 0.000410979},
                                         {-1.62379, 1.14989, 0.0433771, 1.50253, -1.69908, 1.00326, 0.045516},
                                         {-1.63464, 1.19846, 0.0382229, 1.50262, -1.70501, 0.951938, 0.0865112},
                                         {-1.63471, 1.24426, 0.03316, 1.50279, -1.72905, 0.898169, 0.155042},
                                         {-1.63468, 1.2965, 0.0309706, 1.50279, -1.75143, 0.83768, 0.238676},
                                         {-1.6197, 1.28963, 0.0381317, 1.57898, -1.97947, 0.90663, 0.337414},
                                         {-1.61977, 1.26224, 0.00579274, 1.5783, -1.98002, 0.911928, 0.339058},
                                         {-1.6197, 1.21513, -0.0213465, 1.57847, -1.96231, 0.905918, 0.338031},
                                         {-1.6197, 1.15839, -0.0191571, 1.58418, -1.92349, 0.912956, 0.308748},
                                         {-1.5976, 1.21399, -0.0624886, 1.93597, -1.72035, 0.846141, 0.292823},
                                         {-1.59746, 1.16012, -0.0494435, 1.92583, -1.71379, 0.967515, 0.292617},
                                         {-1.59742, 1.11837, -0.077723, 1.92583, -1.69568, 0.990366, 0.263849},
                                        };

#define TOTE_OUTWARDS 4
#define N_OUTWARDS 60
double tote_outwards_joints[][NO_JOINTS] = {{-1.64183, 1.23533, -0.164204, 1.90052, 0.391086, -1.43593, -0.303406},
                                            {-1.64395, 1.21643, -0.172779, 1.89907, 0.387844, -1.47839, -0.308029},
                                            {-1.64552, 1.15868, -0.171912, 1.89898, 0.380649, -1.47167, -0.307926},
                                            {-1.7067, 1.11649, -0.113802, 1.96852, 0.0871364, -1.42075, -0.305255},
                                            {-1.72445, 1.17096, -0.110792, 1.94577, 0.0557452, -1.39758, -0.305769},
                                            {-1.72595, 1.21081, -0.111339, 1.94526, 0.0449915, -1.37829, -0.301145},
                                            {-1.72606, 1.2536, -0.09948, 1.94466, 0.0306005, -1.38809, -0.212476},
                                            {-1.71747, 1.25781, -0.0904944, 1.94509, -0.0728246, -1.35473, -0.199839},
                                            {-1.71923, 1.22395, -0.0848841, 1.94551, -0.0742478, -1.39727, -0.203538},
                                            {-1.73161, 1.16238, -0.0793195, 1.98676, -0.0764618, -1.42067, -0.204873},
                                            {-1.74056, 1.1087, -0.0779967, 1.98668, -0.0873736, -1.45815, -0.209908},
                                            {-1.7395, 1.109, -0.0770388, 1.98676, -0.250893, -1.44439, -0.204771},
                                            {-1.73953, 1.15586, -0.0635377, 1.99452, -0.194357, -1.44795, -0.23508},
                                            {-1.7395, 1.19528, -0.0400018, 1.96409, -0.177831, -1.43111, -0.220696},
                                            {-1.73796, 1.24461, -0.0322021, 1.95105, -0.134737, -1.38564, -0.213607},
                                            {-1.73906, 1.19851, -0.0510856, 1.98847, -0.0382704, -1.52797, -0.220593},
                                            {-1.73873, 1.13287, 0.00492611, 1.99997, -0.171505, -1.57233, -0.265698},
                                            {-1.73877, 1.1604, 0.0151432, 1.9923, -0.173087, -1.4474, -0.293542},
                                            {-1.73877, 1.19914, 0.0177431, 1.96656, -0.164073, -1.36864, -0.303714},
                                            {-1.73888, 1.23813, 0.0203886, 1.96026, -0.155849, -1.33559, -0.235902},
                                            {-1.65093, 1.22428, 0.0343459, 1.96733, 0.00925133, -1.21904, -0.28635},
                                            {-1.66809, 1.18157, 0.0351213, 1.97108, 0.0220609, -1.23391, -0.279363},
                                            {-1.70166, 1.16148, 0.0467068, 2.03517, -0.0915644, -1.44242, -0.269089},
                                            {-1.70378, 1.10591, 0.0477559, 2.03517, -0.0921179, -1.45024, -0.257479},
                                            {-1.61382, 1.10756, 0.0503558, 2.03662, 0.0256981, -1.47665, -0.253061},
                                            {-1.63296, 1.14967, 0.0509487, 2.03559, -0.0302843, -1.4659, -0.296213},
                                            {-1.63329, 1.18901, 0.0545521, 2.01088, -0.0297308, -1.46139, -0.297344},
                                            {-1.63314, 1.25024, 0.0743933, 1.96997, -0.0351867, -1.40581, -0.312036},
                                            {-1.59308, 1.2593, 0.107325, 1.96409, 0.0117816, -1.36184, -0.345017},
                                            {-1.61682, 1.1851, 0.118409, 2.06525, 0.00324192, -1.48156, -0.343579},
                                            {-1.63102, 1.15182, 0.122332, 2.0615, -0.0605685, -1.54995, -0.354778},
                                            {-1.6327, 1.11614, 0.121055, 2.06031, -0.0517916, -1.57154, -0.36382},
                                            {-1.57631, 1.13536, 0.144864, 2.02145, -0.0596987, -1.55683, -0.386526},
                                            {-1.58716, 1.17508, 0.155583, 2.04352, -0.0504474, -1.53841, -0.376971},
                                            {-1.59224, 1.22561, 0.192848, 2.00082, -0.0265679, -1.52354, -0.405945},
                                            {-1.61302, 1.28985, 0.228152, 1.96375, 0.00442799, -1.44416, -0.444988},
                                            {-1.55038, 1.28314, 0.238962, 1.96315, 0.0358192, -1.39695, -0.444988},
                                            {-1.57905, 1.20606, 0.25634, 2.03167, -0.00980483, -1.51564, -0.450844},
                                            {-1.58712, 1.15103, 0.265143, 2.03261, -0.00632569, -1.52481, -0.44992},
                                            {-1.59994, 1.11975, 0.269796, 2.07053, -0.0338425, -1.50346, -0.528314},
                                            {-1.51882, 1.10444, 0.0195676, 2.07019, -0.0464939, -1.53667, -0.227477},
                                            {-1.51882, 1.11815, 0.0356687, 2.05664, 0.000632569, -1.42565, -0.230148},
                                            {-1.51882, 1.14782, 0.0351669, 2.05707, 0.00253028, -1.38169, -0.248437},
                                            {-1.51886, 1.20386, 0.0443806, 1.99767, -0.00316285, -1.37125, -0.240423},
                                            {-1.51886, 1.22412, 0.0460226, 1.99903, -0.00537684, -1.30309, -0.231073},
                                            {-1.50546, 1.22178, 0.0715654, 1.99153, -0.108881, -1.33891, -0.203024},
                                            {-1.50553, 1.1939, 0.0706075, 2.00474, -0.082234, -1.38722, -0.243711},
                                            {-1.50597, 1.1478, 0.0631272, 2.04897, -0.06555, -1.5154, -0.284912},
                                            {-1.50608, 1.1118, 0.0613939, 2.04889, -0.0587499, -1.53248, -0.324879},
                                            {-1.49183, 1.12467, 0.130542, 2.00875, -0.0687919, -1.49982, -0.283165},
                                            {-1.49194, 1.16971, 0.167533, 2.03704, -0.0484706, -1.48314, -0.302995},
                                            {-1.49202, 1.21909, 0.196132, 1.96571, 0.0180282, -1.36825, -0.323749},
                                            {-1.49256, 1.26137, 0.211868, 1.96196, 0.016684, -1.294, -0.26426},
                                            {-1.47748, 1.31702, 0.250182, 1.89941, -0.0808107, -1.38659, -0.269192},
                                            {-1.47773, 1.26104, 0.24854, 1.94551, -0.0674477, -1.4504, -0.278644},
                                            {-1.4785, 1.19265, 0.24886, 2.00091, -0.0729036, -1.51073, -0.337928},
                                            {-1.47963, 1.12738, 0.249954, 1.99946, -0.0626244, -1.5033, -0.337517},
                                            {-1.57909, 1.15945, 0.248358, 1.86779, -0.63423, -1.28894, -0.206414},
                                            {-1.57858, 1.22227, 0.25967, 1.88475, -0.576271, -1.32919, -0.27474},
                                            {-1.5781, 1.25455, 0.274767, 1.87435, -0.528433, -1.20655, -0.278028}
                                          };

// wrt robot arm bottom of tote joints pose for suction
#define TOTE_BOTTOM 5
#define N_BOTTOM 60
double tote_bottom_joints[][NO_JOINTS] = {{-1.33997, 1.19482, 0.0665937, 1.8447, 0.00134421, -0.0098839, -0.125862},
                                          {-1.33741, 1.16811, 0.0888524, 1.94977, 0.00134421, -0.0102002, -0.126068},
                                          {-1.34837, 1.17367, 0.113346, 2.05911, 0.00150235, -0.0105165, -0.125965},
                                          {-1.19946, 1.19634, -0.000456121, 2.2927, -0.126198, -0.377011, -0.12576},
                                          {-1.37182, 1.19056, -0.0304233, 1.81964, 0.0608848, 0.0717966, -0.126376},
                                          {-1.37152, 1.17612, -0.00205254, 1.9831, -0.00189771, 0.0113862, -0.126376},
                                          {-1.37156, 1.18282, 0.0446999, 2.23893, -0.193803, -0.299443, -0.126479},
                                          {-1.37152, 1.20889, 0.0753512, 2.37094, 0.0846062, -0.324666, -0.126479},
                                          {-1.55922, 1.18896, 0.0717022, 1.85347, 0.0714013, -0.0778851, -0.130691},
                                          {-1.55936, 1.17193, 0.0824211, 2.07028, 0.035582, -0.211911, -0.132644},
                                          {-1.55195, 1.18081, 0.0763547, 2.25776, 0.0141537, -0.359695, -0.130794},
                                          {-1.54161, 1.22938, 0.0873472, 2.46979, 0.0434891, -0.6283, -0.131616},
                                          {-1.57492, 1.19078, -0.105136, 1.80609, 0.0115444, 0.0765409, -0.124527},
                                          {-1.58351, 1.16998, -0.0840631, 2.00244, -0.0619918, -0.0303633, -0.125554},
                                          {-1.64337, 1.17269, -0.0410965, 2.22743, -0.0739315, -0.227488, -0.125451},
                                          {-1.7208, 1.23253, 0.0221219, 2.47218, -0.116472, -0.601969, -0.125143},
                                          {-1.68658, 1.18844, -0.0538679, 1.81112, 0.0285447, 0.0128886, -0.146822},
                                          {-1.71587, 1.17177, -0.0561485, 1.96529, 0.0307587, 0.00925133, -0.146925},
                                          {-1.73694, 1.17009, -0.0474822, 2.22904, -0.112202, -0.354318, -0.146925},
                                          {-1.78084, 1.20465, -0.0577449, 2.43366, -0.156956, -0.499018, -0.131924},
                                          {-1.68749, 1.19124, -0.189655, 1.83089, -0.25453, -0.109988, 0.0125349},
                                          {-1.68756, 1.17508, -0.204023, 2.02613, -0.227013, -0.239823, 0.0129459},
                                          {-1.68767, 1.18043, -0.239828, 2.22095, -0.268288, -0.353053, 0.0130486},
                                          {-1.71492, 1.2167, -0.276774, 2.40937, -0.307745, -0.511907, 0.0129459},
                                          {-1.75031, 1.18942, -0.114806, 1.80788, -0.196334, -0.0351867, 0.014076},
                                          {-1.77726, 1.1699, -0.101168, 2.02409, -0.246465, -0.111569, 0.014076},
                                          {-1.80422, 1.17096, -0.123107, 2.19496, -0.179808, -0.218711, 0.0127404},
                                          {-1.85604, 1.20221, -0.0962415, 2.38176, -0.373769, -0.499651, -0.383752},
                                          {-1.89162, 1.20088, -0.00889436, 1.72189, -0.314782, 0.0932249, -0.0412007},
                                          {-1.91141, 1.18239, -0.0369458, 1.85901, -0.310433, 0.0874527, -0.0413034},
                                          {-1.94286, 1.17074, -0.045384, 2.08332, -0.433389, -0.180836, -0.0414062},
                                          {-1.94852, 1.19151, -0.108739, 2.2985, -0.43165, -0.367286, -0.0414062},
                                          {-1.35881, 1.03738, 0.0630815, 1.88373, 0.227251, 0.0286238, -0.00328784},
                                          {-1.34377, 1.05234, 0.0555555, 2.04394, 0.265363, -0.0151817, -0.00328784},
                                          {-1.34373, 1.01167, 0.0860244, 2.22725, 0.312094, -0.154268, -0.00349333},
                                          {-1.3399, 1.03026, 0.116813, 2.43579, 0.312885, -0.374718, -0.00359607},
                                          {-1.32631, 1.01902, -0.191252, 1.90972, 0.155928, 0.0485497, 0.103875},
                                          {-1.39695, 1.0036, -0.0584291, 2.08792, 0.179966, 0.0226144, 0.103772},
                                          {-1.37109, 0.992309, -0.0530469, 2.28111, 0.229465, -0.117025, 0.103772},
                                          {-1.33657, 1.01045, -0.0230341, 2.48045, 0.299205, -0.386025, 0.10367},
                                          {-1.44497, 1.05084, -0.117816, 1.87163, 0.143119, 0.0618337, 0.104697},
                                          {-1.44483, 1.04987, -0.116539, 2.06295, 0.0816805, -0.0524242, 0.104697},
                                          {-1.44483, 1.02923, -0.11435, 2.26211, 0.139561, -0.132128, 0.104697},
                                          {-1.44479, 1.03491, -0.10509, 2.48471, 0.106272, -0.377644, 0.104492},
                                          {-1.51689, 1.09249, -0.197455, 1.84887, 0.0972575, 0.0857132, 0.12463},
                                          {-1.51671, 1.05617, -0.180031, 2.06704, 0.0449124, -0.0847643, 0.124321},
                                          {-1.51671, 1.05568, -0.181126, 2.25299, -0.0647593, -0.221162, 0.124424},
                                          {-1.51671, 1.05551, -0.181673, 2.4986, -0.00260935, -0.418682, 0.124321},
                                          {-1.64939, 1.05834, -0.162881, 1.90989, -0.00600941, -0.00648384, 0.154426},
                                          {-1.64939, 1.05239, -0.172961, 2.0915, -0.174115, -0.151184, 0.154528},
                                          {-1.64943, 1.05158, -0.174694, 2.28947, -0.12857, -0.31755, 0.154528},
                                          {-1.64965, 1.07441, -0.222815, 2.4986, -0.17111, -0.473004, 0.154528},
                                          {-1.69892, 1.08997, -0.168947, 1.8787, -0.170952, -0.00727455, 0.221723},
                                          {-1.69925, 1.07903, -0.184227, 2.05997, -0.145175, -0.128728, 0.221826},
                                          {-1.70261, 1.06667, -0.206076, 2.26603, -0.193092, -0.342694, 0.221826},
                                          {-1.70506, 1.10572, -0.262087, 2.45011, -0.260302, -0.445961, 0.221723},
                                          {-1.73793, 1.1481, -0.169084, 1.88714, -0.26394, -0.128095, 0.21525},
                                          {-1.74761, 1.1406, -0.171821, 2.00287, -0.262358, -0.129835, 0.215148},
                                          {-1.76331, 1.12662, -0.193304, 2.21268, -0.359299, -0.365783, 0.21525},
                                          {-1.77785, 1.15445, -0.216612, 2.40571, -0.362937, -0.420975, 0.21525}
                                         };

bool computeToteIK(geometry_msgs::Point &point, int bin_idx, vector<double> &jt_angle, int position)
{
    IkReal eerot[9],eetrans[3] = {0,0,0};
    // dimensions of gripper to get the eef position of the three suction cups
    vector<double> gripper_dim(3);
//    gripper_dim[0] = (double) SUCTION_DIM_X;  gripper_dim[1] = (double) SUCTION_DIM_Y; gripper_dim[2] = (double) SUCTION_DIM_Z;
    gripper_dim[0] = (double) VACUUM_DIM_X;  gripper_dim[1] = (double) VACUUM_DIM_Y; gripper_dim[2] = (double) VACUUM_DIM_Z;

    // compute forward kinematics for each sample joint angle and compare its eef_position with desired position
    // Choose the orientation matrix and joint angles which gives eef_position with least distance from desired position
    int n_samples = 1;
    double lst_dist = 10000.0;
    IkReal *lst_jts = (IkReal*) malloc(sizeof(IkReal)*NO_JOINTS);

    if(position == TOTE_BOTTOM)
    {
        n_samples = N_BOTTOM;
        obtainLeastDistJoints(n_samples, tote_bottom_joints, eerot, eetrans, lst_dist, point, lst_jts, gripper_dim[0], gripper_dim[1], gripper_dim[2]);
    }
    else if(position == TOTE_RIGHT)
    {
        n_samples = N_RIGHT;
        obtainLeastDistJoints(n_samples, tote_right_joints, eerot, eetrans, lst_dist, point, lst_jts, gripper_dim[0], gripper_dim[1], gripper_dim[2]);
    }
    else if(position == TOTE_INWARDS)
    {
        n_samples = N_INWARDS;
        obtainLeastDistJoints(n_samples, tote_inwards_joints, eerot, eetrans, lst_dist, point, lst_jts, gripper_dim[0], gripper_dim[1], gripper_dim[2]);
    }
    else if(position == TOTE_LEFT)
    {
        n_samples = N_LEFT;
        obtainLeastDistJoints(n_samples, tote_left_joints, eerot, eetrans, lst_dist, point, lst_jts, gripper_dim[0], gripper_dim[1], gripper_dim[2]);
    }
    else if(position == TOTE_OUTWARDS)
    {
        n_samples = N_OUTWARDS;
        obtainLeastDistJoints(n_samples, tote_outwards_joints, eerot, eetrans, lst_dist, point, lst_jts, gripper_dim[0], gripper_dim[1], gripper_dim[2]);
    }


    // Now with the joints giving least distance from desired point compute the orientation and make use of it to compute accurate IK
    ComputeFk(lst_jts, eetrans, eerot);

    double min_norm_jts[NO_JOINTS];
    for(int j=0; j<NO_JOINTS; j++)
        min_norm_jts[j] = lst_jts[j];
    vector<double> angles(NO_JOINTS);
    tf::Vector3 axis(eerot[0], eerot[3], eerot[6]), normal(eerot[2], eerot[5], eerot[8]);
    bool success = getIK(gripper_dim, angles, min_norm_jts, axis, normal, point, true);

    if(success)
    {
        for(int j=0; j<NO_JOINTS; j++)
            jt_angle[j] = angles[j];
        return true;
    }
    else
        return false;

}

bool computeMiddleIK(geometry_msgs::Point &point, int bin_idx, vector<double> &jt_angle)
{
    IkReal eerot[9],eetrans[3] = {0,0,0};
//    IkReal *jts = (IkReal*) malloc(sizeof(IkReal)*NO_JOINTS);
    vector<double> gripper_dim(3);
//    gripper_dim[0] = (double) SUCTION_DIM_X;  gripper_dim[1] = (double) SUCTION_DIM_Y; gripper_dim[2] = (double) SUCTION_DIM_Z;
    gripper_dim[0] = (double) VACUUM_DIM_X;  gripper_dim[1] = (double) VACUUM_DIM_Y; gripper_dim[2] = (double) VACUUM_DIM_Z;

    // compute forward kinematics for each sample joint angle and compare its eef_position with desired position
    // Choose the orientation matrix and joint angles which gives eef_position with least distance from desired position
    int n_samples = 1;
    double lst_dist = 10000.0;
    IkReal *lst_jts = (IkReal*) malloc(sizeof(IkReal)*NO_JOINTS);

    if(bin_idx == 0 || bin_idx == 1 || bin_idx == 2)
    {
        double row1_binfront[][NO_JOINTS] = {{1.55297, -0.335114, 0.0259533, 1.5425, 0.164073, 0.284103, -0.134288},
                                             {1.55297, -0.257872, 0.0224412, 1.54225, 0.199022, 0.195701, -0.152268},
                                             {1.55297, -0.163254, 0.0254972, 1.48123, 0.22306, 0.157431, -0.16172},
                                             {1.55297, -0.0554405, 0.0327495, 1.36533, 0.216497, 0.173957, -0.170351},
                                             {1.55297, -0.324091, -0.139071, 1.37121, 0.411565, 0.564331, -0.358785},
                                             {1.55301, -0.266424, -0.119641, 1.38868, 0.355188, 0.469366, -0.353853},
                                             {1.55301, -0.170313, -0.0874384, 1.38817, 0.332178, 0.34989, -0.33988},
                                             {1.55301, -0.101976, -0.0892173, 1.38783, 0.331229, 0.247256, -0.345634},
                                             {1.55294, -0.32477, 0.127805, 1.42047, 0.184631, 0.42738, -0.105827},
                                             {1.55294, -0.249754, 0.111795, 1.42021, 0.189534, 0.34815, -0.12052},
                                             {1.55297, -0.162466, 0.120598, 1.41868, 0.189375, 0.251684, -0.162748},
                                             {1.55297, -0.0433587, 0.11289, 1.32306, 0.196176, 0.22132, -0.177132}
                                            };
        n_samples = 12;
        obtainLeastDistJoints(n_samples, row1_binfront, eerot, eetrans, lst_dist, point, lst_jts, gripper_dim[0], gripper_dim[1], gripper_dim[2]);

        double row1_front[][NO_JOINTS] = {{1.49643, -0.202078, 0.043742, 1.58077, 0.0904574, 0.143277, 0.390533},
                                          {1.62766, 0.0131406, -0.161832, 1.41953, 0.0290191, 0.0593825, 0.0454132},
                                          {1.62007, -0.0288063, -0.0240376, 1.4508, 0.138295, 0.0903784, -0.0828124},
                                          {1.61744, -0.0298923, 0.0246762, 1.43904, 0.122086, 0.0904574, -0.0279466},
                                          {1.62255, 0.0148783, 0.104178, 1.40709, 0.11236, 0.0859504, -0.0512697}
                                        };
        n_samples = 5;
        obtainLeastDistJoints(n_samples, row1_front, eerot, eetrans, lst_dist, point, lst_jts, gripper_dim[0], gripper_dim[1], gripper_dim[2]);

        double row1_itd1[][NO_JOINTS] = {{1.49629, 0.000977404, 0.0622149, 1.3776, 0.0958343, 0.19499, 0.260458},
                                         {1.62514, 0.143407, -0.148331, 1.25565, 0.0170794, 0.0880853, 0.0315427},
                                         {1.61992, 0.11156, -0.0415526, 1.28403, 0.100104, 0.0983645, -0.0184941},
                                         {1.61733, 0.121035, 0.0205254, 1.27491, 0.0818387, 0.102713, -0.0212682},
                                         {1.62255, 0.154837, 0.085249, 1.25241, 0.110067, 0.078913, -0.0584618}
                                        };
        n_samples = 5;
        obtainLeastDistJoints(n_samples, row1_itd1, eerot, eetrans, lst_dist, point, lst_jts, gripper_dim[0], gripper_dim[1], gripper_dim[2]);

        double row1_inside[][NO_JOINTS] = {{1.49552, 0.245464, 0.0562397, 0.992145, 0.109593, 0.376853, 0.225422},
                                           {1.62503, 0.290316, -0.169449, 1.01848, 0.0165259, 0.161226, 0.0777779},
                                           {1.61882, 0.241174, -0.0476647, 1.04191, 0.0331308, 0.19665, 0.0687363},
                                           {1.61736, 0.25046, 0.0254972, 1.10966, 0.0592243, 0.117895, -0.00678116},
                                           {1.62255, 0.284153, 0.0848385, 1.09271, 0.0881644, 0.0957552, -0.064421}
                                          };
        n_samples = 5;
        obtainLeastDistJoints(n_samples, row1_inside, eerot, eetrans, lst_dist, point, lst_jts, gripper_dim[0], gripper_dim[1], gripper_dim[2]);

        double row1_itd3[][NO_JOINTS] = {{1.49505, 0.40079, 0.0686006, 0.711426, 0.0728246, 0.501074, 0.279672},
                                         {1.6163, 0.417949, -0.180989, 0.856302, 0.000395356, 0.179096, 0.119698},
                                         {1.61722, 0.406464, -0.0556012, 0.819657, 0.0139165, 0.198627, 0.0814767},
                                         {1.62394, 0.413279, 0.0291005, 0.859967, 0.0438054, 0.154189, -0.00339058},
                                         {1.62927, 0.446836, 0.0888524, 0.855706, 0.0489451, 0.129756, -0.0574344}
                                        };
        n_samples = 5;
        obtainLeastDistJoints(n_samples, row1_itd3, eerot, eetrans, lst_dist, point, lst_jts, gripper_dim[0], gripper_dim[1], gripper_dim[2]);

        double row1_end[][NO_JOINTS] = {{1.49779, 0.601239, 0.174649, 0.524451, -0.14731, 0.380095, 0.372347}
                                       };
        n_samples = 1;
        obtainLeastDistJoints(n_samples, row1_end, eerot, eetrans, lst_dist, point, lst_jts, gripper_dim[0], gripper_dim[1], gripper_dim[2]);
    }
    else if(bin_idx == 3)
    {
        double binD[][NO_JOINTS] = {{1.8555, -0.11718, 0.26382, 1.5529, 0.0790712, -0.0732199, -0.00236313},
                                    {1.85531, -0.10241, 0.248039, 1.45063, 0.0569312, -0.0695826, -0.0192133},
                                    {1.85535, -0.0162901, 0.279055, 1.41041, 0.0518707, -0.0645221, 0.0139733},
                                    {1.85542, -0.0763732, 0.372605, 1.47935, 0.0347913, -0.0430147, 0.0377074},
                                    {1.88271, 0.169308, 0.225141, 1.22037, 0.0206376, -0.029968, 0.132027},
                                    {1.88307, 0.222848, 0.177887, 1.0933, -0.122165, 0.137505, 0.312858},
                                    {1.94491, 0.240794, 0.219714, 1.01217, -0.452366, 0.294698, 0.673287},
                                    {1.94469, 0.241011, 0.217433, 1.01413, 0.00901411, 0.26394, 0.210832},
                                    {1.96331, 0.441814, 0.079137, 0.749946, -0.169845, 0.18044, 0.458961},
                                    {2.03388, 0.497363, 0.056331, 0.525644, -0.339848, 0.501628, 0.571159},
                                    {2.00623, 0.476973, 0.0218026, 0.526837, -0.373769, 0.5346, 0.609791},
                                    {2.09662, 0.539608, -0.0369002, 0.514054, -0.393379, 0.420896, 0.78271},
                                    {2.11331, 0.400002, -0.139254, 0.792301, -0.473399, 0.316838, 0.696405},
                                    {2.17814, 0.168928, -0.139755, 1.0945, -0.486367, 0.303238, 0.696405},
                                    {2.14984, 0.344671, -0.12256, 0.844456, -0.488739, 0.301498, 0.696302},
                                    {2.19553, -0.0487073, -0.0790002, 1.37547, -0.500125, 0.288214, 0.696918}
                                   };

        n_samples = 16;
        obtainLeastDistJoints(n_samples, binD, eerot, eetrans, lst_dist, point, lst_jts, gripper_dim[0], gripper_dim[1], gripper_dim[2]);
    }
    else if(bin_idx == 4)
    {
        double binE[][NO_JOINTS] = {{1.58208, -0.217309, 0.0782704, 1.55904, 0.0468892, 0.0162096, -0.0325701},
                                    {1.58212, -0.17281, 0.059615, 1.55861, 0.0468892, 0.0157352, -0.0256862},
                                    {1.58212, -0.117343, 0.0599343, 1.49282, 0.0449915, 0.0174747, -0.0372964},
                                    {1.58216, -0.193417, 0.0717935, 1.49325, 0.0320238, 0.0362937, -0.0244533},
                                    {1.58216, 0.0499562, 0.0886699, 1.31897, 0.011149, 0.0527405, 0.0638046},
                                    {1.58234, 0.0737668, 0.141717, 1.31888, 0.0123351, 0.0502893, 0.0991488},
                                    {1.57134, 0.0538658, -0.00209816, 1.31888, 0.0102793, 0.0525033, 0.0945253},
                                    {1.57595, 0.102302, 0.0952381, 1.17639, -0.0489451, 0.179412, 0.174769},
                                    {1.57595, 0.22893, 0.0985222, 1.04106, -0.0754339, 0.184236, 0.179084},
                                    {1.57595, 0.30047, 0.101031, 0.940756, -0.0758293, 0.184789, 0.177851},
                                    {1.57591, 0.379015, 0.10509, 0.85366, -0.0757502, 0.183445, 0.143637},
                                    {1.57595, 0.449117, 0.115125, 0.697791, -0.077727, 0.180836, 0.141171}
                                   };

        n_samples = 12;
        obtainLeastDistJoints(n_samples, binE, eerot, eetrans, lst_dist, point, lst_jts, gripper_dim[0], gripper_dim[1], gripper_dim[2]);
    }
    else if(bin_idx == 5)
    {
        double binF[][NO_JOINTS] = {{1.64465, -0.136755, -0.4527, 1.55375, -0.152686, 0.119318, 0.055585},
                                    {1.64465, -0.209789, -0.449872, 1.55725, -0.145412, 0.134658, 0.0562014},
                                    {1.64465, -0.200449, -0.530697, 1.55742, -0.146756, 0.132998, 0.0565097},
                                    {1.64465, -0.295855, -0.444308, 1.55827, -0.145017, 0.138058, 0.0869222},
                                    {1.64465, -0.152095, -0.446999, 1.55503, -0.179808, 0.112914, 0.0782916},
                                    {1.04793, 0.136891, 0.144682, 1.15722, 0.0682384, 0.282996, -0.143021},
                                    {1.04789, 0.177643, 0.142629, 1.14563, 0.0272005, 0.24259, -0.142096},
                                    {1.04789, 0.192033, 0.166712, 1.02734, -0.0161305, 0.295568, -0.138911},
                                    {1.04778, 0.239871, 0.148376, 1.0126, -0.0640477, 0.248125, -0.138295},
                                    {1.05582, 0.377142, 0.282476, 0.85758, 0.0113862, 0.267419, -0.278747},
                                    {1.09227, 0.385993, 0.295521, 0.85758, -0.00102793, 0.252632, -0.272068},
                                    {1.02663, 0.433017, 0.213145, 0.793068, -0.0449124, 0.264414, -0.143329},
                                    {1.0388, 0.548351, 0.296889, 0.54516, -0.253265, 0.425956, 0.0170556},
                                    {1.09694, 0.566378, 0.297528, 0.517633, -0.219343, 0.378909, -0.110245},
                                    {1.05786, 0.554324, 0.278279, 0.417328, -0.273982, 0.439557, -0.110348},
                                    {1.05158, 0.557229, 0.279237, 0.421078, -0.221241, 0.680012, -0.117232},
                                   };

        n_samples = 16;
        obtainLeastDistJoints(n_samples, binF, eerot, eetrans, lst_dist, point, lst_jts, gripper_dim[0], gripper_dim[1], gripper_dim[2]);
    }
    else if(bin_idx == 6)
    {
        double binG[][NO_JOINTS] = {{2.37289, -0.130918, -0.244937, 1.89472, -0.0861085, -0.0876899, 0.089799},
                                    {2.37289, -0.0597574, -0.213601, 1.89464, -0.0848434, -0.0918016, 0.157302},
                                    {2.37278, -0.11289, -0.305054, 1.89447, -0.0845271, -0.0919598, 0.157405},
                                    {2.37285, -0.163226, -0.210089, 1.89506, -0.120425, -0.0497358, 0.172509},
                                    {2.37281, 0.00971974, -0.327039, 1.78666, -0.111411, -0.0687129, 0.187407},
                                    {2.37281, 0.0747985, -0.423417, 1.73331, -0.0992343, -0.0834201, 0.207442},
                                    {2.37292, 0.126275, -0.33493, 1.73135, -0.087769, -0.0974157, 0.226141},
                                    {2.37289, 0.174086, -0.362616, 1.61545, -0.0959924, -0.0872946, 0.210216},
                                    {2.34075, 0.163416, -0.386198, 1.61588, -0.105639, -0.0770153, 0.198503},
                                    {2.34082, 0.243021, -0.383461, 1.61477, -0.097732, -0.0868201, 0.235286},
                                    {2.33483, 0.353739, -0.432083, 1.45157, -0.0926714, -0.0907737, 0.256554},
                                    {2.34535, 0.377984, -0.392173, 1.45157, -0.0917226, -0.0920388, 0.25491},
                                    {2.24012, 0.349395, -0.410555, 1.45072, -0.103583, -0.124932, 0.284603},
                                    {2.24016, 0.439669, -0.418172, 1.4024, -0.0354239, -0.213808, 0.370087},
                                    {2.24549, 0.483788, -0.415207, 1.40197, 0.0103583, -0.285684, 0.355805},
                                    {2.24458, 0.559482, -0.419221, 1.2346, 0.00340006, -0.29454, 0.402041},
                                    {2.18475, 0.537545, -0.434911, 1.23451, 0.000632569, -0.294935, 0.391355},
                                    {2.19608, 0.612588, -0.427522, 1.13336, -0.000948854, -0.294303, 0.403376},
                                    {2.19936, 0.592171, -0.411832, 1.18398, -0.146044, -0.148891, 0.418994},
                                    {2.20163, 0.507001, -0.380496, 1.19616, -0.186292, -0.0716385, 0.498004}
                                   };

        n_samples = 20;
        obtainLeastDistJoints(n_samples, binG, eerot, eetrans, lst_dist, point, lst_jts, gripper_dim[0], gripper_dim[1], gripper_dim[2]);
    }
    else if(bin_idx == 7)
    {
        double binH[][NO_JOINTS] = {{1.6544, -0.26732, -0.0584747, 2.12405, -0.0769363, -0.196334, 0.272274},
                                    {1.65447, -0.311928, 0.0183817, 2.12431, -0.188585, -0.153477, 0.217408},
                                    {1.65443, -0.270822, -0.166803, 2.12448, -0.209776, -0.160277, 0.227785},
                                    {1.65447, -0.220948, -0.0989783, 2.06073, -0.227962, -0.209934, 0.246382},
                                    {1.65454, -0.219834, -0.095831, 2.20126, -0.218474, -0.18384, 0.263232},
                                    {1.65451, -0.0646172, -0.0781792, 2.05656, -0.208748, -0.264414, 0.266212},
                                    {1.65454, -0.0254939, -0.0126346, 2.01454, -0.234288, -0.291061, 0.26652},
                                    {1.64932, -0.00149326, -0.180305, 2.01471, -0.229069, -0.283786, 0.26652},
                                    {1.64969, 0.056608, -0.0893541, 1.92659, -0.239902, -0.295884, 0.275048},
                                    {1.65056, 0.090084, -0.0261813, 1.90691, -0.228278, -0.310987, 0.275048},
                                    {1.65053, 0.0895682, -0.0264094, 1.81487, -0.227646, -0.306243, 0.290665},
                                    {1.64954, 0.0675495, -0.16913, 1.81768, -0.160831, -0.228832, 0.294878},
                                    {1.64961, 0.222115, -0.182585, 1.72181, -0.156561, -0.308061, 0.293028},
                                    {1.64965, 0.262894, -0.137429, 1.65346, -0.161226, -0.311461, 0.291179},
                                    {1.64965, 0.356046, -0.129447, 1.52537, -0.167552, -0.316522, 0.283884},
                                    {1.64965, 0.414066, -0.0831509, 1.36959, -0.0271214, -0.17878, 0.167885},
                                    {1.5804, 0.407795, -0.0945995, 1.37215, -0.0245911, -0.175933, 0.164597},
                                    {1.58205, 0.393622, 0.116128, 1.37896, -0.0637314, -0.140272, 0.158535},
                                    {1.57244, 0.326534, 0.0676428, 1.56253, -0.0607267, -0.14391, 0.158535},
                                    {1.48285, 0.332725, 0.0569695, 1.5621, -0.0504474, -0.156245, 0.158433}
                                   };

        n_samples = 20;
        obtainLeastDistJoints(n_samples, binH, eerot, eetrans, lst_dist, point, lst_jts, gripper_dim[0], gripper_dim[1], gripper_dim[2]);
    }
    else if(bin_idx == 8)
    {
        double binI[][NO_JOINTS] = {{1.35761, -0.222984, -0.243797, 2.00943, -0.177199, 0.0410379, 0.0665787},
                                    {1.35761, -0.154158, -0.228334, 1.9127, -0.175459, 0.0391402, 0.0664759},
                                    {1.35757, -0.0878577, -0.319558, 1.85475, -0.184394, 0.0309959, 0.0664759},
                                    {1.35757, -0.0324987, -0.314131, 1.75539, -0.18392, 0.0314703, 0.0660649},
                                    {1.35761, -0.266587, -0.333561, 1.91816, -0.183366, 0.0323401, 0.0659622},
                                    {1.35542, 0.0798756, -0.237913, 1.70536, -0.181468, 0.0304424, 0.0657567},
                                    {1.35542, 0.15671, -0.210819, 1.64656, -0.182417, 0.0298098, 0.0657567},
                                    {1.32784, 0.173516, -0.238871, 1.6221, -0.182496, 0.0298889, 0.065654},
                                    {1.32799, 0.189969, -0.132412, 1.59312, -0.182101, 0.0302843, 0.0650375},
                                    {1.25615, 0.287058, -0.131682, 1.45839, -0.191985, 0.0199259, 0.0649348},
                                    {1.10731, 0.426012, 0.0895366, 1.31812, -0.320634, -0.034396, 0.0650375},
                                    {0.703732, 0.549002, 0.807654, 1.32706, -0.544959, -0.146282, 0.101306},
                                    {0.655119, 0.629041, 0.971492, 1.32604, -0.578959, -0.172375, 0.100895},
                                    {0.452123, 0.536052, 1.09423, 1.46981, -0.550494, -0.134737, 0.130897},
                                    {0.387878, 0.532902, 1.07581, 1.46717, -0.545986, -0.139719, 0.16244},
                                    {0.538866, 0.689368, 1.19098, 1.38212, -0.739948, -0.194357, 0.161823},
                                    {0.520166, 0.539282, 0.959359, 1.39311, -0.482413, -0.132286, 0.229738},
                                    {0.520019, 0.413442, 0.890713, 1.52043, -0.464543, -0.117104, 0.230457},
                                   };

        n_samples = 18;
        obtainLeastDistJoints(n_samples, binI, eerot, eetrans, lst_dist, point, lst_jts, gripper_dim[0], gripper_dim[1], gripper_dim[2]);
    }
    else if(bin_idx == 9)
    {
        double binJ[][NO_JOINTS] = {{2.14326, 0.145878, 0.00606641, 2.39139, 0.14557, -0.630751, 0.0231176},
                                    {2.13249, 0.117913, -0.044563, 2.39139, 0.21626, -0.657477, 0.0192133},
                                    {2.13271, -0.0314941, 0.010582, 2.40034, 0.15411, -0.510879, -0.0220901},
                                    {2.13921, 0.00898668, 0.156586, 2.39974, 0.158221, -0.5142, 0.0454132},
                                    {2.13669, 0.0310869, -0.0220306, 2.32287, 0.272163, -0.611853, -0.0866139},
                                    {2.13673, 0.268379, -0.0444718, 2.25597, 0.257298, -0.630197, -0.0464407},
                                    {2.13892, 0.309267, 0.00323846, 2.2097, 0.244725, -0.641504, -0.0276384},
                                    {2.10575, 0.274732, -0.0556012, 2.2097, 0.248204, -0.642928, -0.0338031},
                                    {2.10594, 0.369947, -0.0380405, 2.12823, 0.247018, -0.642058, -0.0284603},
                                    {2.17993, 0.356617, -0.0142766, 2.12814, 0.262991, -0.630197, -0.0106855},
                                    {2.1212, 0.299574, -0.111385, 2.12891, 0.26473, -0.606001, -0.0435638},
                                    {2.12146, 0.419985, -0.0809615, 2.12738, 0.309247, -0.68104, 0.00113019},
                                    {2.12208, 0.488023, -0.0846105, 2.04607, 0.368709, -0.740343, -0.00410979},
                                    {2.1353, 0.563962, -0.0590221, 1.91679, 0.33028, -0.730539, -0.0159255},
                                    {2.18033, 0.600425, -0.0556012, 1.85407, 0.333918, -0.728957, -0.00421254},
                                    {2.04195, 0.595347, -0.0806422, 1.85424, 0.310433, -0.746748, -0.0326729},
                                    {2.07489, 0.66477, -0.116448, 1.7138, 0.28521, -0.741609, -0.0782916},
                                    {2.10422, 0.727894, -0.14906, 1.71422, 0.273586, -0.715436, -0.0799355},
                                    {2.10429, 0.699495, -0.136928, 1.59312, 0.270898, -0.716385, -0.0360634},
                                    {2.09056, 0.714944, -0.152664, 1.49836, 0.28347, -0.701124, -0.114869},
                                   };

        n_samples = 20;
        obtainLeastDistJoints(n_samples, binJ, eerot, eetrans, lst_dist, point, lst_jts, gripper_dim[0], gripper_dim[1], gripper_dim[2]);
    }
    else if(bin_idx == 10)
    {
        double binK[][NO_JOINTS] = {{1.70261, -0.22312, -0.122788, 2.65796, -0.0753548, -0.482888, -0.030207},
                                    {1.70261, -0.140393, -0.089719, 2.63555, -0.0226144, -0.654077, -0.0311317},
                                    {1.6998, -0.107569, -0.193578, 2.62558, -0.0250656, -0.654156, -0.0311317},
                                    {1.70005, -0.0157471, -0.039044, 2.62541, 0.0172375, -0.700096, -0.0313372},
                                    {1.70002, 0.0584813, -0.0445174, 2.6422, 0.0627825, -0.743743, -0.0338031},
                                    {1.70002, 0.180901, -0.0591589, 2.47934, 0.082234, -0.762562, -0.0324674},
                                    {1.69929, 0.216929, -0.144225, 2.46366, 0.112202, -0.76786, -0.0326729},
                                    {1.71043, 0.26094, -0.0254972, 2.41082, 0.087769, -0.787074, -0.0316454},
                                    {1.70794, 0.294742, -0.0642218, 2.29475, 0.152845, -0.734967, -0.029385},
                                    {1.70754, 0.362562, -0.139117, 2.31052, 0.152686, -0.743032, -0.0295905},
                                    {1.67281, 0.484385, -0.0915435, 2.24387, 0.0198469, -1.04208, -0.0506532},
                                    {1.67292, 0.412573, -0.0889436, 2.24387, 0.0170794, -1.03726, -0.0512697},
                                    {1.67288, 0.470566, -0.0865718, 2.13581, 0.0102002, -1.0231, -0.0541465},
                                    {1.53782, 0.505128, -0.0271392, 2.07641, -0.0748804, -0.993529, -0.0663732},
                                    {1.53785, 0.497064, -0.0253603, 2.21277, -0.0731408, -0.993213, -0.0976076},
                                    {1.55666, 0.541454, 0.0861613, 2.12431, -0.157035, -1.07189, -0.107574},
                                    {1.5499, 0.456909, 0.0629903, 2.28785, -0.0643639, -1.09245, -0.106033},
                                    {1.5495, 0.542948, 0.0157818, 2.1509, -0.060015, -1.09616, -0.111684},
                                    {1.54954, 0.576668, 0.00811896, 2.03218, -0.0239586, -1.05995, -0.0976076}
                                   };

        n_samples = 20;
        obtainLeastDistJoints(n_samples, binK, eerot, eetrans, lst_dist, point, lst_jts, gripper_dim[0], gripper_dim[1], gripper_dim[2]);
    }
    else if(bin_idx == 11)
    {
        double binL[][NO_JOINTS] = {{0.8274, 0.0556034, 0.249589, 2.55041, -0.0762246, -0.749595, 0.370909},
                                    {0.827254, 0.176449, 0.192255, 2.45488, -0.294777, -0.76873, 0.446118},
                                    {0.827181, 0.243129, 0.22391, 2.40281, -0.33542, -0.796563, 0.392999},
                                    {0.660854, 0.203083, 0.169038, 2.48087, -0.657398, -0.973366, 0.621709},
                                    {0.670788, 0.266152, 0.275634, 2.48079, -0.556819, -1.02982, 0.450433},
                                    {0.670788, 0.405785, 0.459496, 2.28674, -0.393142, -0.902677, 0.334846},
                                    {0.689305, 0.445153, 0.516876, 2.28657, -0.38563, -0.893425, 0.266623},
                                    {0.688392, 0.477679, 0.466703, 2.17016, -0.218157, -0.847564, 0.182578},
                                    {0.688575, 0.560894, 0.51382, 2.19308, -0.228516, -0.863457, 0.127506},
                                    {0.688538, 0.428646, 0.514778, 2.19283, -0.251525, -0.902439, 0.15535},
                                    {0.68905, 0.484711, 0.608602, 2.193, -0.253977, -0.879904, 0.135829},
                                    {0.689561, 0.639276, 0.620963, 1.97253, -0.189929, -0.84448, 0.0345223},
                                    {0.695295, 0.65915, 0.652983, 1.96989, -0.269949, -0.805103, 0.171584},
                                    {0.698363, 0.72336, 0.692802, 1.8781, -0.444143, -0.766911, 0.211346},
                                    {0.6984, 0.665639, 0.704753, 2.01301, -0.396226, -0.809768, 0.214429},
                                    {0.647596, 0.657168, 0.647555, 2.01301, -0.358034, -0.816963, 0.206723},
                                    {0.758882, 0.800765, 0.709998, 1.74328, -0.303317, -0.807, 0.102848},
                                    {0.740511, 0.793679, 0.662151, 1.74328, -0.231125, -0.802493, 0.0250697},
                                    {0.729627, 0.834024, 0.73285, 1.72556, -0.547568, -0.730222, 0.0948335},
                                    {0.609611, 0.545256, 0.60468, 2.13232, -0.294382, -0.879192, 0.0959637}
                                   };

        n_samples = 20;
        obtainLeastDistJoints(n_samples, binL, eerot, eetrans, lst_dist, point, lst_jts, gripper_dim[0], gripper_dim[1], gripper_dim[2]);
    }


    // Now with the joints giving least distance from desired point compute the orientation and make use of it to compute accurate IK
    ComputeFk(lst_jts, eetrans, eerot);

    double min_norm_jts[NO_JOINTS];
    for(int j=0; j<NO_JOINTS; j++)
        min_norm_jts[j] = lst_jts[j];
    vector<double> angles(NO_JOINTS);
    tf::Vector3 axis(eerot[0], eerot[3], eerot[6]), normal(eerot[2], eerot[5], eerot[8]);
    bool success = getIK(gripper_dim, angles, min_norm_jts, axis, normal, point, true);

    if(success)
    {
        for(int j=0; j<NO_JOINTS; j++)
            jt_angle[j] = angles[j];
        return true;
    }
    else
        return false;
}

#endif
