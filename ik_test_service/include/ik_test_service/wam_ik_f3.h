/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2015-03-09 17:50:56.684774
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKsin(j[6]);
x11=IKsin(j[5]);
x12=IKcos(j[5]);
x13=IKcos(j[6]);
x14=((IkReal(0.0600000000000000))*(x5));
x15=((IkReal(0.0450000000000000))*(x1));
x16=((IkReal(1.00000000000000))*(x5));
x17=((IkReal(0.0600000000000000))*(x9));
x18=((IkReal(0.300000000000000))*(x1));
x19=((IkReal(0.0600000000000000))*(x6));
x20=((IkReal(1.00000000000000))*(x11));
x21=((IkReal(0.0450000000000000))*(x5));
x22=((IkReal(1.00000000000000))*(x1));
x23=((IkReal(1.00000000000000))*(x12));
x24=((IkReal(0.0600000000000000))*(x8));
x25=((IkReal(1.00000000000000))*(x6));
x26=((x0)*(x4));
x27=((x0)*(x2));
x28=((x2)*(x7));
x29=((x3)*(x4));
x30=((x0)*(x7));
x31=((x2)*(x3));
x32=((x3)*(x7));
x33=((IkReal(1.00000000000000))*(x29));
x34=((IkReal(0.0450000000000000))*(x29));
x35=((IkReal(0.0450000000000000))*(x26));
x36=((x22)*(x6));
x37=((x32)*(x6));
x38=((x4)*(x7)*(x9));
x39=((x16)*(x30));
x40=((x25)*(x30));
x41=((x15)*(x27));
x42=((x16)*(x32));
x43=((x25)*(x32));
x44=((x15)*(x31));
x45=((((IkReal(-1.00000000000000))*(x33)))+(((x1)*(x27))));
x46=((x26)+(((x1)*(x31))));
x47=((x27)+(((IkReal(-1.00000000000000))*(x22)*(x29))));
x48=((((IkReal(-1.00000000000000))*(x36)))+(((x28)*(x5))));
x49=((x33)+(((IkReal(-1.00000000000000))*(x22)*(x27))));
x50=((((IkReal(-1.00000000000000))*(x31)))+(((IkReal(-1.00000000000000))*(x22)*(x26))));
x51=((((IkReal(-1.00000000000000))*(x26)))+(((IkReal(-1.00000000000000))*(x22)*(x31))));
x52=((((x1)*(x16)))+(((x25)*(x28))));
x53=((IkReal(-1.00000000000000))*(x52));
x54=((x35)+(x44));
x55=((x46)*(x6));
x56=((x11)*(x48));
x57=((x45)*(x6));
x58=((x5)*(x51));
x59=((x50)*(x9));
x60=((x53)*(x8));
x61=((((IkReal(-1.00000000000000))*(x39)))+(x57));
x62=((((IkReal(-1.00000000000000))*(x42)))+(x55));
x63=((((IkReal(-1.00000000000000))*(x40)))+(((x49)*(x5))));
x64=((((IkReal(-1.00000000000000))*(x43)))+(x58));
x65=((((x4)*(x7)*(x8)))+(((x52)*(x9))));
x66=((x38)+(x60));
x67=((x61)*(x8));
x68=((x11)*(x64));
x69=((((x47)*(x9)))+(((x62)*(x8))));
x70=((((x47)*(x8)))+(((x9)*(((((IkReal(-1.00000000000000))*(x25)*(x46)))+(x42))))));
x71=((x59)+(x67));
x72=((x12)*(x69));
x73=((((x50)*(x8)))+(((x9)*(((x39)+(((IkReal(-1.00000000000000))*(x57))))))));
eerot[0]=((((x10)*(x73)))+(((x13)*(((((x11)*(x63)))+(((x12)*(x71))))))));
eerot[1]=((((x10)*(((((IkReal(-1.00000000000000))*(x20)*(x63)))+(((IkReal(-1.00000000000000))*(x23)*(x71)))))))+(((x13)*(x73))));
eerot[2]=((((x12)*(((((IkReal(-1.00000000000000))*(x16)*(x49)))+(x40)))))+(((x11)*(x71))));
eetrans[0]=((IkReal(0.220000000000000))+(((IkReal(-1.00000000000000))*(x34)))+(((x12)*(((((x19)*(x30)))+(((IkReal(-1.00000000000000))*(x14)*(x49)))))))+(((x11)*(((((x17)*(x50)))+(((x24)*(x61)))))))+(((x21)*(x30)))+(((IkReal(0.300000000000000))*(x30)*(x6)))+(((IkReal(0.550000000000000))*(x30)))+(x41)+(((x5)*(((((x18)*(x27)))+(((IkReal(-0.300000000000000))*(x29)))))))+(((x6)*(((((IkReal(-1.00000000000000))*(x41)))+(x34))))));
eerot[3]=((((x10)*(x70)))+(((x13)*(((x72)+(x68))))));
eerot[4]=((((x10)*(((((IkReal(-1.00000000000000))*(x20)*(x64)))+(((IkReal(-1.00000000000000))*(x23)*(x69)))))))+(((x13)*(x70))));
eerot[5]=((((x11)*(x69)))+(((x12)*(((x43)+(((IkReal(-1.00000000000000))*(x16)*(x51))))))));
eetrans[1]=((IkReal(0.140000000000000))+(((x5)*(((((x18)*(x31)))+(((IkReal(0.300000000000000))*(x26)))))))+(((IkReal(-1.00000000000000))*(x54)*(x6)))+(((x21)*(x32)))+(((IkReal(0.550000000000000))*(x32)))+(x54)+(((x12)*(((((x19)*(x32)))+(((IkReal(-1.00000000000000))*(x14)*(x51)))))))+(((x11)*(((((x17)*(x47)))+(((x24)*(x62)))))))+(((IkReal(0.300000000000000))*(x37))));
eerot[6]=((((x13)*(((((x12)*(x66)))+(x56)))))+(((x10)*(x65))));
eerot[7]=((((x13)*(x65)))+(((x10)*(((((IkReal(-1.00000000000000))*(x20)*(x48)))+(((IkReal(-1.00000000000000))*(x23)*(x66))))))));
eerot[8]=((((x11)*(x66)))+(((x12)*(((((IkReal(-1.00000000000000))*(x16)*(x28)))+(x36))))));
IkReal x74=((IkReal(0.0450000000000000))*(x28));
eetrans[2]=((IkReal(0.346000000000000))+(((x18)*(x6)))+(((x11)*(((((x24)*(x53)))+(((x17)*(x4)*(x7)))))))+(((IkReal(-0.300000000000000))*(x28)*(x5)))+(((IkReal(-1.00000000000000))*(x74)))+(((x12)*(((((x1)*(x19)))+(((IkReal(-1.00000000000000))*(x14)*(x28)))))))+(((x6)*(x74)))+(((IkReal(0.550000000000000))*(x1)))+(((x15)*(x5))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {3}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij2[2], _nj2;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((IkReal(-0.220000000000000))+(((IkReal(-0.0600000000000000))*(r02)))+(px));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((IkReal(-0.140000000000000))+(py)+(((IkReal(-0.0600000000000000))*(r12))));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((IkReal(-0.346000000000000))+(((IkReal(-0.0600000000000000))*(r22)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( (((IkReal(1.18441410190393))+(((IkReal(-2.98679637348110))*(pp))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(1.18441410190393))+(((IkReal(-2.98679637348110))*(pp))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x75=IKasin(((IkReal(1.18441410190393))+(((IkReal(-2.98679637348110))*(pp)))));
j3array[0]=((IkReal(-1.34027003705633))+(((IkReal(-1.00000000000000))*(x75))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((IkReal(1.80132261653346))+(x75));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x76=(cj2)*(cj2);
IkReal x77=(sj3)*(sj3);
IkReal x78=(cj3)*(cj3);
IkReal x79=((IkReal(13.3333333333333))*(cj3)*(sj3));
dummyeval[0]=((IkReal(149.382716049383))+(((IkReal(44.4444444444444))*(x78)))+(((IkReal(44.4444444444444))*(x76)*(x77)))+(((IkReal(24.4444444444444))*(sj3)))+(((IkReal(13.3333333333333))*(sj3)*(x76)))+(((IkReal(-2.00000000000000))*(cj3)*(x76)))+(x77)+(x76)+(x79)+(((x76)*(x78)))+(((IkReal(-1.00000000000000))*(x76)*(x79)))+(((IkReal(162.962962962963))*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x80=((IkReal(0.0450000000000000))*(cj2));
IkReal x81=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
IkReal x82=((((IkReal(0.300000000000000))*(cj2)*(sj3)))+(x80)+(((IkReal(-1.00000000000000))*(cj3)*(x80))));
if( IKabs(x81) < IKFAST_ATAN2_MAGTHRESH && IKabs(x82) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x83=((IkReal(1.00000000000000))*(IKatan2(x81, x82)));
if( ((((x81)*(x81))+((x82)*(x82)))) < (IkReal)-0.00001 )
    continue;
if( (((pz)*(((IKabs(IKabs(IKsqrt((((x81)*(x81))+((x82)*(x82)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x81)*(x81))+((x82)*(x82))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((pz)*(((IKabs(IKabs(IKsqrt((((x81)*(x81))+((x82)*(x82)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x81)*(x81))+((x82)*(x82))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x84=IKasin(((pz)*(((IKabs(IKabs(IKsqrt((((x81)*(x81))+((x82)*(x82)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x81)*(x81))+((x82)*(x82))))))):(IkReal)1.0e30))));
j1array[0]=((((IkReal(-1.00000000000000))*(x84)))+(((IkReal(-1.00000000000000))*(x83))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(x84)+(((IkReal(-1.00000000000000))*(x83))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((((sj1)*((py)*(py))))+(((sj1)*((px)*(px))))));
dummyeval[0]=((((sj1)*((py)*(py))))+(((sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x85=((IkReal(1.00000000000000))*(cj2)*(sj1));
gconst1=IKsign(((((IkReal(-1.00000000000000))*(x85)*((py)*(py))))+(((IkReal(-1.00000000000000))*(x85)*((px)*(px))))));
IkReal x86=((IkReal(1.00000000000000))*(cj2)*(sj1));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x86)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x86)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-0.0450000000000000))*(cj1)*(sj3)))+(((IkReal(-0.550000000000000))*(cj1)))+(pz)+(((IkReal(-0.300000000000000))*(cj1)*(cj3))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((cj1)*((px)*(px))))+(((cj1)*((py)*(py))))));
dummyeval[0]=((((cj1)*((px)*(px))))+(((cj1)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((sj1)*((py)*(py))))+(((sj1)*((px)*(px))))));
dummyeval[0]=((((sj1)*((py)*(py))))+(((sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x87=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x87;
evalcond[3]=x87;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(9.00000000000000))*((px)*(px))))+(((IkReal(9.00000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x88=((IkReal(110.000000000000))*(pz));
IkReal x89=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst5)*(((((px)*(x88)))+(((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x89))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((IkReal(-1.00000000000000))*(py)*(x88)))+(((IkReal(21.2500000000000))*(py)))+(((py)*(x89))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst5)*(((((px)*(x88)))+(((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x89)))))), ((gconst5)*(((((IkReal(-1.00000000000000))*(py)*(x88)))+(((IkReal(21.2500000000000))*(py)))+(((py)*(x89)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x90=IKsin(j0);
IkReal x91=IKcos(j0);
IkReal x92=((px)*(x90));
IkReal x93=((py)*(x91));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x92)+(((IkReal(-1.00000000000000))*(x93)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((((py)*(x90)))+(((px)*(x91))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x93)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x92))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x256=((IkReal(0.300000000000000))*(sj3));
IkReal x257=((IkReal(0.0450000000000000))*(px));
IkReal x258=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst4)*(((((px)*(x256)))+(x257)+(((IkReal(-1.00000000000000))*(cj3)*(x257))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((cj3)*(x258)))+(((IkReal(-1.00000000000000))*(py)*(x256)))+(((IkReal(-1.00000000000000))*(x258))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst4)*(((((px)*(x256)))+(x257)+(((IkReal(-1.00000000000000))*(cj3)*(x257)))))), ((gconst4)*(((((cj3)*(x258)))+(((IkReal(-1.00000000000000))*(py)*(x256)))+(((IkReal(-1.00000000000000))*(x258)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x259=IKsin(j0);
IkReal x260=IKcos(j0);
IkReal x261=((px)*(x259));
IkReal x262=((py)*(x260));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x262)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x261)+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((((py)*(x259)))+(((px)*(x260))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x261)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(x262))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x263=((IkReal(0.0450000000000000))*(sj3));
IkReal x264=((IkReal(0.300000000000000))*(cj3));
IkReal x265=((x264)+(x263));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x265))));
evalcond[3]=((IkReal(0.550000000000000))+(x265)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(9.00000000000000))*((px)*(px))))+(((IkReal(9.00000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x266=((IkReal(110.000000000000))*(pz));
IkReal x267=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst7)*(((((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x267)))+(((IkReal(-1.00000000000000))*(px)*(x266))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x267)))+(((py)*(x266))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst7)*(((((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x267)))+(((IkReal(-1.00000000000000))*(px)*(x266)))))), ((gconst7)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x267)))+(((py)*(x266)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x268=IKcos(j0);
IkReal x269=IKsin(j0);
IkReal x270=((px)*(x269));
IkReal x271=((IkReal(1.00000000000000))*(x268));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x270)+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(x271))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x269)))+(((IkReal(-1.00000000000000))*(px)*(x271))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x270)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(x268))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x272=((IkReal(0.300000000000000))*(sj3));
IkReal x273=((IkReal(0.0450000000000000))*(px));
IkReal x274=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst6)*(((((px)*(x272)))+(x273)+(((IkReal(-1.00000000000000))*(cj3)*(x273))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(x274)))+(((IkReal(-1.00000000000000))*(py)*(x272)))+(((cj3)*(x274))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst6)*(((((px)*(x272)))+(x273)+(((IkReal(-1.00000000000000))*(cj3)*(x273)))))), ((gconst6)*(((((IkReal(-1.00000000000000))*(x274)))+(((IkReal(-1.00000000000000))*(py)*(x272)))+(((cj3)*(x274)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x275=IKcos(j0);
IkReal x276=IKsin(j0);
IkReal x277=((px)*(x276));
IkReal x278=((IkReal(1.00000000000000))*(x275));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x277)+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(x278))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x276)))+(((IkReal(-1.00000000000000))*(px)*(x278))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x277)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(x275))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-1.00000000000000))*(pz));
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((IkReal(0.0900000000000000))*((py)*(py))))+(((IkReal(0.0900000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x279=((IkReal(0.330000000000000))*(cj3));
IkReal x280=((IkReal(0.0270000000000000))*(cj3));
IkReal x281=((IkReal(0.00405000000000000))*(sj3));
IkReal x282=((IkReal(0.0495000000000000))*(sj3));
if( IKabs(((gconst9)*(((((px)*(x279)))+(((IkReal(-1.00000000000000))*(pp)*(px)))+(((IkReal(0.0495000000000000))*(py)))+(((IkReal(0.392500000000000))*(px)))+(((py)*(x281)))+(((py)*(x280)))+(((px)*(x282))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((IkReal(0.0495000000000000))*(px)))+(((IkReal(-1.00000000000000))*(py)*(x282)))+(((px)*(x280)))+(((px)*(x281)))+(((IkReal(-0.392500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x279)))+(((pp)*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst9)*(((((px)*(x279)))+(((IkReal(-1.00000000000000))*(pp)*(px)))+(((IkReal(0.0495000000000000))*(py)))+(((IkReal(0.392500000000000))*(px)))+(((py)*(x281)))+(((py)*(x280)))+(((px)*(x282)))))), ((gconst9)*(((((IkReal(0.0495000000000000))*(px)))+(((IkReal(-1.00000000000000))*(py)*(x282)))+(((px)*(x280)))+(((px)*(x281)))+(((IkReal(-0.392500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x279)))+(((pp)*(py)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x283=IKsin(j0);
IkReal x284=IKcos(j0);
IkReal x285=((px)*(x283));
IkReal x286=((py)*(x284));
IkReal x287=((px)*(x284));
IkReal x288=((py)*(x283));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(x288)+(x287));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x285)+(((IkReal(-1.00000000000000))*(x286)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x285)))+(((IkReal(1.10000000000000))*(x288)))+(((IkReal(1.10000000000000))*(x287)))+(((IkReal(0.0900000000000000))*(x286)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x289=((IkReal(0.300000000000000))*(py));
IkReal x290=((IkReal(0.0450000000000000))*(px));
IkReal x291=((IkReal(0.0450000000000000))*(py));
IkReal x292=((IkReal(0.300000000000000))*(px));
if( IKabs(((gconst8)*(((((IkReal(-0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj3)*(x289)))+(x290)+(((IkReal(-1.00000000000000))*(cj3)*(x290)))+(((IkReal(-1.00000000000000))*(sj3)*(x291)))+(((sj3)*(x292))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((IkReal(-0.550000000000000))*(px)))+(((cj3)*(x291)))+(((IkReal(-1.00000000000000))*(sj3)*(x289)))+(((IkReal(-1.00000000000000))*(x291)))+(((IkReal(-1.00000000000000))*(cj3)*(x292)))+(((IkReal(-1.00000000000000))*(sj3)*(x290))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst8)*(((((IkReal(-0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj3)*(x289)))+(x290)+(((IkReal(-1.00000000000000))*(cj3)*(x290)))+(((IkReal(-1.00000000000000))*(sj3)*(x291)))+(((sj3)*(x292)))))), ((gconst8)*(((((IkReal(-0.550000000000000))*(px)))+(((cj3)*(x291)))+(((IkReal(-1.00000000000000))*(sj3)*(x289)))+(((IkReal(-1.00000000000000))*(x291)))+(((IkReal(-1.00000000000000))*(cj3)*(x292)))+(((IkReal(-1.00000000000000))*(sj3)*(x290)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x293=IKsin(j0);
IkReal x294=IKcos(j0);
IkReal x295=((px)*(x293));
IkReal x296=((py)*(x294));
IkReal x297=((px)*(x294));
IkReal x298=((py)*(x293));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(x298)+(x297));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x296)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x295)+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x295)))+(((IkReal(1.10000000000000))*(x297)))+(((IkReal(1.10000000000000))*(x298)))+(((IkReal(0.0900000000000000))*(x296))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=pz;
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(((((IkReal(1.10000000000000))*((py)*(py))))+(((IkReal(1.10000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x299=((cj3)*(py));
IkReal x300=((py)*(sj3));
IkReal x301=((IkReal(1.00000000000000))*(pp));
IkReal x302=((cj3)*(px));
IkReal x303=((px)*(sj3));
if( IKabs(((gconst11)*(((((IkReal(-0.330000000000000))*(x303)))+(((IkReal(0.0495000000000000))*(x302)))+(((IkReal(-0.0495000000000000))*(px)))+(((IkReal(-0.00405000000000000))*(x299)))+(((IkReal(-1.00000000000000))*(py)*(x301)))+(((IkReal(0.0270000000000000))*(x300)))+(((IkReal(-0.208450000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((IkReal(0.330000000000000))*(x300)))+(((IkReal(-1.00000000000000))*(px)*(x301)))+(((IkReal(0.0495000000000000))*(py)))+(((IkReal(-0.0495000000000000))*(x299)))+(((IkReal(0.0270000000000000))*(x303)))+(((IkReal(-0.00405000000000000))*(x302)))+(((IkReal(-0.208450000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst11)*(((((IkReal(-0.330000000000000))*(x303)))+(((IkReal(0.0495000000000000))*(x302)))+(((IkReal(-0.0495000000000000))*(px)))+(((IkReal(-0.00405000000000000))*(x299)))+(((IkReal(-1.00000000000000))*(py)*(x301)))+(((IkReal(0.0270000000000000))*(x300)))+(((IkReal(-0.208450000000000))*(py)))))), ((gconst11)*(((((IkReal(0.330000000000000))*(x300)))+(((IkReal(-1.00000000000000))*(px)*(x301)))+(((IkReal(0.0495000000000000))*(py)))+(((IkReal(-0.0495000000000000))*(x299)))+(((IkReal(0.0270000000000000))*(x303)))+(((IkReal(-0.00405000000000000))*(x302)))+(((IkReal(-0.208450000000000))*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x304=IKsin(j0);
IkReal x305=IKcos(j0);
IkReal x306=((px)*(x304));
IkReal x307=((IkReal(1.00000000000000))*(x305));
IkReal x308=((py)*(x304));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(px)*(x307)))+(((IkReal(-0.300000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x308))));
evalcond[1]=((IkReal(0.0450000000000000))+(x306)+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(x307)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(py)*(x305)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(px)*(x305)))+(((IkReal(-0.0900000000000000))*(x306)))+(((IkReal(-1.10000000000000))*(x308))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x309=((IkReal(0.300000000000000))*(py));
IkReal x310=((IkReal(0.0450000000000000))*(px));
IkReal x311=((IkReal(0.0450000000000000))*(py));
IkReal x312=((IkReal(0.300000000000000))*(px));
if( IKabs(((gconst10)*(((((IkReal(-0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj3)*(x309)))+(((IkReal(-1.00000000000000))*(sj3)*(x311)))+(((IkReal(-1.00000000000000))*(sj3)*(x312)))+(((IkReal(-1.00000000000000))*(x310)))+(((cj3)*(x310))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((IkReal(-0.550000000000000))*(px)))+(((sj3)*(x309)))+(((IkReal(-1.00000000000000))*(sj3)*(x310)))+(x311)+(((IkReal(-1.00000000000000))*(cj3)*(x311)))+(((IkReal(-1.00000000000000))*(cj3)*(x312))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst10)*(((((IkReal(-0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj3)*(x309)))+(((IkReal(-1.00000000000000))*(sj3)*(x311)))+(((IkReal(-1.00000000000000))*(sj3)*(x312)))+(((IkReal(-1.00000000000000))*(x310)))+(((cj3)*(x310)))))), ((gconst10)*(((((IkReal(-0.550000000000000))*(px)))+(((sj3)*(x309)))+(((IkReal(-1.00000000000000))*(sj3)*(x310)))+(x311)+(((IkReal(-1.00000000000000))*(cj3)*(x311)))+(((IkReal(-1.00000000000000))*(cj3)*(x312)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x313=IKsin(j0);
IkReal x314=IKcos(j0);
IkReal x315=((px)*(x313));
IkReal x316=((IkReal(1.00000000000000))*(x314));
IkReal x317=((py)*(x313));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x317)))+(((IkReal(-1.00000000000000))*(px)*(x316))));
evalcond[1]=((IkReal(0.0450000000000000))+(x315)+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(x316)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.10000000000000))*(x317)))+(((IkReal(-1.10000000000000))*(px)*(x314)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(py)*(x314)))+(((IkReal(-0.0900000000000000))*(x315))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x318=((px)*(sj3));
IkReal x319=((py)*(sj1));
IkReal x320=((IkReal(0.300000000000000))*(cj3));
IkReal x321=((IkReal(0.0450000000000000))*(cj3));
IkReal x322=((px)*(sj1));
IkReal x323=((IkReal(1.00000000000000))*(cj1)*(pz));
if( IKabs(((gconst3)*(((((IkReal(-0.300000000000000))*(sj1)*(x318)))+(((IkReal(-0.0450000000000000))*(x322)))+(((IkReal(0.0450000000000000))*(py)*(sj3)))+(((py)*(x320)))+(((IkReal(0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x323)))+(((x321)*(x322))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(px)*(x323)))+(((IkReal(-1.00000000000000))*(x319)*(x321)))+(((IkReal(0.300000000000000))*(sj3)*(x319)))+(((IkReal(0.0450000000000000))*(x318)))+(((IkReal(0.0450000000000000))*(x319)))+(((IkReal(0.550000000000000))*(px)))+(((px)*(x320))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst3)*(((((IkReal(-0.300000000000000))*(sj1)*(x318)))+(((IkReal(-0.0450000000000000))*(x322)))+(((IkReal(0.0450000000000000))*(py)*(sj3)))+(((py)*(x320)))+(((IkReal(0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x323)))+(((x321)*(x322)))))), ((gconst3)*(((((IkReal(-1.00000000000000))*(px)*(x323)))+(((IkReal(-1.00000000000000))*(x319)*(x321)))+(((IkReal(0.300000000000000))*(sj3)*(x319)))+(((IkReal(0.0450000000000000))*(x318)))+(((IkReal(0.0450000000000000))*(x319)))+(((IkReal(0.550000000000000))*(px)))+(((px)*(x320)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x324=IKsin(j0);
IkReal x325=IKcos(j0);
IkReal x326=((IkReal(0.300000000000000))*(cj3));
IkReal x327=((IkReal(0.0450000000000000))*(sj3));
IkReal x328=((cj1)*(pz));
IkReal x329=((px)*(x324));
IkReal x330=((px)*(x325));
IkReal x331=((py)*(x324));
IkReal x332=((py)*(x325));
IkReal x333=((sj1)*(x331));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x327)))+(((IkReal(-1.00000000000000))*(x326)))+(x333)+(x328)+(((sj1)*(x330))));
evalcond[1]=((IkReal(0.0450000000000000))+(x329)+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x332)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((((cj1)*(x331)))+(((cj1)*(x330)))+(((IkReal(-1.00000000000000))*(pz)*(sj1))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x331)))+(((IkReal(-1.00000000000000))*(x330)))+(((sj1)*(x327)))+(((sj1)*(x326)))+(((IkReal(0.550000000000000))*(sj1))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x329)))+(((IkReal(1.10000000000000))*(x328)))+(((IkReal(0.0900000000000000))*(x332)))+(((IkReal(1.10000000000000))*(sj1)*(x330)))+(((IkReal(1.10000000000000))*(x333)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x334=((IkReal(0.0450000000000000))*(cj1));
IkReal x335=((pz)*(sj1));
IkReal x336=((IkReal(0.300000000000000))*(cj1)*(sj3));
if( IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(px)*(x336)))+(((IkReal(-1.00000000000000))*(px)*(x334)))+(((cj3)*(px)*(x334)))+(((py)*(x335))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((px)*(x335)))+(((IkReal(-1.00000000000000))*(cj3)*(py)*(x334)))+(((py)*(x336)))+(((py)*(x334))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst2)*(((((IkReal(-1.00000000000000))*(px)*(x336)))+(((IkReal(-1.00000000000000))*(px)*(x334)))+(((cj3)*(px)*(x334)))+(((py)*(x335)))))), ((gconst2)*(((((px)*(x335)))+(((IkReal(-1.00000000000000))*(cj3)*(py)*(x334)))+(((py)*(x336)))+(((py)*(x334)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x337=IKsin(j0);
IkReal x338=IKcos(j0);
IkReal x339=((IkReal(0.300000000000000))*(cj3));
IkReal x340=((IkReal(0.0450000000000000))*(sj3));
IkReal x341=((cj1)*(pz));
IkReal x342=((px)*(x337));
IkReal x343=((px)*(x338));
IkReal x344=((py)*(x337));
IkReal x345=((py)*(x338));
IkReal x346=((sj1)*(x344));
evalcond[0]=((IkReal(-0.550000000000000))+(x341)+(x346)+(((sj1)*(x343)))+(((IkReal(-1.00000000000000))*(x339)))+(((IkReal(-1.00000000000000))*(x340))));
evalcond[1]=((IkReal(0.0450000000000000))+(x342)+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x345))));
evalcond[2]=((((cj1)*(x343)))+(((cj1)*(x344)))+(((IkReal(-1.00000000000000))*(pz)*(sj1))));
evalcond[3]=((((sj1)*(x340)))+(((IkReal(0.550000000000000))*(sj1)))+(((sj1)*(x339)))+(((IkReal(-1.00000000000000))*(x344)))+(((IkReal(-1.00000000000000))*(x343))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x341)))+(((IkReal(1.10000000000000))*(x346)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x345)))+(((IkReal(1.10000000000000))*(sj1)*(x343)))+(((IkReal(-0.0900000000000000))*(x342))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-0.0450000000000000))*(cj1)*(sj3)))+(((IkReal(-0.550000000000000))*(cj1)))+(pz)+(((IkReal(-0.300000000000000))*(cj1)*(cj3))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(((((cj1)*((px)*(px))))+(((cj1)*((py)*(py))))));
dummyeval[0]=((((cj1)*((px)*(px))))+(((cj1)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(((((sj1)*((py)*(py))))+(((sj1)*((px)*(px))))));
dummyeval[0]=((((sj1)*((py)*(py))))+(((sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x347=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x347;
evalcond[3]=x347;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(((((IkReal(-9.00000000000000))*((py)*(py))))+(((IkReal(-9.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x348=((IkReal(110.000000000000))*(pz));
IkReal x349=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst15)*(((((IkReal(-1.00000000000000))*(px)*(x349)))+(((IkReal(-21.2500000000000))*(px)))+(((px)*(x348))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((py)*(x349)))+(((IkReal(21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x348))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst15)*(((((IkReal(-1.00000000000000))*(px)*(x349)))+(((IkReal(-21.2500000000000))*(px)))+(((px)*(x348)))))), ((gconst15)*(((((py)*(x349)))+(((IkReal(21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x348)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x350=IKcos(j0);
IkReal x351=IKsin(j0);
IkReal x352=((px)*(x351));
IkReal x353=((IkReal(1.00000000000000))*(x350));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(x352)+(((IkReal(-1.00000000000000))*(py)*(x353)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x351)))+(((IkReal(-1.00000000000000))*(px)*(x353))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(x352)))+(((IkReal(-0.0900000000000000))*(py)*(x350))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x354=((IkReal(0.300000000000000))*(sj3));
IkReal x355=((IkReal(0.0450000000000000))*(px));
IkReal x356=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst14)*(((((cj3)*(x355)))+(((IkReal(-1.00000000000000))*(px)*(x354)))+(((IkReal(-1.00000000000000))*(x355))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(cj3)*(x356)))+(((py)*(x354)))+(x356))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst14)*(((((cj3)*(x355)))+(((IkReal(-1.00000000000000))*(px)*(x354)))+(((IkReal(-1.00000000000000))*(x355)))))), ((gconst14)*(((((IkReal(-1.00000000000000))*(cj3)*(x356)))+(((py)*(x354)))+(x356)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x357=IKcos(j0);
IkReal x358=IKsin(j0);
IkReal x359=((px)*(x358));
IkReal x360=((IkReal(1.00000000000000))*(x357));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(x359)+(((IkReal(-1.00000000000000))*(py)*(x360)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x358)))+(((IkReal(-1.00000000000000))*(px)*(x360))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(x359)))+(((IkReal(-0.0900000000000000))*(py)*(x357))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x361=((IkReal(0.0450000000000000))*(sj3));
IkReal x362=((IkReal(0.300000000000000))*(cj3));
IkReal x363=((x361)+(x362));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x363)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x363)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign(((((IkReal(-9.00000000000000))*((py)*(py))))+(((IkReal(-9.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x364=((IkReal(110.000000000000))*(pz));
IkReal x365=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst17)*(((((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x365)))+(((IkReal(-1.00000000000000))*(px)*(x364))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x365)))+(((py)*(x364))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst17)*(((((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x365)))+(((IkReal(-1.00000000000000))*(px)*(x364)))))), ((gconst17)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x365)))+(((py)*(x364)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x366=IKsin(j0);
IkReal x367=IKcos(j0);
IkReal x368=((px)*(x366));
IkReal x369=((py)*(x367));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x369)))+(((IkReal(0.0450000000000000))*(cj3)))+(x368)+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((py)*(x366)))+(((px)*(x367))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x369)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(x368))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x370=((IkReal(0.300000000000000))*(sj3));
IkReal x371=((IkReal(0.0450000000000000))*(px));
IkReal x372=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst16)*(((((IkReal(-1.00000000000000))*(x371)))+(((cj3)*(x371)))+(((IkReal(-1.00000000000000))*(px)*(x370))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((x372)+(((py)*(x370)))+(((IkReal(-1.00000000000000))*(cj3)*(x372))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst16)*(((((IkReal(-1.00000000000000))*(x371)))+(((cj3)*(x371)))+(((IkReal(-1.00000000000000))*(px)*(x370)))))), ((gconst16)*(((x372)+(((py)*(x370)))+(((IkReal(-1.00000000000000))*(cj3)*(x372)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x373=IKsin(j0);
IkReal x374=IKcos(j0);
IkReal x375=((px)*(x373));
IkReal x376=((py)*(x374));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x376)))+(((IkReal(0.0450000000000000))*(cj3)))+(x375)+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((px)*(x374)))+(((py)*(x373))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x376)))+(((IkReal(0.0900000000000000))*(x375))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=pz;
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((IkReal(-0.0900000000000000))*((px)*(px))))+(((IkReal(-0.0900000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x377=((IkReal(0.330000000000000))*(cj3));
IkReal x378=((IkReal(0.0270000000000000))*(cj3));
IkReal x379=((IkReal(0.00405000000000000))*(sj3));
IkReal x380=((IkReal(0.0495000000000000))*(sj3));
if( IKabs(((gconst19)*(((((px)*(x380)))+(((IkReal(-1.00000000000000))*(pp)*(px)))+(((IkReal(-0.0495000000000000))*(py)))+(((px)*(x377)))+(((IkReal(0.392500000000000))*(px)))+(((IkReal(-1.00000000000000))*(py)*(x378)))+(((IkReal(-1.00000000000000))*(py)*(x379))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst19)*(((((IkReal(-1.00000000000000))*(py)*(x380)))+(((IkReal(-0.0495000000000000))*(px)))+(((IkReal(-1.00000000000000))*(py)*(x377)))+(((IkReal(-0.392500000000000))*(py)))+(((pp)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x378)))+(((IkReal(-1.00000000000000))*(px)*(x379))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst19)*(((((px)*(x380)))+(((IkReal(-1.00000000000000))*(pp)*(px)))+(((IkReal(-0.0495000000000000))*(py)))+(((px)*(x377)))+(((IkReal(0.392500000000000))*(px)))+(((IkReal(-1.00000000000000))*(py)*(x378)))+(((IkReal(-1.00000000000000))*(py)*(x379)))))), ((gconst19)*(((((IkReal(-1.00000000000000))*(py)*(x380)))+(((IkReal(-0.0495000000000000))*(px)))+(((IkReal(-1.00000000000000))*(py)*(x377)))+(((IkReal(-0.392500000000000))*(py)))+(((pp)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x378)))+(((IkReal(-1.00000000000000))*(px)*(x379)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x381=IKsin(j0);
IkReal x382=IKcos(j0);
IkReal x383=((px)*(x381));
IkReal x384=((py)*(x382));
IkReal x385=((px)*(x382));
IkReal x386=((py)*(x381));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(x386)+(x385));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(x383)+(((IkReal(-1.00000000000000))*(x384)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x384)))+(((IkReal(1.10000000000000))*(x386)))+(((IkReal(1.10000000000000))*(x385)))+(((IkReal(0.0900000000000000))*(x383)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x387=((IkReal(0.300000000000000))*(py));
IkReal x388=((IkReal(0.0450000000000000))*(px));
IkReal x389=((IkReal(0.0450000000000000))*(py));
IkReal x390=((IkReal(0.300000000000000))*(px));
if( IKabs(((gconst18)*(((((IkReal(-0.550000000000000))*(py)))+(((cj3)*(x388)))+(((IkReal(-1.00000000000000))*(sj3)*(x390)))+(((IkReal(-1.00000000000000))*(x388)))+(((IkReal(-1.00000000000000))*(sj3)*(x389)))+(((IkReal(-1.00000000000000))*(cj3)*(x387))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst18)*(((((IkReal(-0.550000000000000))*(px)))+(x389)+(((IkReal(-1.00000000000000))*(cj3)*(x390)))+(((IkReal(-1.00000000000000))*(sj3)*(x388)))+(((sj3)*(x387)))+(((IkReal(-1.00000000000000))*(cj3)*(x389))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst18)*(((((IkReal(-0.550000000000000))*(py)))+(((cj3)*(x388)))+(((IkReal(-1.00000000000000))*(sj3)*(x390)))+(((IkReal(-1.00000000000000))*(x388)))+(((IkReal(-1.00000000000000))*(sj3)*(x389)))+(((IkReal(-1.00000000000000))*(cj3)*(x387)))))), ((gconst18)*(((((IkReal(-0.550000000000000))*(px)))+(x389)+(((IkReal(-1.00000000000000))*(cj3)*(x390)))+(((IkReal(-1.00000000000000))*(sj3)*(x388)))+(((sj3)*(x387)))+(((IkReal(-1.00000000000000))*(cj3)*(x389)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x391=IKsin(j0);
IkReal x392=IKcos(j0);
IkReal x393=((px)*(x391));
IkReal x394=((py)*(x392));
IkReal x395=((px)*(x392));
IkReal x396=((py)*(x391));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(x395)+(x396));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x394)))+(((IkReal(0.0450000000000000))*(cj3)))+(x393)+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x394)))+(((IkReal(1.10000000000000))*(x396)))+(((IkReal(1.10000000000000))*(x395)))+(((IkReal(0.0900000000000000))*(x393))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-1.00000000000000))*(pz));
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst21;
gconst21=IKsign(((((IkReal(1.10000000000000))*((py)*(py))))+(((IkReal(1.10000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x397=((cj3)*(py));
IkReal x398=((py)*(sj3));
IkReal x399=((IkReal(1.00000000000000))*(pp));
IkReal x400=((cj3)*(px));
IkReal x401=((px)*(sj3));
if( IKabs(((gconst21)*(((((IkReal(0.0495000000000000))*(px)))+(((IkReal(0.0270000000000000))*(x398)))+(((IkReal(0.330000000000000))*(x401)))+(((IkReal(-0.0495000000000000))*(x400)))+(((IkReal(-0.00405000000000000))*(x397)))+(((IkReal(-1.00000000000000))*(py)*(x399)))+(((IkReal(-0.208450000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst21)*(((((IkReal(-0.00405000000000000))*(x400)))+(((IkReal(0.0270000000000000))*(x401)))+(((IkReal(-0.330000000000000))*(x398)))+(((IkReal(-0.0495000000000000))*(py)))+(((IkReal(0.0495000000000000))*(x397)))+(((IkReal(-1.00000000000000))*(px)*(x399)))+(((IkReal(-0.208450000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst21)*(((((IkReal(0.0495000000000000))*(px)))+(((IkReal(0.0270000000000000))*(x398)))+(((IkReal(0.330000000000000))*(x401)))+(((IkReal(-0.0495000000000000))*(x400)))+(((IkReal(-0.00405000000000000))*(x397)))+(((IkReal(-1.00000000000000))*(py)*(x399)))+(((IkReal(-0.208450000000000))*(py)))))), ((gconst21)*(((((IkReal(-0.00405000000000000))*(x400)))+(((IkReal(0.0270000000000000))*(x401)))+(((IkReal(-0.330000000000000))*(x398)))+(((IkReal(-0.0495000000000000))*(py)))+(((IkReal(0.0495000000000000))*(x397)))+(((IkReal(-1.00000000000000))*(px)*(x399)))+(((IkReal(-0.208450000000000))*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x402=IKsin(j0);
IkReal x403=IKcos(j0);
IkReal x404=((px)*(x402));
IkReal x405=((IkReal(1.00000000000000))*(x403));
IkReal x406=((py)*(x402));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(px)*(x405)))+(((IkReal(-1.00000000000000))*(x406))));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(x404)+(((IkReal(-1.00000000000000))*(py)*(x405)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x404)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(x406)))+(((IkReal(-1.10000000000000))*(px)*(x403)))+(((IkReal(-0.0900000000000000))*(py)*(x403))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x407=((IkReal(0.300000000000000))*(py));
IkReal x408=((IkReal(0.0450000000000000))*(px));
IkReal x409=((IkReal(0.0450000000000000))*(py));
IkReal x410=((IkReal(0.300000000000000))*(px));
if( IKabs(((gconst20)*(((((IkReal(-0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj3)*(x408)))+(((IkReal(-1.00000000000000))*(cj3)*(x407)))+(((sj3)*(x410)))+(x408)+(((IkReal(-1.00000000000000))*(sj3)*(x409))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst20)*(((((IkReal(-0.550000000000000))*(px)))+(((IkReal(-1.00000000000000))*(cj3)*(x410)))+(((IkReal(-1.00000000000000))*(sj3)*(x408)))+(((IkReal(-1.00000000000000))*(sj3)*(x407)))+(((cj3)*(x409)))+(((IkReal(-1.00000000000000))*(x409))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst20)*(((((IkReal(-0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj3)*(x408)))+(((IkReal(-1.00000000000000))*(cj3)*(x407)))+(((sj3)*(x410)))+(x408)+(((IkReal(-1.00000000000000))*(sj3)*(x409)))))), ((gconst20)*(((((IkReal(-0.550000000000000))*(px)))+(((IkReal(-1.00000000000000))*(cj3)*(x410)))+(((IkReal(-1.00000000000000))*(sj3)*(x408)))+(((IkReal(-1.00000000000000))*(sj3)*(x407)))+(((cj3)*(x409)))+(((IkReal(-1.00000000000000))*(x409)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x411=IKsin(j0);
IkReal x412=IKcos(j0);
IkReal x413=((px)*(x411));
IkReal x414=((IkReal(1.00000000000000))*(x412));
IkReal x415=((py)*(x411));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(px)*(x414)))+(((IkReal(-0.300000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x415))));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(x413)+(((IkReal(-1.00000000000000))*(py)*(x414)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x413)))+(((IkReal(-1.10000000000000))*(x415)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(px)*(x412)))+(((IkReal(-0.0900000000000000))*(py)*(x412))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x416=((px)*(sj3));
IkReal x417=((IkReal(0.300000000000000))*(cj3));
IkReal x418=((IkReal(0.300000000000000))*(sj1));
IkReal x419=((py)*(sj3));
IkReal x420=((IkReal(1.00000000000000))*(cj1)*(pz));
IkReal x421=((IkReal(0.0450000000000000))*(py)*(sj1));
IkReal x422=((IkReal(0.0450000000000000))*(px)*(sj1));
if( IKabs(((gconst13)*(((((py)*(x417)))+(((x416)*(x418)))+(((IkReal(0.0450000000000000))*(x419)))+(((IkReal(-1.00000000000000))*(cj3)*(x422)))+(x422)+(((IkReal(0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x420))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((IkReal(-1.00000000000000))*(x418)*(x419)))+(((IkReal(-1.00000000000000))*(px)*(x420)))+(((IkReal(0.0450000000000000))*(x416)))+(((IkReal(-1.00000000000000))*(x421)))+(((px)*(x417)))+(((cj3)*(x421)))+(((IkReal(0.550000000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst13)*(((((py)*(x417)))+(((x416)*(x418)))+(((IkReal(0.0450000000000000))*(x419)))+(((IkReal(-1.00000000000000))*(cj3)*(x422)))+(x422)+(((IkReal(0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x420)))))), ((gconst13)*(((((IkReal(-1.00000000000000))*(x418)*(x419)))+(((IkReal(-1.00000000000000))*(px)*(x420)))+(((IkReal(0.0450000000000000))*(x416)))+(((IkReal(-1.00000000000000))*(x421)))+(((px)*(x417)))+(((cj3)*(x421)))+(((IkReal(0.550000000000000))*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x423=IKsin(j0);
IkReal x424=IKcos(j0);
IkReal x425=((IkReal(0.300000000000000))*(cj3));
IkReal x426=((IkReal(0.0450000000000000))*(sj3));
IkReal x427=((IkReal(1.00000000000000))*(py));
IkReal x428=((cj1)*(pz));
IkReal x429=((px)*(x423));
IkReal x430=((px)*(x424));
IkReal x431=((py)*(sj1)*(x423));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x425)))+(((IkReal(-1.00000000000000))*(x426)))+(x428)+(x431)+(((sj1)*(x430))));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(x429)+(((IkReal(-1.00000000000000))*(x424)*(x427)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(x423)*(x427)))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x430))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x430)))+(((IkReal(0.550000000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x423)*(x427)))+(((sj1)*(x425)))+(((sj1)*(x426))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x431)))+(((IkReal(-0.0900000000000000))*(py)*(x424)))+(((IkReal(1.10000000000000))*(x428)))+(((IkReal(0.0900000000000000))*(x429)))+(((IkReal(1.10000000000000))*(sj1)*(x430)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x432=((IkReal(0.0450000000000000))*(cj1));
IkReal x433=((pz)*(sj1));
IkReal x434=((IkReal(0.300000000000000))*(cj1)*(sj3));
if( IKabs(((gconst12)*(((((px)*(x434)))+(((px)*(x432)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x432)))+(((py)*(x433))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((px)*(x433)))+(((cj3)*(py)*(x432)))+(((IkReal(-1.00000000000000))*(py)*(x432)))+(((IkReal(-1.00000000000000))*(py)*(x434))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst12)*(((((px)*(x434)))+(((px)*(x432)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x432)))+(((py)*(x433)))))), ((gconst12)*(((((px)*(x433)))+(((cj3)*(py)*(x432)))+(((IkReal(-1.00000000000000))*(py)*(x432)))+(((IkReal(-1.00000000000000))*(py)*(x434)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x435=IKsin(j0);
IkReal x436=IKcos(j0);
IkReal x437=((IkReal(0.300000000000000))*(cj3));
IkReal x438=((IkReal(0.0450000000000000))*(sj3));
IkReal x439=((IkReal(1.00000000000000))*(py));
IkReal x440=((cj1)*(pz));
IkReal x441=((px)*(x435));
IkReal x442=((px)*(x436));
IkReal x443=((py)*(sj1)*(x435));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x437)))+(((IkReal(-1.00000000000000))*(x438)))+(((sj1)*(x442)))+(x440)+(x443));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x436)*(x439)))+(x441)+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(x435)*(x439)))+(((IkReal(-1.00000000000000))*(cj1)*(x442)))+(((pz)*(sj1))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x435)*(x439)))+(((IkReal(-1.00000000000000))*(x442)))+(((IkReal(0.550000000000000))*(sj1)))+(((sj1)*(x437)))+(((sj1)*(x438))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x443)))+(((IkReal(1.10000000000000))*(x440)))+(((IkReal(1.10000000000000))*(sj1)*(x442)))+(((IkReal(0.0900000000000000))*(x441)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(py)*(x436))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x444=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x444;
evalcond[3]=x444;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst23;
gconst23=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst22;
IkReal x445=((IkReal(1.00000000000000))*(sj2));
gconst22=IKsign(((((IkReal(-1.00000000000000))*(x445)*((py)*(py))))+(((IkReal(-1.00000000000000))*(x445)*((px)*(px))))));
IkReal x446=((IkReal(1.00000000000000))*(sj2));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x446)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x446)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x447=x444;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x447;
evalcond[3]=x447;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst25;
gconst25=IKsign(((((IkReal(-9.00000000000000))*((py)*(py))))+(((IkReal(-9.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x448=((IkReal(110.000000000000))*(pz));
IkReal x449=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst25)*(((((py)*(x448)))+(((IkReal(-21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x449))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst25)*(((((px)*(x448)))+(((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x449))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst25)*(((((py)*(x448)))+(((IkReal(-21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x449)))))), ((gconst25)*(((((px)*(x448)))+(((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x449)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x450=IKcos(j0);
IkReal x451=IKsin(j0);
IkReal x452=((IkReal(1.00000000000000))*(py));
IkReal x453=((px)*(x450));
evalcond[0]=((((IkReal(-1.00000000000000))*(x450)*(x452)))+(((px)*(x451))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x453)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x451)*(x452)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x453)))+(((IkReal(0.0900000000000000))*(py)*(x451)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x454=((IkReal(0.300000000000000))*(sj3));
IkReal x455=((IkReal(0.0450000000000000))*(px));
IkReal x456=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst24)*(((x456)+(((IkReal(-1.00000000000000))*(cj3)*(x456)))+(((py)*(x454))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst24)*(((x455)+(((px)*(x454)))+(((IkReal(-1.00000000000000))*(cj3)*(x455))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst24)*(((x456)+(((IkReal(-1.00000000000000))*(cj3)*(x456)))+(((py)*(x454)))))), ((gconst24)*(((x455)+(((px)*(x454)))+(((IkReal(-1.00000000000000))*(cj3)*(x455)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x457=IKcos(j0);
IkReal x458=IKsin(j0);
IkReal x459=((IkReal(1.00000000000000))*(py));
IkReal x460=((px)*(x457));
evalcond[0]=((((px)*(x458)))+(((IkReal(-1.00000000000000))*(x457)*(x459))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x460)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x458)*(x459))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x460)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(py)*(x458)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x461=x444;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x461;
evalcond[3]=x461;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst26;
gconst26=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst27;
gconst27=IKsign(((((IkReal(9.00000000000000))*((px)*(px))))+(((IkReal(9.00000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x462=((IkReal(110.000000000000))*(pz));
IkReal x463=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst27)*(((((IkReal(-1.00000000000000))*(py)*(x463)))+(((IkReal(-21.2500000000000))*(py)))+(((py)*(x462))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst27)*(((((IkReal(-21.2500000000000))*(px)))+(((px)*(x462)))+(((IkReal(-1.00000000000000))*(px)*(x463))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst27)*(((((IkReal(-1.00000000000000))*(py)*(x463)))+(((IkReal(-21.2500000000000))*(py)))+(((py)*(x462)))))), ((gconst27)*(((((IkReal(-21.2500000000000))*(px)))+(((px)*(x462)))+(((IkReal(-1.00000000000000))*(px)*(x463)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x464=IKsin(j0);
IkReal x465=IKcos(j0);
IkReal x466=((px)*(x465));
IkReal x467=((py)*(x464));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x465)))+(((px)*(x464))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x467)+(x466)+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x466)))+(((IkReal(-0.0900000000000000))*(x467))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x468=((IkReal(0.300000000000000))*(sj3));
IkReal x469=((IkReal(0.0450000000000000))*(px));
IkReal x470=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst26)*(((x470)+(((IkReal(-1.00000000000000))*(cj3)*(x470)))+(((py)*(x468))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst26)*(((x469)+(((px)*(x468)))+(((IkReal(-1.00000000000000))*(cj3)*(x469))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst26)*(((x470)+(((IkReal(-1.00000000000000))*(cj3)*(x470)))+(((py)*(x468)))))), ((gconst26)*(((x469)+(((px)*(x468)))+(((IkReal(-1.00000000000000))*(cj3)*(x469)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x471=IKsin(j0);
IkReal x472=IKcos(j0);
IkReal x473=((px)*(x472));
IkReal x474=((py)*(x471));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x472)))+(((px)*(x471))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x474)+(x473)+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x474)))+(((IkReal(-0.0900000000000000))*(x473)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x475=(sj2)*(sj2);
IkReal x476=((cj2)*(sj2));
IkReal x477=((IkReal(0.300000000000000))*(sj3));
IkReal x478=((IkReal(0.0450000000000000))*(py));
IkReal x479=((IkReal(0.0450000000000000))*(cj3)*(px));
IkReal x480=((px)*(x475));
IkReal x481=((x475)*(x478));
if( IKabs(((gconst22)*(((((cj3)*(x476)*(x478)))+(((IkReal(-1.00000000000000))*(x475)*(x479)))+(((IkReal(-1.00000000000000))*(x476)*(x478)))+(((IkReal(-1.00000000000000))*(py)*(x476)*(x477)))+(((IkReal(0.0450000000000000))*(x480)))+(((x477)*(x480))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst22)*(((((cj3)*(x481)))+(((IkReal(-0.0450000000000000))*(px)*(x476)))+(((IkReal(-1.00000000000000))*(x481)))+(((IkReal(-1.00000000000000))*(px)*(x476)*(x477)))+(((IkReal(-1.00000000000000))*(py)*(x475)*(x477)))+(((x476)*(x479))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst22)*(((((cj3)*(x476)*(x478)))+(((IkReal(-1.00000000000000))*(x475)*(x479)))+(((IkReal(-1.00000000000000))*(x476)*(x478)))+(((IkReal(-1.00000000000000))*(py)*(x476)*(x477)))+(((IkReal(0.0450000000000000))*(x480)))+(((x477)*(x480)))))), ((gconst22)*(((((cj3)*(x481)))+(((IkReal(-0.0450000000000000))*(px)*(x476)))+(((IkReal(-1.00000000000000))*(x481)))+(((IkReal(-1.00000000000000))*(px)*(x476)*(x477)))+(((IkReal(-1.00000000000000))*(py)*(x475)*(x477)))+(((x476)*(x479)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x482=IKcos(j0);
IkReal x483=IKsin(j0);
IkReal x484=((IkReal(0.0450000000000000))*(cj2));
IkReal x485=((IkReal(0.0900000000000000))*(sj2));
IkReal x486=((IkReal(0.300000000000000))*(sj3));
IkReal x487=((IkReal(0.0450000000000000))*(cj3));
IkReal x488=((IkReal(0.0900000000000000))*(cj2));
IkReal x489=((IkReal(1.00000000000000))*(cj2));
IkReal x490=((px)*(x483));
IkReal x491=((px)*(x482));
IkReal x492=((py)*(x482));
IkReal x493=((py)*(x483));
evalcond[0]=((((IkReal(0.0450000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(sj2)*(x487)))+(((IkReal(-1.00000000000000))*(x492)))+(x490)+(((sj2)*(x486))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x489)*(x492)))+(((sj2)*(x493)))+(((sj2)*(x491)))+(((cj2)*(x490))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x487)))+(((IkReal(-1.00000000000000))*(x489)*(x491)))+(((IkReal(-1.00000000000000))*(x489)*(x493)))+(((IkReal(-1.00000000000000))*(sj2)*(x492)))+(x486)+(((sj2)*(x490))));
evalcond[3]=((((cj2)*(x486)))+(((IkReal(-1.00000000000000))*(cj3)*(x484)))+(((IkReal(-1.00000000000000))*(x493)))+(((IkReal(-1.00000000000000))*(x491)))+(x484));
evalcond[4]=((IkReal(-0.212500000000000))+(((x488)*(x491)))+(((x488)*(x493)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x485)*(x490)))+(((x485)*(x492))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x494=((px)*(sj2));
IkReal x495=((IkReal(0.300000000000000))*(sj3));
IkReal x496=((cj2)*(py));
IkReal x497=((cj2)*(px));
IkReal x498=((IkReal(0.0450000000000000))*(cj3));
IkReal x499=((py)*(sj2));
IkReal x500=((cj2)*(x498));
if( IKabs(((gconst23)*(((((IkReal(-1.00000000000000))*(x494)*(x495)))+(((IkReal(-0.0450000000000000))*(x494)))+(((x495)*(x496)))+(((IkReal(-1.00000000000000))*(x496)*(x498)))+(((x494)*(x498)))+(((IkReal(0.0450000000000000))*(x496))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst23)*(((((IkReal(-1.00000000000000))*(x498)*(x499)))+(((x495)*(x497)))+(((x495)*(x499)))+(((IkReal(-1.00000000000000))*(x497)*(x498)))+(((IkReal(0.0450000000000000))*(x499)))+(((IkReal(0.0450000000000000))*(x497))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst23)*(((((IkReal(-1.00000000000000))*(x494)*(x495)))+(((IkReal(-0.0450000000000000))*(x494)))+(((x495)*(x496)))+(((IkReal(-1.00000000000000))*(x496)*(x498)))+(((x494)*(x498)))+(((IkReal(0.0450000000000000))*(x496)))))), ((gconst23)*(((((IkReal(-1.00000000000000))*(x498)*(x499)))+(((x495)*(x497)))+(((x495)*(x499)))+(((IkReal(-1.00000000000000))*(x497)*(x498)))+(((IkReal(0.0450000000000000))*(x499)))+(((IkReal(0.0450000000000000))*(x497)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x501=IKcos(j0);
IkReal x502=IKsin(j0);
IkReal x503=((IkReal(0.0450000000000000))*(cj2));
IkReal x504=((IkReal(0.0900000000000000))*(sj2));
IkReal x505=((IkReal(0.300000000000000))*(sj3));
IkReal x506=((IkReal(0.0450000000000000))*(cj3));
IkReal x507=((IkReal(0.0900000000000000))*(cj2));
IkReal x508=((IkReal(1.00000000000000))*(cj2));
IkReal x509=((px)*(x502));
IkReal x510=((px)*(x501));
IkReal x511=((py)*(x501));
IkReal x512=((py)*(x502));
evalcond[0]=((((sj2)*(x505)))+(((IkReal(-1.00000000000000))*(sj2)*(x506)))+(((IkReal(-1.00000000000000))*(x511)))+(((IkReal(0.0450000000000000))*(sj2)))+(x509));
evalcond[1]=((((cj2)*(x509)))+(((sj2)*(x512)))+(((sj2)*(x510)))+(((IkReal(-1.00000000000000))*(x508)*(x511))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(sj2)*(x511)))+(((sj2)*(x509)))+(((IkReal(-1.00000000000000))*(x506)))+(x505)+(((IkReal(-1.00000000000000))*(x508)*(x510)))+(((IkReal(-1.00000000000000))*(x508)*(x512))));
evalcond[3]=((((cj2)*(x505)))+(((IkReal(-1.00000000000000))*(x510)))+(((IkReal(-1.00000000000000))*(x512)))+(x503)+(((IkReal(-1.00000000000000))*(cj3)*(x503))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x507)*(x510)))+(((x507)*(x512)))+(((x504)*(x511)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x504)*(x509))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x513=((IkReal(0.0450000000000000))*(sj3));
IkReal x514=((IkReal(0.300000000000000))*(cj3));
IkReal x515=((x514)+(x513));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x515))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x515));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst28;
gconst28=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst29;
gconst29=IKsign(((((sj2)*((px)*(px))))+(((sj2)*((py)*(py))))));
dummyeval[0]=((((sj2)*((px)*(px))))+(((sj2)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x516=((IkReal(0.0450000000000000))*(sj3));
IkReal x517=((IkReal(0.300000000000000))*(cj3));
IkReal x518=((x517)+(x516));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x518))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x518));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst30;
gconst30=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst31;
gconst31=IKsign(((((IkReal(9.00000000000000))*((px)*(px))))+(((IkReal(9.00000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x519=((IkReal(110.000000000000))*(pz));
IkReal x520=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst31)*(((((IkReal(-1.00000000000000))*(py)*(x520)))+(((IkReal(-21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x519))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst31)*(((((IkReal(-1.00000000000000))*(px)*(x519)))+(((IkReal(-1.00000000000000))*(px)*(x520)))+(((IkReal(-21.2500000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst31)*(((((IkReal(-1.00000000000000))*(py)*(x520)))+(((IkReal(-21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x519)))))), ((gconst31)*(((((IkReal(-1.00000000000000))*(px)*(x519)))+(((IkReal(-1.00000000000000))*(px)*(x520)))+(((IkReal(-21.2500000000000))*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x521=IKsin(j0);
IkReal x522=IKcos(j0);
IkReal x523=((px)*(x522));
IkReal x524=((py)*(x521));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x522)))+(((px)*(x521))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x523)+(x524)+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x523)))+(((IkReal(-0.0900000000000000))*(x524))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x525=((IkReal(0.300000000000000))*(sj3));
IkReal x526=((IkReal(0.0450000000000000))*(px));
IkReal x527=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst30)*(((((IkReal(-1.00000000000000))*(cj3)*(x527)))+(x527)+(((py)*(x525))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst30)*(((((IkReal(-1.00000000000000))*(cj3)*(x526)))+(((px)*(x525)))+(x526))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst30)*(((((IkReal(-1.00000000000000))*(cj3)*(x527)))+(x527)+(((py)*(x525)))))), ((gconst30)*(((((IkReal(-1.00000000000000))*(cj3)*(x526)))+(((px)*(x525)))+(x526)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x528=IKsin(j0);
IkReal x529=IKcos(j0);
IkReal x530=((px)*(x529));
IkReal x531=((py)*(x528));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x529)))+(((px)*(x528))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x531)+(x530)+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x531)))+(((IkReal(-0.0900000000000000))*(x530))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x532=((IkReal(0.0450000000000000))*(sj3));
IkReal x533=((IkReal(0.300000000000000))*(cj3));
IkReal x534=((x533)+(x532));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x534)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x534));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst32;
gconst32=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst33;
gconst33=IKsign(((((IkReal(-9.00000000000000))*((py)*(py))))+(((IkReal(-9.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x535=((IkReal(110.000000000000))*(pz));
IkReal x536=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst33)*(((((IkReal(-1.00000000000000))*(py)*(x535)))+(((IkReal(-1.00000000000000))*(py)*(x536)))+(((IkReal(-21.2500000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst33)*(((((IkReal(-1.00000000000000))*(px)*(x536)))+(((IkReal(-1.00000000000000))*(px)*(x535)))+(((IkReal(-21.2500000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst33)*(((((IkReal(-1.00000000000000))*(py)*(x535)))+(((IkReal(-1.00000000000000))*(py)*(x536)))+(((IkReal(-21.2500000000000))*(py)))))), ((gconst33)*(((((IkReal(-1.00000000000000))*(px)*(x536)))+(((IkReal(-1.00000000000000))*(px)*(x535)))+(((IkReal(-21.2500000000000))*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x537=IKcos(j0);
IkReal x538=IKsin(j0);
IkReal x539=((IkReal(1.00000000000000))*(py));
IkReal x540=((px)*(x537));
evalcond[0]=((((IkReal(-1.00000000000000))*(x537)*(x539)))+(((px)*(x538))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x540)))+(((IkReal(-1.00000000000000))*(x538)*(x539)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x540)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(x538))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x541=((IkReal(0.300000000000000))*(sj3));
IkReal x542=((IkReal(0.0450000000000000))*(px));
IkReal x543=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst32)*(((((py)*(x541)))+(((IkReal(-1.00000000000000))*(cj3)*(x543)))+(x543))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst32)*(((((IkReal(-1.00000000000000))*(cj3)*(x542)))+(((px)*(x541)))+(x542))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst32)*(((((py)*(x541)))+(((IkReal(-1.00000000000000))*(cj3)*(x543)))+(x543)))), ((gconst32)*(((((IkReal(-1.00000000000000))*(cj3)*(x542)))+(((px)*(x541)))+(x542)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x544=IKcos(j0);
IkReal x545=IKsin(j0);
IkReal x546=((IkReal(1.00000000000000))*(py));
IkReal x547=((px)*(x544));
evalcond[0]=((((IkReal(-1.00000000000000))*(x544)*(x546)))+(((px)*(x545))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x545)*(x546)))+(((IkReal(-1.00000000000000))*(x547)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x547)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(x545))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x548=(sj2)*(sj2);
IkReal x549=((cj2)*(sj2));
IkReal x550=((IkReal(0.300000000000000))*(sj3));
IkReal x551=((IkReal(0.0450000000000000))*(py));
IkReal x552=((IkReal(0.0450000000000000))*(cj3)*(px));
IkReal x553=((px)*(x548));
IkReal x554=((x548)*(x551));
if( IKabs(((gconst29)*(((((x548)*(x552)))+(((IkReal(-0.0450000000000000))*(x553)))+(((IkReal(-1.00000000000000))*(py)*(x549)*(x550)))+(((IkReal(-1.00000000000000))*(x550)*(x553)))+(((cj3)*(x549)*(x551)))+(((IkReal(-1.00000000000000))*(x549)*(x551))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst29)*(((((IkReal(-1.00000000000000))*(cj3)*(x554)))+(((IkReal(-1.00000000000000))*(px)*(x549)*(x550)))+(x554)+(((x549)*(x552)))+(((py)*(x548)*(x550)))+(((IkReal(-0.0450000000000000))*(px)*(x549))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst29)*(((((x548)*(x552)))+(((IkReal(-0.0450000000000000))*(x553)))+(((IkReal(-1.00000000000000))*(py)*(x549)*(x550)))+(((IkReal(-1.00000000000000))*(x550)*(x553)))+(((cj3)*(x549)*(x551)))+(((IkReal(-1.00000000000000))*(x549)*(x551)))))), ((gconst29)*(((((IkReal(-1.00000000000000))*(cj3)*(x554)))+(((IkReal(-1.00000000000000))*(px)*(x549)*(x550)))+(x554)+(((x549)*(x552)))+(((py)*(x548)*(x550)))+(((IkReal(-0.0450000000000000))*(px)*(x549)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x555=IKsin(j0);
IkReal x556=IKcos(j0);
IkReal x557=((IkReal(0.0450000000000000))*(cj2));
IkReal x558=((IkReal(0.0900000000000000))*(sj2));
IkReal x559=((IkReal(0.300000000000000))*(sj3));
IkReal x560=((IkReal(0.0450000000000000))*(cj3));
IkReal x561=((IkReal(1.00000000000000))*(sj2));
IkReal x562=((IkReal(0.0900000000000000))*(cj2));
IkReal x563=((px)*(x555));
IkReal x564=((px)*(x556));
IkReal x565=((py)*(x556));
IkReal x566=((py)*(x555));
evalcond[0]=((((IkReal(0.0450000000000000))*(sj2)))+(((sj2)*(x559)))+(x563)+(((IkReal(-1.00000000000000))*(x565)))+(((IkReal(-1.00000000000000))*(sj2)*(x560))));
evalcond[1]=((((cj2)*(x563)))+(((IkReal(-1.00000000000000))*(cj2)*(x565)))+(((IkReal(-1.00000000000000))*(x561)*(x564)))+(((IkReal(-1.00000000000000))*(x561)*(x566))));
evalcond[2]=((IkReal(0.0450000000000000))+(((cj2)*(x564)))+(((cj2)*(x566)))+(x559)+(((IkReal(-1.00000000000000))*(x561)*(x565)))+(((sj2)*(x563)))+(((IkReal(-1.00000000000000))*(x560))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj2)*(x559)))+(((IkReal(-1.00000000000000))*(x557)))+(((IkReal(-1.00000000000000))*(x564)))+(((IkReal(-1.00000000000000))*(x566)))+(((cj3)*(x557))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x558)*(x565)))+(((IkReal(-1.00000000000000))*(x558)*(x563)))+(((IkReal(-1.00000000000000))*(x562)*(x566)))+(((IkReal(-1.00000000000000))*(x562)*(x564)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x567=((px)*(sj2));
IkReal x568=((IkReal(0.300000000000000))*(sj3));
IkReal x569=((cj2)*(py));
IkReal x570=((cj2)*(px));
IkReal x571=((IkReal(0.0450000000000000))*(cj3));
IkReal x572=((py)*(sj2));
IkReal x573=((py)*(x571));
if( IKabs(((gconst28)*(((((x567)*(x571)))+(((x569)*(x571)))+(((IkReal(-1.00000000000000))*(x568)*(x569)))+(((IkReal(-0.0450000000000000))*(x567)))+(((IkReal(-0.0450000000000000))*(x569)))+(((IkReal(-1.00000000000000))*(x567)*(x568))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst28)*(((((IkReal(0.0450000000000000))*(x572)))+(((IkReal(-0.0450000000000000))*(x570)))+(((IkReal(-1.00000000000000))*(x571)*(x572)))+(((x568)*(x572)))+(((IkReal(-1.00000000000000))*(x568)*(x570)))+(((x570)*(x571))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst28)*(((((x567)*(x571)))+(((x569)*(x571)))+(((IkReal(-1.00000000000000))*(x568)*(x569)))+(((IkReal(-0.0450000000000000))*(x567)))+(((IkReal(-0.0450000000000000))*(x569)))+(((IkReal(-1.00000000000000))*(x567)*(x568)))))), ((gconst28)*(((((IkReal(0.0450000000000000))*(x572)))+(((IkReal(-0.0450000000000000))*(x570)))+(((IkReal(-1.00000000000000))*(x571)*(x572)))+(((x568)*(x572)))+(((IkReal(-1.00000000000000))*(x568)*(x570)))+(((x570)*(x571)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x574=IKsin(j0);
IkReal x575=IKcos(j0);
IkReal x576=((IkReal(0.0450000000000000))*(cj2));
IkReal x577=((IkReal(0.0900000000000000))*(sj2));
IkReal x578=((IkReal(0.300000000000000))*(sj3));
IkReal x579=((IkReal(0.0450000000000000))*(cj3));
IkReal x580=((IkReal(1.00000000000000))*(sj2));
IkReal x581=((IkReal(0.0900000000000000))*(cj2));
IkReal x582=((px)*(x574));
IkReal x583=((px)*(x575));
IkReal x584=((py)*(x575));
IkReal x585=((py)*(x574));
evalcond[0]=((((IkReal(-1.00000000000000))*(x584)))+(((IkReal(-1.00000000000000))*(sj2)*(x579)))+(((IkReal(0.0450000000000000))*(sj2)))+(((sj2)*(x578)))+(x582));
evalcond[1]=((((IkReal(-1.00000000000000))*(x580)*(x583)))+(((IkReal(-1.00000000000000))*(x580)*(x585)))+(((cj2)*(x582)))+(((IkReal(-1.00000000000000))*(cj2)*(x584))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x580)*(x584)))+(((sj2)*(x582)))+(((IkReal(-1.00000000000000))*(x579)))+(x578)+(((cj2)*(x585)))+(((cj2)*(x583))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x585)))+(((IkReal(-1.00000000000000))*(x583)))+(((IkReal(-1.00000000000000))*(cj2)*(x578)))+(((cj3)*(x576)))+(((IkReal(-1.00000000000000))*(x576))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x577)*(x584)))+(((IkReal(-1.00000000000000))*(x577)*(x582)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x581)*(x583)))+(((IkReal(-1.00000000000000))*(x581)*(x585))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x586=(sj1)*(sj1);
IkReal x587=(cj1)*(cj1);
IkReal x588=((px)*(sj2));
IkReal x589=((IkReal(0.550000000000000))*(cj1));
IkReal x590=((IkReal(1.00000000000000))*(pz));
IkReal x591=((cj2)*(py));
IkReal x592=((IkReal(0.300000000000000))*(cj3));
IkReal x593=((py)*(sj2));
IkReal x594=((cj2)*(px));
IkReal x595=((IkReal(0.0450000000000000))*(sj3));
IkReal x596=((cj1)*(pz));
if( IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(x587)*(x588)*(x590)))+(((x588)*(x589)))+(((cj1)*(x588)*(x595)))+(((cj1)*(x588)*(x592)))+(((IkReal(-0.550000000000000))*(x591)))+(((x591)*(x596)))+(((IkReal(-1.00000000000000))*(x591)*(x595)))+(((IkReal(-1.00000000000000))*(x591)*(x592)))+(((IkReal(-1.00000000000000))*(x586)*(x588)*(x590))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((x594)*(x596)))+(((IkReal(-1.00000000000000))*(x589)*(x593)))+(((IkReal(-0.550000000000000))*(x594)))+(((pz)*(x587)*(x593)))+(((pz)*(x586)*(x593)))+(((IkReal(-1.00000000000000))*(x592)*(x594)))+(((IkReal(-1.00000000000000))*(x594)*(x595)))+(((IkReal(-1.00000000000000))*(cj1)*(x592)*(x593)))+(((IkReal(-1.00000000000000))*(cj1)*(x593)*(x595))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst1)*(((((IkReal(-1.00000000000000))*(x587)*(x588)*(x590)))+(((x588)*(x589)))+(((cj1)*(x588)*(x595)))+(((cj1)*(x588)*(x592)))+(((IkReal(-0.550000000000000))*(x591)))+(((x591)*(x596)))+(((IkReal(-1.00000000000000))*(x591)*(x595)))+(((IkReal(-1.00000000000000))*(x591)*(x592)))+(((IkReal(-1.00000000000000))*(x586)*(x588)*(x590)))))), ((gconst1)*(((((x594)*(x596)))+(((IkReal(-1.00000000000000))*(x589)*(x593)))+(((IkReal(-0.550000000000000))*(x594)))+(((pz)*(x587)*(x593)))+(((pz)*(x586)*(x593)))+(((IkReal(-1.00000000000000))*(x592)*(x594)))+(((IkReal(-1.00000000000000))*(x594)*(x595)))+(((IkReal(-1.00000000000000))*(cj1)*(x592)*(x593)))+(((IkReal(-1.00000000000000))*(cj1)*(x593)*(x595)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x597=IKsin(j0);
IkReal x598=IKcos(j0);
IkReal x599=((cj1)*(sj2));
IkReal x600=((IkReal(0.0900000000000000))*(sj2));
IkReal x601=((IkReal(0.300000000000000))*(sj3));
IkReal x602=((IkReal(0.0450000000000000))*(cj3));
IkReal x603=((IkReal(1.10000000000000))*(sj1));
IkReal x604=((IkReal(0.300000000000000))*(cj3));
IkReal x605=((cj1)*(cj2));
IkReal x606=((IkReal(0.0450000000000000))*(sj3));
IkReal x607=((IkReal(1.00000000000000))*(sj2));
IkReal x608=((cj1)*(pz));
IkReal x609=((px)*(x597));
IkReal x610=((px)*(x598));
IkReal x611=((py)*(x598));
IkReal x612=((py)*(x597));
IkReal x613=((cj2)*(pz)*(sj1));
evalcond[0]=((IkReal(-0.550000000000000))+(((sj1)*(x612)))+(((sj1)*(x610)))+(x608)+(((IkReal(-1.00000000000000))*(x606)))+(((IkReal(-1.00000000000000))*(x604))));
evalcond[1]=((((IkReal(0.0450000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(sj2)*(x602)))+(((IkReal(-1.00000000000000))*(x611)))+(x609)+(((sj2)*(x601))));
evalcond[2]=((((cj2)*(x609)))+(((IkReal(-1.00000000000000))*(cj2)*(x611)))+(((x599)*(x612)))+(((x599)*(x610)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x607))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x605)*(x610)))+(((IkReal(-1.00000000000000))*(x605)*(x612)))+(((IkReal(-1.00000000000000))*(x607)*(x611)))+(x601)+(x613)+(((IkReal(-1.00000000000000))*(x602)))+(((sj2)*(x609))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x602)*(x605)))+(((sj1)*(x604)))+(((sj1)*(x606)))+(((x601)*(x605)))+(((IkReal(0.0450000000000000))*(x605)))+(((IkReal(-1.00000000000000))*(x610)))+(((IkReal(-1.00000000000000))*(x612)))+(((IkReal(0.550000000000000))*(sj1))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x613)))+(((x600)*(x611)))+(((IkReal(-1.00000000000000))*(pp)))+(((x603)*(x612)))+(((x603)*(x610)))+(((IkReal(1.10000000000000))*(x608)))+(((IkReal(-1.00000000000000))*(x600)*(x609)))+(((IkReal(0.0900000000000000))*(x605)*(x612)))+(((IkReal(0.0900000000000000))*(x605)*(x610))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x614=((IkReal(0.0450000000000000))*(px));
IkReal x615=((sj1)*(sj2));
IkReal x616=((IkReal(0.300000000000000))*(cj3));
IkReal x617=((IkReal(0.300000000000000))*(sj3));
IkReal x618=((IkReal(1.00000000000000))*(cj1)*(pz));
IkReal x619=((IkReal(0.0450000000000000))*(py)*(x615));
if( IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(x614)*(x615)))+(((IkReal(0.0450000000000000))*(py)*(sj3)))+(((IkReal(-1.00000000000000))*(px)*(x615)*(x617)))+(((cj3)*(x614)*(x615)))+(((py)*(x616)))+(((IkReal(-1.00000000000000))*(py)*(x618)))+(((IkReal(0.550000000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(cj3)*(x619)))+(((py)*(x615)*(x617)))+(((px)*(x616)))+(x619)+(((sj3)*(x614)))+(((IkReal(-1.00000000000000))*(px)*(x618)))+(((IkReal(0.550000000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst0)*(((((IkReal(-1.00000000000000))*(x614)*(x615)))+(((IkReal(0.0450000000000000))*(py)*(sj3)))+(((IkReal(-1.00000000000000))*(px)*(x615)*(x617)))+(((cj3)*(x614)*(x615)))+(((py)*(x616)))+(((IkReal(-1.00000000000000))*(py)*(x618)))+(((IkReal(0.550000000000000))*(py)))))), ((gconst0)*(((((IkReal(-1.00000000000000))*(cj3)*(x619)))+(((py)*(x615)*(x617)))+(((px)*(x616)))+(x619)+(((sj3)*(x614)))+(((IkReal(-1.00000000000000))*(px)*(x618)))+(((IkReal(0.550000000000000))*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x620=IKsin(j0);
IkReal x621=IKcos(j0);
IkReal x622=((cj1)*(sj2));
IkReal x623=((IkReal(0.0900000000000000))*(sj2));
IkReal x624=((IkReal(0.300000000000000))*(sj3));
IkReal x625=((IkReal(0.0450000000000000))*(cj3));
IkReal x626=((IkReal(1.10000000000000))*(sj1));
IkReal x627=((IkReal(0.300000000000000))*(cj3));
IkReal x628=((cj1)*(cj2));
IkReal x629=((IkReal(0.0450000000000000))*(sj3));
IkReal x630=((IkReal(1.00000000000000))*(sj2));
IkReal x631=((cj1)*(pz));
IkReal x632=((px)*(x620));
IkReal x633=((px)*(x621));
IkReal x634=((py)*(x621));
IkReal x635=((py)*(x620));
IkReal x636=((cj2)*(pz)*(sj1));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x627)))+(((IkReal(-1.00000000000000))*(x629)))+(((sj1)*(x633)))+(((sj1)*(x635)))+(x631));
evalcond[1]=((((IkReal(0.0450000000000000))*(sj2)))+(((sj2)*(x624)))+(x632)+(((IkReal(-1.00000000000000))*(x634)))+(((IkReal(-1.00000000000000))*(sj2)*(x625))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj2)*(x634)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x630)))+(((x622)*(x633)))+(((x622)*(x635)))+(((cj2)*(x632))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x630)*(x634)))+(((IkReal(-1.00000000000000))*(x625)))+(((sj2)*(x632)))+(x624)+(x636)+(((IkReal(-1.00000000000000))*(x628)*(x633)))+(((IkReal(-1.00000000000000))*(x628)*(x635))));
evalcond[4]=((((sj1)*(x629)))+(((sj1)*(x627)))+(((IkReal(-1.00000000000000))*(x625)*(x628)))+(((x624)*(x628)))+(((IkReal(0.550000000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x633)))+(((IkReal(-1.00000000000000))*(x635)))+(((IkReal(0.0450000000000000))*(x628))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x623)*(x632)))+(((IkReal(1.10000000000000))*(x631)))+(((IkReal(-0.0900000000000000))*(x636)))+(((IkReal(0.0900000000000000))*(x628)*(x633)))+(((IkReal(0.0900000000000000))*(x628)*(x635)))+(((IkReal(-1.00000000000000))*(pp)))+(((x623)*(x634)))+(((x626)*(x633)))+(((x626)*(x635))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x637=((IkReal(0.0450000000000000))*(sj2));
if( IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x638=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(py)), px)));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(x637)+(((IkReal(-1.00000000000000))*(cj3)*(x637))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(x637)+(((IkReal(-1.00000000000000))*(cj3)*(x637))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x639=IKasin(((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(x637)+(((IkReal(-1.00000000000000))*(cj3)*(x637)))))));
j0array[0]=((((IkReal(-1.00000000000000))*(x638)))+(((IkReal(-1.00000000000000))*(x639))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x638)))+(x639));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x640=(py)*(py);
IkReal x641=(cj2)*(cj2);
IkReal x642=(sj2)*(sj2);
IkReal x643=IKcos(j0);
IkReal x644=IKsin(j0);
IkReal x645=(px)*(px);
IkReal x646=((IkReal(0.0450000000000000))*(sj2));
IkReal x647=((IkReal(1.00000000000000))*(x645));
IkReal x648=((IkReal(0.300000000000000))*(sj2)*(sj3));
IkReal x649=((px)*(py)*(x642));
IkReal x650=((px)*(py)*(x641));
evalcond[0]=((((x644)*(((((IkReal(-1.00000000000000))*(x649)))+(((IkReal(-1.00000000000000))*(x650)))))))+(((cj3)*(py)*(x646)))+(((IkReal(-1.00000000000000))*(py)*(x646)))+(((IkReal(-1.00000000000000))*(py)*(x648)))+(((x643)*(((((x640)*(x642)))+(((x640)*(x641))))))));
evalcond[1]=((((x644)*(((((IkReal(-1.00000000000000))*(x642)*(x647)))+(((IkReal(-1.00000000000000))*(x641)*(x647)))))))+(((cj3)*(px)*(x646)))+(((IkReal(-1.00000000000000))*(px)*(x646)))+(((IkReal(-1.00000000000000))*(px)*(x648)))+(((x643)*(((x649)+(x650))))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst34;
IkReal x651=((py)*(sj0));
IkReal x652=((IkReal(0.300000000000000))*(cj3));
IkReal x653=((cj0)*(px));
IkReal x654=((cj2)*(pz));
IkReal x655=((IkReal(0.0450000000000000))*(sj3));
gconst34=IKsign(((((IkReal(-0.550000000000000))*(x651)))+(((IkReal(-0.550000000000000))*(x653)))+(((IkReal(-1.00000000000000))*(x651)*(x655)))+(((IkReal(-1.00000000000000))*(x651)*(x652)))+(((IkReal(-0.300000000000000))*(sj3)*(x654)))+(((IkReal(-0.0450000000000000))*(x654)))+(((IkReal(-1.00000000000000))*(x653)*(x655)))+(((IkReal(-1.00000000000000))*(x652)*(x653)))+(((IkReal(0.0450000000000000))*(cj3)*(x654)))));
IkReal x656=((py)*(sj0));
IkReal x657=((cj2)*(pz));
IkReal x658=((IkReal(6.66666666666667))*(cj3));
IkReal x659=((cj0)*(px));
IkReal x660=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-12.2222222222222))*(x659)))+(((IkReal(-12.2222222222222))*(x656)))+(((IkReal(-1.00000000000000))*(x659)*(x660)))+(((IkReal(-1.00000000000000))*(x657)))+(((IkReal(-1.00000000000000))*(x656)*(x658)))+(((cj3)*(x657)))+(((IkReal(-1.00000000000000))*(x656)*(x660)))+(((IkReal(-6.66666666666667))*(sj3)*(x657)))+(((IkReal(-1.00000000000000))*(x658)*(x659))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst35;
gconst35=IKsign(((((sj2)*((pz)*(pz))))+(((sj2)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((sj2)*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=((((sj2)*((pz)*(pz))))+(((sj2)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((sj2)*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x661=((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x661;
evalcond[3]=x661;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst36;
IkReal x662=((cj0)*(px));
IkReal x663=((IkReal(0.0450000000000000))*(pz));
IkReal x664=((py)*(sj0));
IkReal x665=((IkReal(0.300000000000000))*(cj3));
IkReal x666=((IkReal(0.0450000000000000))*(sj3));
gconst36=IKsign(((((IkReal(-1.00000000000000))*(x662)*(x666)))+(((IkReal(-1.00000000000000))*(x662)*(x665)))+(((cj3)*(x663)))+(((IkReal(-0.300000000000000))*(pz)*(sj3)))+(((IkReal(-0.550000000000000))*(x662)))+(((IkReal(-0.550000000000000))*(x664)))+(((IkReal(-1.00000000000000))*(x663)))+(((IkReal(-1.00000000000000))*(x664)*(x666)))+(((IkReal(-1.00000000000000))*(x664)*(x665)))));
IkReal x667=((py)*(sj0));
IkReal x668=((IkReal(6.66666666666667))*(cj3));
IkReal x669=((cj0)*(px));
IkReal x670=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-6.66666666666667))*(pz)*(sj3)))+(((IkReal(-12.2222222222222))*(x667)))+(((IkReal(-12.2222222222222))*(x669)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x667)*(x670)))+(((IkReal(-1.00000000000000))*(x668)*(x669)))+(((IkReal(-1.00000000000000))*(x669)*(x670)))+(((IkReal(-1.00000000000000))*(x667)*(x668)))+(((cj3)*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst37;
gconst37=IKsign(((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x671=((py)*(sj0));
IkReal x672=((pz)*(sj3));
IkReal x673=((cj0)*(px));
IkReal x674=((IkReal(0.300000000000000))*(sj3));
IkReal x675=((IkReal(0.0450000000000000))*(cj3));
IkReal x676=((IkReal(0.300000000000000))*(cj3));
IkReal x677=((IkReal(0.0450000000000000))*(sj3));
if( IKabs(((gconst37)*(((((IkReal(0.0450000000000000))*(pz)))+(((IkReal(0.300000000000000))*(x672)))+(((IkReal(-1.00000000000000))*(pz)*(x675)))+(((IkReal(-0.550000000000000))*(x673)))+(((IkReal(-0.550000000000000))*(x671)))+(((IkReal(-1.00000000000000))*(x671)*(x676)))+(((IkReal(-1.00000000000000))*(x671)*(x677)))+(((IkReal(-1.00000000000000))*(x673)*(x676)))+(((IkReal(-1.00000000000000))*(x673)*(x677))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst37)*(((((IkReal(-0.550000000000000))*(pz)))+(((x673)*(x675)))+(((x671)*(x675)))+(((IkReal(-0.0450000000000000))*(x671)))+(((IkReal(-0.0450000000000000))*(x673)))+(((IkReal(-0.0450000000000000))*(x672)))+(((IkReal(-1.00000000000000))*(pz)*(x676)))+(((IkReal(-1.00000000000000))*(x671)*(x674)))+(((IkReal(-1.00000000000000))*(x673)*(x674))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst37)*(((((IkReal(0.0450000000000000))*(pz)))+(((IkReal(0.300000000000000))*(x672)))+(((IkReal(-1.00000000000000))*(pz)*(x675)))+(((IkReal(-0.550000000000000))*(x673)))+(((IkReal(-0.550000000000000))*(x671)))+(((IkReal(-1.00000000000000))*(x671)*(x676)))+(((IkReal(-1.00000000000000))*(x671)*(x677)))+(((IkReal(-1.00000000000000))*(x673)*(x676)))+(((IkReal(-1.00000000000000))*(x673)*(x677)))))), ((gconst37)*(((((IkReal(-0.550000000000000))*(pz)))+(((x673)*(x675)))+(((x671)*(x675)))+(((IkReal(-0.0450000000000000))*(x671)))+(((IkReal(-0.0450000000000000))*(x673)))+(((IkReal(-0.0450000000000000))*(x672)))+(((IkReal(-1.00000000000000))*(pz)*(x676)))+(((IkReal(-1.00000000000000))*(x671)*(x674)))+(((IkReal(-1.00000000000000))*(x673)*(x674)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x678=IKsin(j1);
IkReal x679=IKcos(j1);
IkReal x680=((IkReal(0.300000000000000))*(cj3));
IkReal x681=((IkReal(0.0450000000000000))*(cj3));
IkReal x682=((cj0)*(px));
IkReal x683=((py)*(sj0));
IkReal x684=((IkReal(0.0450000000000000))*(sj3));
IkReal x685=((IkReal(0.300000000000000))*(sj3));
IkReal x686=((IkReal(0.0450000000000000))*(x678));
IkReal x687=((IkReal(1.00000000000000))*(x679));
IkReal x688=((pz)*(x678));
IkReal x689=((pz)*(x679));
IkReal x690=((IkReal(0.0900000000000000))*(x679));
IkReal x691=((IkReal(1.10000000000000))*(x678));
evalcond[0]=((IkReal(-0.550000000000000))+(((x678)*(x683)))+(((x678)*(x682)))+(((IkReal(-1.00000000000000))*(x680)))+(((IkReal(-1.00000000000000))*(x684)))+(x689));
evalcond[1]=((((x678)*(x685)))+(((IkReal(-1.00000000000000))*(x679)*(x684)))+(((IkReal(-1.00000000000000))*(x679)*(x680)))+(((IkReal(-1.00000000000000))*(x678)*(x681)))+(((IkReal(-0.550000000000000))*(x679)))+(pz)+(x686));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x681)))+(x688)+(x685)+(((IkReal(-1.00000000000000))*(x682)*(x687)))+(((IkReal(-1.00000000000000))*(x683)*(x687))));
evalcond[3]=((((x678)*(x680)))+(((x678)*(x684)))+(((IkReal(0.0450000000000000))*(x679)))+(((IkReal(-1.00000000000000))*(x679)*(x681)))+(((IkReal(0.550000000000000))*(x678)))+(((x679)*(x685)))+(((IkReal(-1.00000000000000))*(x683)))+(((IkReal(-1.00000000000000))*(x682))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x682)*(x691)))+(((x682)*(x690)))+(((IkReal(1.10000000000000))*(x689)))+(((IkReal(-0.0900000000000000))*(x688)))+(((IkReal(-1.00000000000000))*(pp)))+(((x683)*(x691)))+(((x683)*(x690))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x692=(cj3)*(cj3);
IkReal x693=(sj3)*(sj3);
IkReal x694=((cj3)*(sj3));
IkReal x695=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst36)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0900000000000000))*(x692)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0270000000000000))*(x694)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x693)))+(((IkReal(-0.330000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst36)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0879750000000000))*(x694)))+(((IkReal(0.0135000000000000))*(x692)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x695)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*(x693)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x695))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst36)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0900000000000000))*(x692)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0270000000000000))*(x694)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x693)))+(((IkReal(-0.330000000000000))*(cj3)))))), ((gconst36)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0879750000000000))*(x694)))+(((IkReal(0.0135000000000000))*(x692)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x695)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*(x693)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x695)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x696=IKsin(j1);
IkReal x697=IKcos(j1);
IkReal x698=((IkReal(0.300000000000000))*(cj3));
IkReal x699=((IkReal(0.0450000000000000))*(cj3));
IkReal x700=((cj0)*(px));
IkReal x701=((py)*(sj0));
IkReal x702=((IkReal(0.0450000000000000))*(sj3));
IkReal x703=((IkReal(0.300000000000000))*(sj3));
IkReal x704=((IkReal(0.0450000000000000))*(x696));
IkReal x705=((IkReal(1.00000000000000))*(x697));
IkReal x706=((pz)*(x696));
IkReal x707=((pz)*(x697));
IkReal x708=((IkReal(0.0900000000000000))*(x697));
IkReal x709=((IkReal(1.10000000000000))*(x696));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x702)))+(((x696)*(x701)))+(((x696)*(x700)))+(((IkReal(-1.00000000000000))*(x698)))+(x707));
evalcond[1]=((((IkReal(-1.00000000000000))*(x696)*(x699)))+(((IkReal(-1.00000000000000))*(x697)*(x698)))+(pz)+(((x696)*(x703)))+(x704)+(((IkReal(-1.00000000000000))*(x697)*(x702)))+(((IkReal(-0.550000000000000))*(x697))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x699)))+(x703)+(x706)+(((IkReal(-1.00000000000000))*(x701)*(x705)))+(((IkReal(-1.00000000000000))*(x700)*(x705))));
evalcond[3]=((((IkReal(0.550000000000000))*(x696)))+(((x696)*(x698)))+(((IkReal(-1.00000000000000))*(x697)*(x699)))+(((IkReal(-1.00000000000000))*(x700)))+(((IkReal(-1.00000000000000))*(x701)))+(((IkReal(0.0450000000000000))*(x697)))+(((x697)*(x703)))+(((x696)*(x702))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x701)*(x708)))+(((x701)*(x709)))+(((IkReal(1.10000000000000))*(x707)))+(((x700)*(x708)))+(((x700)*(x709)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x706))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x710=((px)*(sj0));
IkReal x711=((cj0)*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x711)))+(x710));
evalcond[3]=((((IkReal(-1.00000000000000))*(x710)))+(x711));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst38;
IkReal x712=((cj0)*(px));
IkReal x713=((IkReal(0.0450000000000000))*(pz));
IkReal x714=((py)*(sj0));
IkReal x715=((IkReal(0.300000000000000))*(cj3));
IkReal x716=((IkReal(0.0450000000000000))*(sj3));
gconst38=IKsign(((((IkReal(-1.00000000000000))*(x714)*(x715)))+(((IkReal(-1.00000000000000))*(x714)*(x716)))+(((IkReal(-1.00000000000000))*(cj3)*(x713)))+(((IkReal(-0.550000000000000))*(x712)))+(((IkReal(-0.550000000000000))*(x714)))+(((IkReal(0.300000000000000))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x712)*(x716)))+(((IkReal(-1.00000000000000))*(x712)*(x715)))+(x713)));
IkReal x717=((py)*(sj0));
IkReal x718=((IkReal(6.66666666666667))*(cj3));
IkReal x719=((cj0)*(px));
IkReal x720=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj3)*(pz)))+(((IkReal(-1.00000000000000))*(x717)*(x720)))+(((IkReal(6.66666666666667))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x717)*(x718)))+(pz)+(((IkReal(-1.00000000000000))*(x718)*(x719)))+(((IkReal(-1.00000000000000))*(x719)*(x720)))+(((IkReal(-12.2222222222222))*(x717)))+(((IkReal(-12.2222222222222))*(x719))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst39;
gconst39=IKsign((((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)))));
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x721=((py)*(sj0));
IkReal x722=((cj0)*(px));
IkReal x723=((IkReal(0.300000000000000))*(sj3));
IkReal x724=((IkReal(0.0450000000000000))*(cj3));
IkReal x725=((IkReal(0.0450000000000000))*(pz));
IkReal x726=((IkReal(0.300000000000000))*(cj3));
IkReal x727=((IkReal(0.0450000000000000))*(sj3));
if( IKabs(((gconst39)*(((((x721)*(x727)))+(((x721)*(x726)))+(((x722)*(x727)))+(((x722)*(x726)))+(((IkReal(0.550000000000000))*(x722)))+(((IkReal(0.550000000000000))*(x721)))+(x725)+(((pz)*(x723)))+(((IkReal(-1.00000000000000))*(pz)*(x724))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((x721)*(x724)))+(((IkReal(-0.0450000000000000))*(x721)))+(((IkReal(-0.0450000000000000))*(x722)))+(((IkReal(-1.00000000000000))*(x722)*(x723)))+(((sj3)*(x725)))+(((x722)*(x724)))+(((IkReal(-1.00000000000000))*(x721)*(x723)))+(((pz)*(x726)))+(((IkReal(0.550000000000000))*(pz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst39)*(((((x721)*(x727)))+(((x721)*(x726)))+(((x722)*(x727)))+(((x722)*(x726)))+(((IkReal(0.550000000000000))*(x722)))+(((IkReal(0.550000000000000))*(x721)))+(x725)+(((pz)*(x723)))+(((IkReal(-1.00000000000000))*(pz)*(x724)))))), ((gconst39)*(((((x721)*(x724)))+(((IkReal(-0.0450000000000000))*(x721)))+(((IkReal(-0.0450000000000000))*(x722)))+(((IkReal(-1.00000000000000))*(x722)*(x723)))+(((sj3)*(x725)))+(((x722)*(x724)))+(((IkReal(-1.00000000000000))*(x721)*(x723)))+(((pz)*(x726)))+(((IkReal(0.550000000000000))*(pz)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x728=IKsin(j1);
IkReal x729=IKcos(j1);
IkReal x730=((IkReal(0.300000000000000))*(cj3));
IkReal x731=((IkReal(0.0450000000000000))*(cj3));
IkReal x732=((cj0)*(px));
IkReal x733=((py)*(sj0));
IkReal x734=((IkReal(0.0450000000000000))*(sj3));
IkReal x735=((IkReal(0.300000000000000))*(sj3));
IkReal x736=((IkReal(0.0450000000000000))*(x728));
IkReal x737=((pz)*(x728));
IkReal x738=((pz)*(x729));
IkReal x739=((IkReal(0.0900000000000000))*(x729));
IkReal x740=((IkReal(1.10000000000000))*(x728));
evalcond[0]=((IkReal(-0.550000000000000))+(((x728)*(x733)))+(((x728)*(x732)))+(((IkReal(-1.00000000000000))*(x734)))+(((IkReal(-1.00000000000000))*(x730)))+(x738));
evalcond[1]=((((x728)*(x731)))+(((IkReal(-1.00000000000000))*(x736)))+(pz)+(((IkReal(-0.550000000000000))*(x729)))+(((IkReal(-1.00000000000000))*(x728)*(x735)))+(((IkReal(-1.00000000000000))*(x729)*(x730)))+(((IkReal(-1.00000000000000))*(x729)*(x734))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x729)*(x733)))+(((x729)*(x732)))+(((IkReal(-1.00000000000000))*(x737)))+(((IkReal(-1.00000000000000))*(x731)))+(x735));
evalcond[3]=((((x728)*(x734)))+(((x728)*(x730)))+(((IkReal(-0.0450000000000000))*(x729)))+(((x729)*(x731)))+(((IkReal(-1.00000000000000))*(x733)))+(((IkReal(-1.00000000000000))*(x732)))+(((IkReal(0.550000000000000))*(x728)))+(((IkReal(-1.00000000000000))*(x729)*(x735))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x738)))+(((IkReal(-1.00000000000000))*(x732)*(x739)))+(((IkReal(0.0900000000000000))*(x737)))+(((IkReal(-1.00000000000000))*(x733)*(x739)))+(((IkReal(-1.00000000000000))*(pp)))+(((x732)*(x740)))+(((x733)*(x740))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x741=(sj3)*(sj3);
IkReal x742=(cj3)*(cj3);
IkReal x743=((cj3)*(sj3));
IkReal x744=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst38)*(((IkReal(-0.302500000000000))+(((IkReal(-0.00202500000000000))*(x741)))+(((IkReal(-0.0495000000000000))*(sj3)))+((pz)*(pz))+(((IkReal(-0.0900000000000000))*(x742)))+(((IkReal(-0.0270000000000000))*(x743)))+(((IkReal(-0.330000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0879750000000000))*(x743)))+(((IkReal(-0.0135000000000000))*(x742)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*(x741)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x744)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x744))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst38)*(((IkReal(-0.302500000000000))+(((IkReal(-0.00202500000000000))*(x741)))+(((IkReal(-0.0495000000000000))*(sj3)))+((pz)*(pz))+(((IkReal(-0.0900000000000000))*(x742)))+(((IkReal(-0.0270000000000000))*(x743)))+(((IkReal(-0.330000000000000))*(cj3)))))), ((gconst38)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0879750000000000))*(x743)))+(((IkReal(-0.0135000000000000))*(x742)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*(x741)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x744)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x744)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x745=IKsin(j1);
IkReal x746=IKcos(j1);
IkReal x747=((IkReal(0.300000000000000))*(cj3));
IkReal x748=((IkReal(0.0450000000000000))*(cj3));
IkReal x749=((cj0)*(px));
IkReal x750=((py)*(sj0));
IkReal x751=((IkReal(0.0450000000000000))*(sj3));
IkReal x752=((IkReal(0.300000000000000))*(sj3));
IkReal x753=((IkReal(0.0450000000000000))*(x745));
IkReal x754=((pz)*(x745));
IkReal x755=((pz)*(x746));
IkReal x756=((IkReal(0.0900000000000000))*(x746));
IkReal x757=((IkReal(1.10000000000000))*(x745));
evalcond[0]=((IkReal(-0.550000000000000))+(((x745)*(x750)))+(((x745)*(x749)))+(x755)+(((IkReal(-1.00000000000000))*(x747)))+(((IkReal(-1.00000000000000))*(x751))));
evalcond[1]=((((x745)*(x748)))+(((IkReal(-1.00000000000000))*(x745)*(x752)))+(((IkReal(-1.00000000000000))*(x746)*(x747)))+(((IkReal(-1.00000000000000))*(x746)*(x751)))+(pz)+(((IkReal(-0.550000000000000))*(x746)))+(((IkReal(-1.00000000000000))*(x753))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x746)*(x749)))+(((x746)*(x750)))+(((IkReal(-1.00000000000000))*(x754)))+(x752)+(((IkReal(-1.00000000000000))*(x748))));
evalcond[3]=((((x745)*(x751)))+(((x745)*(x747)))+(((x746)*(x748)))+(((IkReal(-1.00000000000000))*(x746)*(x752)))+(((IkReal(-1.00000000000000))*(x750)))+(((IkReal(0.550000000000000))*(x745)))+(((IkReal(-0.0450000000000000))*(x746)))+(((IkReal(-1.00000000000000))*(x749))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x750)*(x756)))+(((IkReal(0.0900000000000000))*(x754)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x749)*(x756)))+(((x749)*(x757)))+(((x750)*(x757)))+(((IkReal(1.10000000000000))*(x755))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x758=((IkReal(0.0450000000000000))*(sj3));
IkReal x759=((cj2)*(px));
IkReal x760=((cj0)*(px));
IkReal x761=((pz)*(sj2));
IkReal x762=((py)*(sj0)*(sj2));
IkReal x763=((IkReal(0.300000000000000))*(cj3)*(sj2));
IkReal x764=((IkReal(1.00000000000000))*(cj0)*(cj2));
if( IKabs(((gconst35)*(((((IkReal(0.550000000000000))*(sj2)*(x760)))+(((x760)*(x763)))+(((sj2)*(x758)*(x760)))+(((IkReal(0.300000000000000))*(cj3)*(x762)))+(((x758)*(x762)))+(((IkReal(-1.00000000000000))*(py)*(pz)*(x764)))+(((pz)*(sj0)*(x759)))+(((IkReal(0.550000000000000))*(x762))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst35)*(((((IkReal(0.300000000000000))*(cj3)*(x761)))+(((x758)*(x761)))+(((IkReal(-1.00000000000000))*(py)*(x759)*((sj0)*(sj0))))+(((py)*(x759)*((cj0)*(cj0))))+(((IkReal(-1.00000000000000))*(sj0)*(x759)*(x760)))+(((cj0)*(cj2)*(sj0)*((py)*(py))))+(((IkReal(0.550000000000000))*(x761))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst35)*(((((IkReal(0.550000000000000))*(sj2)*(x760)))+(((x760)*(x763)))+(((sj2)*(x758)*(x760)))+(((IkReal(0.300000000000000))*(cj3)*(x762)))+(((x758)*(x762)))+(((IkReal(-1.00000000000000))*(py)*(pz)*(x764)))+(((pz)*(sj0)*(x759)))+(((IkReal(0.550000000000000))*(x762)))))), ((gconst35)*(((((IkReal(0.300000000000000))*(cj3)*(x761)))+(((x758)*(x761)))+(((IkReal(-1.00000000000000))*(py)*(x759)*((sj0)*(sj0))))+(((py)*(x759)*((cj0)*(cj0))))+(((IkReal(-1.00000000000000))*(sj0)*(x759)*(x760)))+(((cj0)*(cj2)*(sj0)*((py)*(py))))+(((IkReal(0.550000000000000))*(x761)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x765=IKsin(j1);
IkReal x766=IKcos(j1);
IkReal x767=((px)*(sj2));
IkReal x768=((IkReal(0.300000000000000))*(sj3));
IkReal x769=((IkReal(0.0900000000000000))*(sj0));
IkReal x770=((cj2)*(px));
IkReal x771=((IkReal(0.0450000000000000))*(cj3));
IkReal x772=((IkReal(0.0450000000000000))*(cj2));
IkReal x773=((py)*(sj0));
IkReal x774=((IkReal(0.0450000000000000))*(sj3));
IkReal x775=((IkReal(1.00000000000000))*(cj0));
IkReal x776=((IkReal(0.300000000000000))*(cj3));
IkReal x777=((py)*(sj2));
IkReal x778=((cj0)*(x766));
IkReal x779=((cj3)*(x765));
IkReal x780=((cj2)*(x766));
IkReal x781=((cj2)*(x765));
IkReal x782=((pz)*(x766));
IkReal x783=((cj0)*(px)*(x765));
evalcond[0]=((IkReal(-0.550000000000000))+(((x765)*(x773)))+(x782)+(x783)+(((IkReal(-1.00000000000000))*(x774)))+(((IkReal(-1.00000000000000))*(x776))));
evalcond[1]=((((x767)*(x778)))+(((sj0)*(x770)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x775)))+(((sj2)*(x766)*(x773)))+(((IkReal(-1.00000000000000))*(pz)*(sj2)*(x765))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x771)*(x781)))+(((x768)*(x781)))+(((IkReal(-1.00000000000000))*(x766)*(x774)))+(((IkReal(-1.00000000000000))*(x766)*(x776)))+(pz)+(((x765)*(x772)))+(((IkReal(-0.550000000000000))*(x766))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x766)*(x770)*(x775)))+(((sj0)*(x767)))+(((pz)*(x781)))+(((IkReal(-1.00000000000000))*(x773)*(x780)))+(((IkReal(-1.00000000000000))*(x775)*(x777)))+(x768)+(((IkReal(-1.00000000000000))*(x771))));
evalcond[4]=((((IkReal(-1.00000000000000))*(px)*(x775)))+(((IkReal(-1.00000000000000))*(x771)*(x780)))+(((x768)*(x780)))+(((x766)*(x772)))+(((x765)*(x776)))+(((x765)*(x774)))+(((IkReal(-1.00000000000000))*(x773)))+(((IkReal(0.550000000000000))*(x765))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x770)*(x778)))+(((IkReal(-0.0900000000000000))*(pz)*(x781)))+(((IkReal(1.10000000000000))*(x782)))+(((IkReal(1.10000000000000))*(x783)))+(((py)*(x769)*(x780)))+(((IkReal(-1.00000000000000))*(x767)*(x769)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x765)*(x773)))+(((IkReal(0.0900000000000000))*(cj0)*(x777))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x784=(cj3)*(cj3);
IkReal x785=(sj3)*(sj3);
IkReal x786=((cj2)*(sj3));
IkReal x787=((IkReal(0.0135000000000000))*(cj2));
IkReal x788=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst34)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0270000000000000))*(cj3)*(sj3)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x785)))+(((IkReal(-0.0900000000000000))*(x784)))+(((IkReal(-0.330000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((IkReal(-0.167025000000000))*(x786)))+(((IkReal(-0.0247500000000000))*(cj2)))+(((x784)*(x787)))+(((IkReal(-0.0879750000000000))*(cj3)*(x786)))+(((IkReal(-1.00000000000000))*(x785)*(x787)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x788)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x788)))+(((IkReal(0.0112500000000000))*(cj2)*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst34)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0270000000000000))*(cj3)*(sj3)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x785)))+(((IkReal(-0.0900000000000000))*(x784)))+(((IkReal(-0.330000000000000))*(cj3)))))), ((gconst34)*(((((IkReal(-0.167025000000000))*(x786)))+(((IkReal(-0.0247500000000000))*(cj2)))+(((x784)*(x787)))+(((IkReal(-0.0879750000000000))*(cj3)*(x786)))+(((IkReal(-1.00000000000000))*(x785)*(x787)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x788)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x788)))+(((IkReal(0.0112500000000000))*(cj2)*(cj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x789=IKsin(j1);
IkReal x790=IKcos(j1);
IkReal x791=((px)*(sj2));
IkReal x792=((IkReal(0.300000000000000))*(sj3));
IkReal x793=((IkReal(0.0900000000000000))*(sj0));
IkReal x794=((cj2)*(px));
IkReal x795=((IkReal(0.0450000000000000))*(cj3));
IkReal x796=((IkReal(0.0450000000000000))*(cj2));
IkReal x797=((py)*(sj0));
IkReal x798=((IkReal(0.0450000000000000))*(sj3));
IkReal x799=((IkReal(1.00000000000000))*(cj0));
IkReal x800=((IkReal(0.300000000000000))*(cj3));
IkReal x801=((py)*(sj2));
IkReal x802=((cj0)*(x790));
IkReal x803=((cj3)*(x789));
IkReal x804=((cj2)*(x790));
IkReal x805=((cj2)*(x789));
IkReal x806=((pz)*(x790));
IkReal x807=((cj0)*(px)*(x789));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x798)))+(x807)+(x806)+(((IkReal(-1.00000000000000))*(x800)))+(((x789)*(x797))));
evalcond[1]=((((sj2)*(x790)*(x797)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x799)))+(((sj0)*(x794)))+(((x791)*(x802)))+(((IkReal(-1.00000000000000))*(pz)*(sj2)*(x789))));
evalcond[2]=((((IkReal(-0.550000000000000))*(x790)))+(((IkReal(-1.00000000000000))*(x790)*(x800)))+(((IkReal(-1.00000000000000))*(x790)*(x798)))+(((IkReal(-1.00000000000000))*(x795)*(x805)))+(pz)+(((x792)*(x805)))+(((x789)*(x796))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x790)*(x794)*(x799)))+(((IkReal(-1.00000000000000))*(x795)))+(((IkReal(-1.00000000000000))*(x799)*(x801)))+(((sj0)*(x791)))+(((IkReal(-1.00000000000000))*(x797)*(x804)))+(x792)+(((pz)*(x805))));
evalcond[4]=((((IkReal(0.550000000000000))*(x789)))+(((x790)*(x796)))+(((IkReal(-1.00000000000000))*(px)*(x799)))+(((x789)*(x800)))+(((IkReal(-1.00000000000000))*(x795)*(x804)))+(((x792)*(x804)))+(((IkReal(-1.00000000000000))*(x797)))+(((x789)*(x798))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x794)*(x802)))+(((IkReal(-0.0900000000000000))*(pz)*(x805)))+(((IkReal(1.10000000000000))*(x789)*(x797)))+(((IkReal(-1.00000000000000))*(x791)*(x793)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x807)))+(((IkReal(1.10000000000000))*(x806)))+(((py)*(x793)*(x804)))+(((IkReal(0.0900000000000000))*(cj0)*(x801))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x808=((IkReal(0.0450000000000000))*(sj2));
if( IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x809=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(py)), px)));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x808)))+(x808))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x808)))+(x808))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x810=IKasin(((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x808)))+(x808)))));
j0array[0]=((((IkReal(-1.00000000000000))*(x810)))+(((IkReal(-1.00000000000000))*(x809))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(x810)+(((IkReal(-1.00000000000000))*(x809))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal dummyeval[1];
IkReal gconst34;
IkReal x811=((py)*(sj0));
IkReal x812=((IkReal(0.300000000000000))*(cj3));
IkReal x813=((cj0)*(px));
IkReal x814=((cj2)*(pz));
IkReal x815=((IkReal(0.0450000000000000))*(sj3));
gconst34=IKsign(((((IkReal(-1.00000000000000))*(x812)*(x813)))+(((IkReal(-0.300000000000000))*(sj3)*(x814)))+(((IkReal(-0.0450000000000000))*(x814)))+(((IkReal(-1.00000000000000))*(x811)*(x815)))+(((IkReal(-1.00000000000000))*(x811)*(x812)))+(((IkReal(0.0450000000000000))*(cj3)*(x814)))+(((IkReal(-1.00000000000000))*(x813)*(x815)))+(((IkReal(-0.550000000000000))*(x813)))+(((IkReal(-0.550000000000000))*(x811)))));
IkReal x816=((py)*(sj0));
IkReal x817=((cj2)*(pz));
IkReal x818=((IkReal(6.66666666666667))*(cj3));
IkReal x819=((cj0)*(px));
IkReal x820=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x816)*(x820)))+(((cj3)*(x817)))+(((IkReal(-1.00000000000000))*(x818)*(x819)))+(((IkReal(-1.00000000000000))*(x816)*(x818)))+(((IkReal(-1.00000000000000))*(x819)*(x820)))+(((IkReal(-12.2222222222222))*(x816)))+(((IkReal(-12.2222222222222))*(x819)))+(((IkReal(-6.66666666666667))*(sj3)*(x817)))+(((IkReal(-1.00000000000000))*(x817))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst35;
gconst35=IKsign(((((sj2)*((pz)*(pz))))+(((sj2)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((sj2)*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=((((sj2)*((pz)*(pz))))+(((sj2)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((sj2)*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x821=((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x821;
evalcond[3]=x821;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst36;
IkReal x822=((cj0)*(px));
IkReal x823=((IkReal(0.0450000000000000))*(pz));
IkReal x824=((py)*(sj0));
IkReal x825=((IkReal(0.300000000000000))*(cj3));
IkReal x826=((IkReal(0.0450000000000000))*(sj3));
gconst36=IKsign(((((IkReal(-1.00000000000000))*(x822)*(x826)))+(((IkReal(-1.00000000000000))*(x822)*(x825)))+(((IkReal(-0.300000000000000))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x823)))+(((IkReal(-1.00000000000000))*(x824)*(x825)))+(((IkReal(-1.00000000000000))*(x824)*(x826)))+(((IkReal(-0.550000000000000))*(x822)))+(((IkReal(-0.550000000000000))*(x824)))+(((cj3)*(x823)))));
IkReal x827=((py)*(sj0));
IkReal x828=((IkReal(6.66666666666667))*(cj3));
IkReal x829=((cj0)*(px));
IkReal x830=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x827)*(x830)))+(((IkReal(-1.00000000000000))*(x828)*(x829)))+(((IkReal(-6.66666666666667))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x827)*(x828)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-12.2222222222222))*(x827)))+(((IkReal(-12.2222222222222))*(x829)))+(((cj3)*(pz)))+(((IkReal(-1.00000000000000))*(x829)*(x830))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst37;
gconst37=IKsign(((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x831=((py)*(sj0));
IkReal x832=((pz)*(sj3));
IkReal x833=((cj0)*(px));
IkReal x834=((IkReal(0.300000000000000))*(sj3));
IkReal x835=((IkReal(0.0450000000000000))*(cj3));
IkReal x836=((IkReal(0.300000000000000))*(cj3));
IkReal x837=((IkReal(0.0450000000000000))*(sj3));
if( IKabs(((gconst37)*(((((IkReal(-1.00000000000000))*(pz)*(x835)))+(((IkReal(0.0450000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x833)*(x837)))+(((IkReal(-1.00000000000000))*(x833)*(x836)))+(((IkReal(0.300000000000000))*(x832)))+(((IkReal(-0.550000000000000))*(x831)))+(((IkReal(-0.550000000000000))*(x833)))+(((IkReal(-1.00000000000000))*(x831)*(x837)))+(((IkReal(-1.00000000000000))*(x831)*(x836))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst37)*(((((IkReal(-0.550000000000000))*(pz)))+(((x831)*(x835)))+(((IkReal(-1.00000000000000))*(pz)*(x836)))+(((IkReal(-1.00000000000000))*(x833)*(x834)))+(((x833)*(x835)))+(((IkReal(-0.0450000000000000))*(x833)))+(((IkReal(-0.0450000000000000))*(x831)))+(((IkReal(-0.0450000000000000))*(x832)))+(((IkReal(-1.00000000000000))*(x831)*(x834))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst37)*(((((IkReal(-1.00000000000000))*(pz)*(x835)))+(((IkReal(0.0450000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x833)*(x837)))+(((IkReal(-1.00000000000000))*(x833)*(x836)))+(((IkReal(0.300000000000000))*(x832)))+(((IkReal(-0.550000000000000))*(x831)))+(((IkReal(-0.550000000000000))*(x833)))+(((IkReal(-1.00000000000000))*(x831)*(x837)))+(((IkReal(-1.00000000000000))*(x831)*(x836)))))), ((gconst37)*(((((IkReal(-0.550000000000000))*(pz)))+(((x831)*(x835)))+(((IkReal(-1.00000000000000))*(pz)*(x836)))+(((IkReal(-1.00000000000000))*(x833)*(x834)))+(((x833)*(x835)))+(((IkReal(-0.0450000000000000))*(x833)))+(((IkReal(-0.0450000000000000))*(x831)))+(((IkReal(-0.0450000000000000))*(x832)))+(((IkReal(-1.00000000000000))*(x831)*(x834)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x838=IKsin(j1);
IkReal x839=IKcos(j1);
IkReal x840=((IkReal(0.300000000000000))*(cj3));
IkReal x841=((IkReal(0.0450000000000000))*(cj3));
IkReal x842=((cj0)*(px));
IkReal x843=((py)*(sj0));
IkReal x844=((IkReal(0.0450000000000000))*(sj3));
IkReal x845=((IkReal(0.300000000000000))*(sj3));
IkReal x846=((IkReal(0.0450000000000000))*(x838));
IkReal x847=((IkReal(1.00000000000000))*(x839));
IkReal x848=((pz)*(x838));
IkReal x849=((pz)*(x839));
IkReal x850=((IkReal(0.0900000000000000))*(x839));
IkReal x851=((IkReal(1.10000000000000))*(x838));
evalcond[0]=((IkReal(-0.550000000000000))+(((x838)*(x843)))+(((x838)*(x842)))+(((IkReal(-1.00000000000000))*(x844)))+(((IkReal(-1.00000000000000))*(x840)))+(x849));
evalcond[1]=((((x838)*(x845)))+(pz)+(((IkReal(-1.00000000000000))*(x839)*(x840)))+(((IkReal(-1.00000000000000))*(x839)*(x844)))+(((IkReal(-1.00000000000000))*(x838)*(x841)))+(x846)+(((IkReal(-0.550000000000000))*(x839))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x842)*(x847)))+(((IkReal(-1.00000000000000))*(x843)*(x847)))+(((IkReal(-1.00000000000000))*(x841)))+(x845)+(x848));
evalcond[3]=((((x838)*(x840)))+(((x838)*(x844)))+(((x839)*(x845)))+(((IkReal(0.0450000000000000))*(x839)))+(((IkReal(0.550000000000000))*(x838)))+(((IkReal(-1.00000000000000))*(x842)))+(((IkReal(-1.00000000000000))*(x843)))+(((IkReal(-1.00000000000000))*(x839)*(x841))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x842)*(x850)))+(((x842)*(x851)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x848)))+(((IkReal(1.10000000000000))*(x849)))+(((x843)*(x850)))+(((x843)*(x851))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x852=(cj3)*(cj3);
IkReal x853=(sj3)*(sj3);
IkReal x854=((cj3)*(sj3));
IkReal x855=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst36)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0900000000000000))*(x852)))+(((IkReal(-0.0270000000000000))*(x854)))+(((IkReal(-0.0495000000000000))*(sj3)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x853)))+(((IkReal(-0.330000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst36)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0879750000000000))*(x854)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x855)))+(((IkReal(0.0135000000000000))*(x852)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*(x853)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x855))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst36)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0900000000000000))*(x852)))+(((IkReal(-0.0270000000000000))*(x854)))+(((IkReal(-0.0495000000000000))*(sj3)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x853)))+(((IkReal(-0.330000000000000))*(cj3)))))), ((gconst36)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0879750000000000))*(x854)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x855)))+(((IkReal(0.0135000000000000))*(x852)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*(x853)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x855)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x856=IKsin(j1);
IkReal x857=IKcos(j1);
IkReal x858=((IkReal(0.300000000000000))*(cj3));
IkReal x859=((IkReal(0.0450000000000000))*(cj3));
IkReal x860=((cj0)*(px));
IkReal x861=((py)*(sj0));
IkReal x862=((IkReal(0.0450000000000000))*(sj3));
IkReal x863=((IkReal(0.300000000000000))*(sj3));
IkReal x864=((IkReal(0.0450000000000000))*(x856));
IkReal x865=((IkReal(1.00000000000000))*(x857));
IkReal x866=((pz)*(x856));
IkReal x867=((pz)*(x857));
IkReal x868=((IkReal(0.0900000000000000))*(x857));
IkReal x869=((IkReal(1.10000000000000))*(x856));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x862)))+(((IkReal(-1.00000000000000))*(x858)))+(((x856)*(x860)))+(((x856)*(x861)))+(x867));
evalcond[1]=((((IkReal(-0.550000000000000))*(x857)))+(((x856)*(x863)))+(pz)+(((IkReal(-1.00000000000000))*(x856)*(x859)))+(x864)+(((IkReal(-1.00000000000000))*(x857)*(x858)))+(((IkReal(-1.00000000000000))*(x857)*(x862))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x859)))+(((IkReal(-1.00000000000000))*(x861)*(x865)))+(((IkReal(-1.00000000000000))*(x860)*(x865)))+(x866)+(x863));
evalcond[3]=((((IkReal(0.0450000000000000))*(x857)))+(((IkReal(0.550000000000000))*(x856)))+(((IkReal(-1.00000000000000))*(x861)))+(((IkReal(-1.00000000000000))*(x860)))+(((x856)*(x862)))+(((x856)*(x858)))+(((x857)*(x863)))+(((IkReal(-1.00000000000000))*(x857)*(x859))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x867)))+(((IkReal(-0.0900000000000000))*(x866)))+(((IkReal(-1.00000000000000))*(pp)))+(((x861)*(x869)))+(((x861)*(x868)))+(((x860)*(x869)))+(((x860)*(x868))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x870=((px)*(sj0));
IkReal x871=((cj0)*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x871)))+(x870));
evalcond[3]=((((IkReal(-1.00000000000000))*(x870)))+(x871));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst38;
IkReal x872=((cj0)*(px));
IkReal x873=((IkReal(0.0450000000000000))*(pz));
IkReal x874=((py)*(sj0));
IkReal x875=((IkReal(0.300000000000000))*(cj3));
IkReal x876=((IkReal(0.0450000000000000))*(sj3));
gconst38=IKsign(((((IkReal(-1.00000000000000))*(x872)*(x876)))+(((IkReal(-1.00000000000000))*(x872)*(x875)))+(((IkReal(-1.00000000000000))*(cj3)*(x873)))+(((IkReal(-0.550000000000000))*(x874)))+(((IkReal(-0.550000000000000))*(x872)))+(((IkReal(0.300000000000000))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x874)*(x876)))+(((IkReal(-1.00000000000000))*(x874)*(x875)))+(x873)));
IkReal x877=((py)*(sj0));
IkReal x878=((IkReal(6.66666666666667))*(cj3));
IkReal x879=((cj0)*(px));
IkReal x880=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x877)*(x878)))+(((IkReal(-1.00000000000000))*(x879)*(x880)))+(((IkReal(-12.2222222222222))*(x877)))+(((IkReal(-12.2222222222222))*(x879)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)))+(((IkReal(6.66666666666667))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x877)*(x880)))+(pz)+(((IkReal(-1.00000000000000))*(x878)*(x879))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst39;
gconst39=IKsign((((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)))));
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x881=((py)*(sj0));
IkReal x882=((cj0)*(px));
IkReal x883=((IkReal(0.300000000000000))*(sj3));
IkReal x884=((IkReal(0.0450000000000000))*(cj3));
IkReal x885=((IkReal(0.0450000000000000))*(pz));
IkReal x886=((IkReal(0.300000000000000))*(cj3));
IkReal x887=((IkReal(0.0450000000000000))*(sj3));
if( IKabs(((gconst39)*(((((x881)*(x887)))+(((x881)*(x886)))+(((pz)*(x883)))+(((IkReal(-1.00000000000000))*(pz)*(x884)))+(((x882)*(x887)))+(((x882)*(x886)))+(((IkReal(0.550000000000000))*(x881)))+(((IkReal(0.550000000000000))*(x882)))+(x885))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((x881)*(x884)))+(((pz)*(x886)))+(((IkReal(-1.00000000000000))*(x882)*(x883)))+(((IkReal(-0.0450000000000000))*(x882)))+(((IkReal(-0.0450000000000000))*(x881)))+(((x882)*(x884)))+(((IkReal(-1.00000000000000))*(x881)*(x883)))+(((sj3)*(x885)))+(((IkReal(0.550000000000000))*(pz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst39)*(((((x881)*(x887)))+(((x881)*(x886)))+(((pz)*(x883)))+(((IkReal(-1.00000000000000))*(pz)*(x884)))+(((x882)*(x887)))+(((x882)*(x886)))+(((IkReal(0.550000000000000))*(x881)))+(((IkReal(0.550000000000000))*(x882)))+(x885)))), ((gconst39)*(((((x881)*(x884)))+(((pz)*(x886)))+(((IkReal(-1.00000000000000))*(x882)*(x883)))+(((IkReal(-0.0450000000000000))*(x882)))+(((IkReal(-0.0450000000000000))*(x881)))+(((x882)*(x884)))+(((IkReal(-1.00000000000000))*(x881)*(x883)))+(((sj3)*(x885)))+(((IkReal(0.550000000000000))*(pz)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x888=IKsin(j1);
IkReal x889=IKcos(j1);
IkReal x890=((IkReal(0.300000000000000))*(cj3));
IkReal x891=((IkReal(0.0450000000000000))*(cj3));
IkReal x892=((cj0)*(px));
IkReal x893=((py)*(sj0));
IkReal x894=((IkReal(0.0450000000000000))*(sj3));
IkReal x895=((IkReal(0.300000000000000))*(sj3));
IkReal x896=((IkReal(0.0450000000000000))*(x888));
IkReal x897=((pz)*(x888));
IkReal x898=((pz)*(x889));
IkReal x899=((IkReal(0.0900000000000000))*(x889));
IkReal x900=((IkReal(1.10000000000000))*(x888));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x894)))+(((IkReal(-1.00000000000000))*(x890)))+(x898)+(((x888)*(x893)))+(((x888)*(x892))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x896)))+(((IkReal(-1.00000000000000))*(x889)*(x894)))+(((IkReal(-1.00000000000000))*(x889)*(x890)))+(pz)+(((IkReal(-1.00000000000000))*(x888)*(x895)))+(((IkReal(-0.550000000000000))*(x889)))+(((x888)*(x891))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x891)))+(((IkReal(-1.00000000000000))*(x897)))+(((x889)*(x892)))+(((x889)*(x893)))+(x895));
evalcond[3]=((((IkReal(-0.0450000000000000))*(x889)))+(((IkReal(-1.00000000000000))*(x892)))+(((IkReal(-1.00000000000000))*(x893)))+(((IkReal(0.550000000000000))*(x888)))+(((IkReal(-1.00000000000000))*(x889)*(x895)))+(((x889)*(x891)))+(((x888)*(x894)))+(((x888)*(x890))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x892)*(x899)))+(((IkReal(1.10000000000000))*(x898)))+(((x892)*(x900)))+(((x893)*(x900)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x893)*(x899)))+(((IkReal(0.0900000000000000))*(x897))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x901=(sj3)*(sj3);
IkReal x902=(cj3)*(cj3);
IkReal x903=((cj3)*(sj3));
IkReal x904=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst38)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0270000000000000))*(x903)))+(((IkReal(-0.0495000000000000))*(sj3)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x901)))+(((IkReal(-0.0900000000000000))*(x902)))+(((IkReal(-0.330000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x904)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x904)))+(((IkReal(-0.0135000000000000))*(x902)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*(x901)))+(((IkReal(0.0879750000000000))*(x903))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst38)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0270000000000000))*(x903)))+(((IkReal(-0.0495000000000000))*(sj3)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x901)))+(((IkReal(-0.0900000000000000))*(x902)))+(((IkReal(-0.330000000000000))*(cj3)))))), ((gconst38)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x904)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x904)))+(((IkReal(-0.0135000000000000))*(x902)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*(x901)))+(((IkReal(0.0879750000000000))*(x903)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x905=IKsin(j1);
IkReal x906=IKcos(j1);
IkReal x907=((IkReal(0.300000000000000))*(cj3));
IkReal x908=((IkReal(0.0450000000000000))*(cj3));
IkReal x909=((cj0)*(px));
IkReal x910=((py)*(sj0));
IkReal x911=((IkReal(0.0450000000000000))*(sj3));
IkReal x912=((IkReal(0.300000000000000))*(sj3));
IkReal x913=((IkReal(0.0450000000000000))*(x905));
IkReal x914=((pz)*(x905));
IkReal x915=((pz)*(x906));
IkReal x916=((IkReal(0.0900000000000000))*(x906));
IkReal x917=((IkReal(1.10000000000000))*(x905));
evalcond[0]=((IkReal(-0.550000000000000))+(((x905)*(x909)))+(((IkReal(-1.00000000000000))*(x907)))+(((IkReal(-1.00000000000000))*(x911)))+(((x905)*(x910)))+(x915));
evalcond[1]=((((x905)*(x908)))+(((IkReal(-1.00000000000000))*(x906)*(x911)))+(((IkReal(-1.00000000000000))*(x913)))+(((IkReal(-0.550000000000000))*(x906)))+(pz)+(((IkReal(-1.00000000000000))*(x905)*(x912)))+(((IkReal(-1.00000000000000))*(x906)*(x907))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x908)))+(((x906)*(x909)))+(((x906)*(x910)))+(((IkReal(-1.00000000000000))*(x914)))+(x912));
evalcond[3]=((((x905)*(x907)))+(((IkReal(-1.00000000000000))*(x906)*(x912)))+(((x906)*(x908)))+(((IkReal(-0.0450000000000000))*(x906)))+(((IkReal(-1.00000000000000))*(x910)))+(((IkReal(-1.00000000000000))*(x909)))+(((IkReal(0.550000000000000))*(x905)))+(((x905)*(x911))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x910)*(x917)))+(((x909)*(x917)))+(((IkReal(1.10000000000000))*(x915)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x910)*(x916)))+(((IkReal(0.0900000000000000))*(x914)))+(((IkReal(-1.00000000000000))*(x909)*(x916))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x918=((IkReal(0.0450000000000000))*(sj3));
IkReal x919=((cj2)*(px));
IkReal x920=((cj0)*(px));
IkReal x921=((pz)*(sj2));
IkReal x922=((py)*(sj0)*(sj2));
IkReal x923=((IkReal(0.300000000000000))*(cj3)*(sj2));
IkReal x924=((IkReal(1.00000000000000))*(cj0)*(cj2));
if( IKabs(((gconst35)*(((((x918)*(x922)))+(((IkReal(0.300000000000000))*(cj3)*(x922)))+(((pz)*(sj0)*(x919)))+(((sj2)*(x918)*(x920)))+(((x920)*(x923)))+(((IkReal(0.550000000000000))*(x922)))+(((IkReal(-1.00000000000000))*(py)*(pz)*(x924)))+(((IkReal(0.550000000000000))*(sj2)*(x920))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst35)*(((((x918)*(x921)))+(((IkReal(0.300000000000000))*(cj3)*(x921)))+(((IkReal(-1.00000000000000))*(py)*(x919)*((sj0)*(sj0))))+(((py)*(x919)*((cj0)*(cj0))))+(((IkReal(0.550000000000000))*(x921)))+(((IkReal(-1.00000000000000))*(sj0)*(x919)*(x920)))+(((cj0)*(cj2)*(sj0)*((py)*(py)))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst35)*(((((x918)*(x922)))+(((IkReal(0.300000000000000))*(cj3)*(x922)))+(((pz)*(sj0)*(x919)))+(((sj2)*(x918)*(x920)))+(((x920)*(x923)))+(((IkReal(0.550000000000000))*(x922)))+(((IkReal(-1.00000000000000))*(py)*(pz)*(x924)))+(((IkReal(0.550000000000000))*(sj2)*(x920)))))), ((gconst35)*(((((x918)*(x921)))+(((IkReal(0.300000000000000))*(cj3)*(x921)))+(((IkReal(-1.00000000000000))*(py)*(x919)*((sj0)*(sj0))))+(((py)*(x919)*((cj0)*(cj0))))+(((IkReal(0.550000000000000))*(x921)))+(((IkReal(-1.00000000000000))*(sj0)*(x919)*(x920)))+(((cj0)*(cj2)*(sj0)*((py)*(py))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x925=IKsin(j1);
IkReal x926=IKcos(j1);
IkReal x927=((px)*(sj2));
IkReal x928=((IkReal(0.300000000000000))*(sj3));
IkReal x929=((IkReal(0.0900000000000000))*(sj0));
IkReal x930=((cj2)*(px));
IkReal x931=((IkReal(0.0450000000000000))*(cj3));
IkReal x932=((IkReal(0.0450000000000000))*(cj2));
IkReal x933=((py)*(sj0));
IkReal x934=((IkReal(0.0450000000000000))*(sj3));
IkReal x935=((IkReal(1.00000000000000))*(cj0));
IkReal x936=((IkReal(0.300000000000000))*(cj3));
IkReal x937=((py)*(sj2));
IkReal x938=((cj0)*(x926));
IkReal x939=((cj3)*(x925));
IkReal x940=((cj2)*(x926));
IkReal x941=((cj2)*(x925));
IkReal x942=((pz)*(x926));
IkReal x943=((cj0)*(px)*(x925));
evalcond[0]=((IkReal(-0.550000000000000))+(((x925)*(x933)))+(x942)+(x943)+(((IkReal(-1.00000000000000))*(x936)))+(((IkReal(-1.00000000000000))*(x934))));
evalcond[1]=((((sj2)*(x926)*(x933)))+(((x927)*(x938)))+(((sj0)*(x930)))+(((IkReal(-1.00000000000000))*(pz)*(sj2)*(x925)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x935))));
evalcond[2]=((((x928)*(x941)))+(((IkReal(-0.550000000000000))*(x926)))+(((IkReal(-1.00000000000000))*(x926)*(x936)))+(((IkReal(-1.00000000000000))*(x926)*(x934)))+(pz)+(((x925)*(x932)))+(((IkReal(-1.00000000000000))*(x931)*(x941))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x935)*(x937)))+(((IkReal(-1.00000000000000))*(x933)*(x940)))+(((sj0)*(x927)))+(((IkReal(-1.00000000000000))*(x926)*(x930)*(x935)))+(x928)+(((pz)*(x941)))+(((IkReal(-1.00000000000000))*(x931))));
evalcond[4]=((((x928)*(x940)))+(((IkReal(-1.00000000000000))*(px)*(x935)))+(((IkReal(0.550000000000000))*(x925)))+(((IkReal(-1.00000000000000))*(x933)))+(((x925)*(x936)))+(((x925)*(x934)))+(((IkReal(-1.00000000000000))*(x931)*(x940)))+(((x926)*(x932))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x925)*(x933)))+(((IkReal(-0.0900000000000000))*(pz)*(x941)))+(((IkReal(-1.00000000000000))*(x927)*(x929)))+(((IkReal(0.0900000000000000))*(x930)*(x938)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x942)))+(((IkReal(1.10000000000000))*(x943)))+(((IkReal(0.0900000000000000))*(cj0)*(x937)))+(((py)*(x929)*(x940))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x944=(cj3)*(cj3);
IkReal x945=(sj3)*(sj3);
IkReal x946=((cj2)*(sj3));
IkReal x947=((IkReal(0.0135000000000000))*(cj2));
IkReal x948=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst34)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0270000000000000))*(cj3)*(sj3)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x945)))+(((IkReal(-0.0900000000000000))*(x944)))+(((IkReal(-0.330000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((IkReal(-1.00000000000000))*(py)*(sj0)*(x948)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x948)))+(((IkReal(-1.00000000000000))*(x945)*(x947)))+(((IkReal(-0.0247500000000000))*(cj2)))+(((IkReal(-0.0879750000000000))*(cj3)*(x946)))+(((x944)*(x947)))+(((IkReal(-0.167025000000000))*(x946)))+(((IkReal(0.0112500000000000))*(cj2)*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst34)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0270000000000000))*(cj3)*(sj3)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x945)))+(((IkReal(-0.0900000000000000))*(x944)))+(((IkReal(-0.330000000000000))*(cj3)))))), ((gconst34)*(((((IkReal(-1.00000000000000))*(py)*(sj0)*(x948)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x948)))+(((IkReal(-1.00000000000000))*(x945)*(x947)))+(((IkReal(-0.0247500000000000))*(cj2)))+(((IkReal(-0.0879750000000000))*(cj3)*(x946)))+(((x944)*(x947)))+(((IkReal(-0.167025000000000))*(x946)))+(((IkReal(0.0112500000000000))*(cj2)*(cj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x949=IKsin(j1);
IkReal x950=IKcos(j1);
IkReal x951=((px)*(sj2));
IkReal x952=((IkReal(0.300000000000000))*(sj3));
IkReal x953=((IkReal(0.0900000000000000))*(sj0));
IkReal x954=((cj2)*(px));
IkReal x955=((IkReal(0.0450000000000000))*(cj3));
IkReal x956=((IkReal(0.0450000000000000))*(cj2));
IkReal x957=((py)*(sj0));
IkReal x958=((IkReal(0.0450000000000000))*(sj3));
IkReal x959=((IkReal(1.00000000000000))*(cj0));
IkReal x960=((IkReal(0.300000000000000))*(cj3));
IkReal x961=((py)*(sj2));
IkReal x962=((cj0)*(x950));
IkReal x963=((cj3)*(x949));
IkReal x964=((cj2)*(x950));
IkReal x965=((cj2)*(x949));
IkReal x966=((pz)*(x950));
IkReal x967=((cj0)*(px)*(x949));
evalcond[0]=((IkReal(-0.550000000000000))+(((x949)*(x957)))+(((IkReal(-1.00000000000000))*(x958)))+(x966)+(x967)+(((IkReal(-1.00000000000000))*(x960))));
evalcond[1]=((((x951)*(x962)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x959)))+(((sj2)*(x950)*(x957)))+(((sj0)*(x954)))+(((IkReal(-1.00000000000000))*(pz)*(sj2)*(x949))));
evalcond[2]=((((x952)*(x965)))+(((IkReal(-0.550000000000000))*(x950)))+(((x949)*(x956)))+(pz)+(((IkReal(-1.00000000000000))*(x950)*(x960)))+(((IkReal(-1.00000000000000))*(x950)*(x958)))+(((IkReal(-1.00000000000000))*(x955)*(x965))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x950)*(x954)*(x959)))+(((pz)*(x965)))+(((IkReal(-1.00000000000000))*(x957)*(x964)))+(((IkReal(-1.00000000000000))*(x959)*(x961)))+(((sj0)*(x951)))+(((IkReal(-1.00000000000000))*(x955)))+(x952));
evalcond[4]=((((x952)*(x964)))+(((IkReal(0.550000000000000))*(x949)))+(((x949)*(x958)))+(((IkReal(-1.00000000000000))*(x957)))+(((x949)*(x960)))+(((IkReal(-1.00000000000000))*(px)*(x959)))+(((IkReal(-1.00000000000000))*(x955)*(x964)))+(((x950)*(x956))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x954)*(x962)))+(((IkReal(-0.0900000000000000))*(pz)*(x965)))+(((IkReal(1.10000000000000))*(x949)*(x957)))+(((IkReal(-1.00000000000000))*(pp)))+(((py)*(x953)*(x964)))+(((IkReal(1.10000000000000))*(x966)))+(((IkReal(1.10000000000000))*(x967)))+(((IkReal(-1.00000000000000))*(x951)*(x953)))+(((IkReal(0.0900000000000000))*(cj0)*(x961))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x94=((IkReal(1.00000000000000))*(cj3));
IkReal x95=((sj0)*(sj2));
IkReal x96=((cj2)*(sj1));
IkReal x97=((IkReal(1.00000000000000))*(sj3));
IkReal x98=((cj1)*(cj2));
IkReal x99=((sj1)*(sj2));
IkReal x100=((cj0)*(sj2));
IkReal x101=((IkReal(1.00000000000000))*(cj1));
IkReal x102=((((IkReal(-1.00000000000000))*(sj1)*(x97)))+(((cj3)*(x98))));
IkReal x103=((((cj0)*(cj2)))+(((IkReal(-1.00000000000000))*(x101)*(x95))));
IkReal x104=((((sj3)*(x98)))+(((cj3)*(sj1))));
IkReal x105=((((cj1)*(cj3)))+(((IkReal(-1.00000000000000))*(x96)*(x97))));
IkReal x106=((cj0)*(x102));
IkReal x107=((((IkReal(-1.00000000000000))*(x94)*(x96)))+(((IkReal(-1.00000000000000))*(cj1)*(x97))));
IkReal x108=((((IkReal(-1.00000000000000))*(x100)*(x101)))+(((IkReal(-1.00000000000000))*(cj2)*(sj0))));
IkReal x109=((((cj3)*(x100)))+(((sj0)*(x102))));
IkReal x110=((((IkReal(-1.00000000000000))*(x95)*(x97)))+(((cj0)*(x104))));
IkReal x111=((((sj3)*(x100)))+(((sj0)*(x104))));
IkReal x112=((x106)+(((IkReal(-1.00000000000000))*(cj3)*(x95))));
new_r00=((((r10)*(x109)))+(((r20)*(x107)))+(((r00)*(((((IkReal(-1.00000000000000))*(x94)*(x95)))+(x106))))));
new_r01=((((r21)*(x107)))+(((r11)*(x109)))+(((r01)*(x112))));
new_r02=((((r02)*(x112)))+(((r22)*(x107)))+(((r12)*(x109))));
new_r10=((((r10)*(x103)))+(((r20)*(x99)))+(((r00)*(x108))));
new_r11=((((r21)*(x99)))+(((r01)*(x108)))+(((r11)*(x103))));
new_r12=((((r02)*(x108)))+(((r12)*(x103)))+(((r22)*(x99))));
new_r20=((((r10)*(x111)))+(((r20)*(x105)))+(((r00)*(x110))));
new_r21=((((r21)*(x105)))+(((r11)*(x111)))+(((r01)*(x110))));
new_r22=((((r02)*(x110)))+(((r22)*(x105)))+(((r12)*(x111))));
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=new_r22;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal dummyeval[1];
IkReal gconst42;
gconst42=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst40;
gconst40=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst41;
gconst41=IKsign(((((cj5)*((new_r02)*(new_r02))))+(((cj5)*((new_r12)*(new_r12))))));
dummyeval[0]=((((cj5)*((new_r02)*(new_r02))))+(((cj5)*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((IKcos(j6))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(IKsin(j6)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst49;
gconst49=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst49)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst49)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst49)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst49)*(new_r10)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x113=IKcos(j4);
IkReal x114=IKsin(j4);
IkReal x115=((IkReal(1.00000000000000))*(x114));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x115)))+(((new_r12)*(x113))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r02)*(x113)))+(((new_r12)*(x114))));
evalcond[2]=((((new_r10)*(x113)))+(((IkReal(-1.00000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(new_r00)*(x115))));
evalcond[3]=((((new_r11)*(x113)))+(((IkReal(-1.00000000000000))*(new_r01)*(x115)))+(((IkReal(-1.00000000000000))*(cj6))));
evalcond[4]=((((new_r11)*(x114)))+(((new_r01)*(x113))));
evalcond[5]=((((new_r10)*(x114)))+(((new_r00)*(x113))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst48)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst48)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst48)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst48)*(new_r11)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x116=IKcos(j4);
IkReal x117=IKsin(j4);
IkReal x118=((IkReal(1.00000000000000))*(x117));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x118)))+(((new_r12)*(x116))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r02)*(x116)))+(((new_r12)*(x117))));
evalcond[2]=((((new_r10)*(x116)))+(((IkReal(-1.00000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(new_r00)*(x118))));
evalcond[3]=((((new_r11)*(x116)))+(((IkReal(-1.00000000000000))*(new_r01)*(x118)))+(((IkReal(-1.00000000000000))*(cj6))));
evalcond[4]=((((new_r11)*(x117)))+(((new_r01)*(x116))));
evalcond[5]=((((new_r10)*(x117)))+(((new_r00)*(x116))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(IKcos(j6))))+(new_r20));
evalcond[1]=((IKsin(j6))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst52;
gconst52=IKsign(((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst53;
gconst53=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst53)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst53)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst53)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst53)*(new_r10)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x119=IKcos(j4);
IkReal x120=IKsin(j4);
IkReal x121=((IkReal(1.00000000000000))*(x120));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x121)))+(((new_r12)*(x119))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r02)*(x119)))+(((new_r12)*(x120))));
evalcond[2]=((((new_r10)*(x119)))+(((IkReal(-1.00000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(new_r00)*(x121))));
evalcond[3]=((((new_r11)*(x119)))+(((IkReal(-1.00000000000000))*(new_r01)*(x121)))+(((IkReal(-1.00000000000000))*(cj6))));
evalcond[4]=((((new_r01)*(x119)))+(((new_r11)*(x120))));
evalcond[5]=((((new_r00)*(x119)))+(((new_r10)*(x120))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst52)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst52)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst52)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst52)*(new_r11)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x122=IKcos(j4);
IkReal x123=IKsin(j4);
IkReal x124=((IkReal(1.00000000000000))*(x123));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x124)))+(((new_r12)*(x122))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r02)*(x122)))+(((new_r12)*(x123))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(new_r00)*(x124)))+(((new_r10)*(x122))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x124)))+(((new_r11)*(x122)))+(((IkReal(-1.00000000000000))*(cj6))));
evalcond[4]=((((new_r01)*(x122)))+(((new_r11)*(x123))));
evalcond[5]=((((new_r00)*(x122)))+(((new_r10)*(x123))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x125=IKatan2(new_r02, new_r12);
j4array[0]=((IkReal(-1.00000000000000))*(x125));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x125))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x126=IKsin(j6);
IkReal x127=((IkReal(1.00000000000000))*(sj4));
IkReal x128=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x127)))+(((IkReal(-1.00000000000000))*(x126))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x127)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x128))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x126));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(x128))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x129=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x129;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x129;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x130=IKatan2(new_r02, new_r12);
j4array[0]=((IkReal(-1.00000000000000))*(x130));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x130))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r01)))+(((new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x131=IKcos(j6);
IkReal x132=((IkReal(1.00000000000000))*(sj4));
IkReal x133=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x132)))+(((IkReal(-1.00000000000000))*(x133))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x132)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x131))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(((IkReal(-1.00000000000000))*(x133))));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(x131));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x134=((gconst41)*(new_r22)*(sj5));
if( IKabs(((new_r12)*(x134))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x134))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r12)*(x134)), ((new_r02)*(x134)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x135=IKcos(j4);
IkReal x136=IKsin(j4);
IkReal x137=((IkReal(1.00000000000000))*(sj5));
IkReal x138=((IkReal(1.00000000000000))*(cj5));
IkReal x139=((new_r12)*(x136));
IkReal x140=((new_r02)*(x135));
evalcond[0]=((((new_r12)*(x135)))+(((IkReal(-1.00000000000000))*(new_r02)*(x136))));
evalcond[1]=((x140)+(x139)+(((IkReal(-1.00000000000000))*(x137))));
evalcond[2]=((((cj5)*(x140)))+(((IkReal(-1.00000000000000))*(new_r22)*(x137)))+(((cj5)*(x139))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x135)*(x137)))+(((IkReal(-1.00000000000000))*(new_r10)*(x136)*(x137)))+(((IkReal(-1.00000000000000))*(new_r20)*(x138))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r21)*(x138)))+(((IkReal(-1.00000000000000))*(new_r01)*(x135)*(x137)))+(((IkReal(-1.00000000000000))*(new_r11)*(x136)*(x137))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x137)*(x140)))+(((IkReal(-1.00000000000000))*(x137)*(x139)))+(((IkReal(-1.00000000000000))*(new_r22)*(x138))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst43;
gconst43=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x141=((((IkReal(-1.00000000000000))*(new_r02)*(sj4)))+(((cj4)*(new_r12))));
IkReal x142=((((new_r12)*(sj4)))+(((cj4)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x141;
evalcond[5]=x141;
evalcond[6]=x142;
evalcond[7]=x142;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x143=IKsin(j6);
IkReal x144=((IkReal(1.00000000000000))*(sj4));
IkReal x145=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x143)))+(((IkReal(-1.00000000000000))*(new_r00)*(x144))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x144)))+(((IkReal(-1.00000000000000))*(x145)))+(((cj4)*(new_r11))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x143));
evalcond[3]=((((IkReal(-1.00000000000000))*(x145)))+(((cj4)*(new_r00)))+(((new_r10)*(sj4))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x146=((IkReal(1.00000000000000))+(new_r22));
IkReal x147=((cj4)*(new_r02));
IkReal x148=((new_r12)*(sj4));
IkReal x149=((((IkReal(-1.00000000000000))*(new_r02)*(sj4)))+(((cj4)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x146;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x149;
evalcond[5]=x149;
evalcond[6]=((x147)+(x148));
evalcond[7]=((((IkReal(-1.00000000000000))*(x147)))+(((IkReal(-1.00000000000000))*(x148))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x146;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r01)))+(((new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x150=IKcos(j6);
IkReal x151=((IkReal(1.00000000000000))*(sj4));
IkReal x152=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x152)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x151))));
evalcond[1]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x150)))+(((IkReal(-1.00000000000000))*(new_r01)*(x151))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x152)))+(((cj4)*(new_r01)))+(((new_r11)*(sj4))));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(x150));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x153=IKsin(j6);
IkReal x154=IKcos(j6);
IkReal x155=((cj4)*(new_r01));
IkReal x156=((IkReal(1.00000000000000))*(sj5));
IkReal x157=((new_r10)*(sj4));
IkReal x158=((new_r11)*(sj4));
IkReal x159=((cj4)*(new_r00));
IkReal x160=((IkReal(1.00000000000000))*(sj4));
IkReal x161=((IkReal(1.00000000000000))*(x154));
evalcond[0]=((((sj5)*(x154)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x153)*(x156)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x160)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x153))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x161)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x160))));
evalcond[4]=((x155)+(x158)+(((cj5)*(x153))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x161)))+(x157)+(x159));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x156)))+(x153)+(((cj5)*(x158)))+(((cj5)*(x155))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x156)))+(((IkReal(-1.00000000000000))*(x161)))+(((cj5)*(x159)))+(((cj5)*(x157))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj4)))+(((cj4)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj4)))+(((cj4)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj4)))+(((cj4)*(new_r11)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x162=IKsin(j6);
IkReal x163=IKcos(j6);
IkReal x164=((cj4)*(new_r01));
IkReal x165=((IkReal(1.00000000000000))*(sj5));
IkReal x166=((new_r10)*(sj4));
IkReal x167=((new_r11)*(sj4));
IkReal x168=((cj4)*(new_r00));
IkReal x169=((IkReal(1.00000000000000))*(sj4));
IkReal x170=((IkReal(1.00000000000000))*(x163));
evalcond[0]=((new_r20)+(((sj5)*(x163))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x162)*(x165)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x169)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x162))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x170)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x169))));
evalcond[4]=((((cj5)*(x162)))+(x167)+(x164));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x170)))+(x168)+(x166));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x165)))+(((cj5)*(x167)))+(((cj5)*(x164)))+(x162));
evalcond[7]=((((cj5)*(x166)))+(((cj5)*(x168)))+(((IkReal(-1.00000000000000))*(x170)))+(((IkReal(-1.00000000000000))*(new_r20)*(x165))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst43)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst43)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst43)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst43)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x171=IKsin(j6);
IkReal x172=IKcos(j6);
IkReal x173=((cj4)*(new_r01));
IkReal x174=((IkReal(1.00000000000000))*(sj5));
IkReal x175=((new_r10)*(sj4));
IkReal x176=((new_r11)*(sj4));
IkReal x177=((cj4)*(new_r00));
IkReal x178=((IkReal(1.00000000000000))*(sj4));
IkReal x179=((IkReal(1.00000000000000))*(x172));
evalcond[0]=((new_r20)+(((sj5)*(x172))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x171)*(x174)))+(new_r21));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x171)))+(((IkReal(-1.00000000000000))*(new_r00)*(x178))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x179)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x178))));
evalcond[4]=((((cj5)*(x171)))+(x173)+(x176));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x179)))+(x175)+(x177));
evalcond[6]=((((cj5)*(x173)))+(((cj5)*(x176)))+(((IkReal(-1.00000000000000))*(new_r21)*(x174)))+(x171));
evalcond[7]=((((cj5)*(x175)))+(((cj5)*(x177)))+(((IkReal(-1.00000000000000))*(x179)))+(((IkReal(-1.00000000000000))*(new_r20)*(x174))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x180=((gconst40)*(sj5));
if( IKabs(((new_r12)*(x180))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x180))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r12)*(x180)), ((new_r02)*(x180)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x181=IKcos(j4);
IkReal x182=IKsin(j4);
IkReal x183=((IkReal(1.00000000000000))*(sj5));
IkReal x184=((IkReal(1.00000000000000))*(cj5));
IkReal x185=((new_r12)*(x182));
IkReal x186=((new_r02)*(x181));
evalcond[0]=((((new_r12)*(x181)))+(((IkReal(-1.00000000000000))*(new_r02)*(x182))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x183)))+(x185)+(x186));
evalcond[2]=((((cj5)*(x185)))+(((cj5)*(x186)))+(((IkReal(-1.00000000000000))*(new_r22)*(x183))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r10)*(x182)*(x183)))+(((IkReal(-1.00000000000000))*(new_r00)*(x181)*(x183)))+(((IkReal(-1.00000000000000))*(new_r20)*(x184))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r11)*(x182)*(x183)))+(((IkReal(-1.00000000000000))*(new_r21)*(x184)))+(((IkReal(-1.00000000000000))*(new_r01)*(x181)*(x183))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x184)))+(((IkReal(-1.00000000000000))*(x183)*(x185)))+(((IkReal(-1.00000000000000))*(x183)*(x186))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst43;
gconst43=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x187=((((IkReal(-1.00000000000000))*(new_r02)*(sj4)))+(((cj4)*(new_r12))));
IkReal x188=((((new_r12)*(sj4)))+(((cj4)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x187;
evalcond[5]=x187;
evalcond[6]=x188;
evalcond[7]=x188;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x189=IKsin(j6);
IkReal x190=((IkReal(1.00000000000000))*(sj4));
IkReal x191=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x189)))+(((IkReal(-1.00000000000000))*(new_r00)*(x190))));
evalcond[1]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x191)))+(((IkReal(-1.00000000000000))*(new_r01)*(x190))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x189));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(x191))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x192=((IkReal(1.00000000000000))+(new_r22));
IkReal x193=((cj4)*(new_r02));
IkReal x194=((new_r12)*(sj4));
IkReal x195=((((IkReal(-1.00000000000000))*(new_r02)*(sj4)))+(((cj4)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x192;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x195;
evalcond[5]=x195;
evalcond[6]=((x193)+(x194));
evalcond[7]=((((IkReal(-1.00000000000000))*(x194)))+(((IkReal(-1.00000000000000))*(x193))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x192;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r01)))+(((new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x196=IKcos(j6);
IkReal x197=((IkReal(1.00000000000000))*(sj4));
IkReal x198=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x198)))+(((IkReal(-1.00000000000000))*(new_r00)*(x197))));
evalcond[1]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x196)))+(((IkReal(-1.00000000000000))*(new_r01)*(x197))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(((IkReal(-1.00000000000000))*(x198))));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(x196));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x199=IKsin(j6);
IkReal x200=IKcos(j6);
IkReal x201=((cj4)*(new_r01));
IkReal x202=((IkReal(1.00000000000000))*(sj5));
IkReal x203=((new_r10)*(sj4));
IkReal x204=((new_r11)*(sj4));
IkReal x205=((cj4)*(new_r00));
IkReal x206=((IkReal(1.00000000000000))*(sj4));
IkReal x207=((IkReal(1.00000000000000))*(x200));
evalcond[0]=((new_r20)+(((sj5)*(x200))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x199)*(x202)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x206)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x199))));
evalcond[3]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x207)))+(((IkReal(-1.00000000000000))*(new_r01)*(x206))));
evalcond[4]=((((cj5)*(x199)))+(x204)+(x201));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x207)))+(x205)+(x203));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x202)))+(x199)+(((cj5)*(x204)))+(((cj5)*(x201))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x202)))+(((IkReal(-1.00000000000000))*(x207)))+(((cj5)*(x203)))+(((cj5)*(x205))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj4)))+(((cj4)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj4)))+(((cj4)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj4)))+(((cj4)*(new_r11)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x208=IKsin(j6);
IkReal x209=IKcos(j6);
IkReal x210=((cj4)*(new_r01));
IkReal x211=((IkReal(1.00000000000000))*(sj5));
IkReal x212=((new_r10)*(sj4));
IkReal x213=((new_r11)*(sj4));
IkReal x214=((cj4)*(new_r00));
IkReal x215=((IkReal(1.00000000000000))*(sj4));
IkReal x216=((IkReal(1.00000000000000))*(x209));
evalcond[0]=((new_r20)+(((sj5)*(x209))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x208)*(x211))));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x215)))+(((IkReal(-1.00000000000000))*(x208))));
evalcond[3]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x215)))+(((IkReal(-1.00000000000000))*(x216))));
evalcond[4]=((x210)+(x213)+(((cj5)*(x208))));
evalcond[5]=((x212)+(x214)+(((IkReal(-1.00000000000000))*(cj5)*(x216))));
evalcond[6]=((((cj5)*(x213)))+(((cj5)*(x210)))+(x208)+(((IkReal(-1.00000000000000))*(new_r21)*(x211))));
evalcond[7]=((((cj5)*(x214)))+(((cj5)*(x212)))+(((IkReal(-1.00000000000000))*(new_r20)*(x211)))+(((IkReal(-1.00000000000000))*(x216))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst43)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst43)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst43)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst43)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x217=IKsin(j6);
IkReal x218=IKcos(j6);
IkReal x219=((cj4)*(new_r01));
IkReal x220=((IkReal(1.00000000000000))*(sj5));
IkReal x221=((new_r10)*(sj4));
IkReal x222=((new_r11)*(sj4));
IkReal x223=((cj4)*(new_r00));
IkReal x224=((IkReal(1.00000000000000))*(sj4));
IkReal x225=((IkReal(1.00000000000000))*(x218));
evalcond[0]=((((sj5)*(x218)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x217)*(x220)))+(new_r21));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x217)))+(((IkReal(-1.00000000000000))*(new_r00)*(x224))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x224)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x225))));
evalcond[4]=((((cj5)*(x217)))+(x219)+(x222));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x225)))+(x221)+(x223));
evalcond[6]=((((cj5)*(x219)))+(x217)+(((cj5)*(x222)))+(((IkReal(-1.00000000000000))*(new_r21)*(x220))));
evalcond[7]=((((cj5)*(x221)))+(((cj5)*(x223)))+(((IkReal(-1.00000000000000))*(new_r20)*(x220)))+(((IkReal(-1.00000000000000))*(x225))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst42)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst42)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst42)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst42)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((new_r20)+(((sj5)*(IKcos(j6)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj5)*(IKsin(j6))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst44;
gconst44=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst45;
gconst45=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x226=((gconst45)*(sj6));
if( IKabs(((new_r12)*(x226))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x226))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r12)*(x226)), ((new_r02)*(x226)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x227=IKcos(j4);
IkReal x228=IKsin(j4);
IkReal x229=((IkReal(1.00000000000000))*(cj6));
IkReal x230=((IkReal(1.00000000000000))*(sj5));
IkReal x231=((IkReal(1.00000000000000))*(cj5));
IkReal x232=((new_r00)*(x227));
IkReal x233=((cj5)*(x228));
IkReal x234=((new_r11)*(x228));
IkReal x235=((cj5)*(x227));
IkReal x236=((new_r02)*(x227));
IkReal x237=((new_r12)*(x228));
IkReal x238=((new_r10)*(x228));
IkReal x239=((IkReal(1.00000000000000))*(x228));
IkReal x240=((new_r01)*(x227));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x239)))+(((new_r12)*(x227))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x230)))+(x236)+(x237));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)))+(((new_r10)*(x227)))+(((IkReal(-1.00000000000000))*(new_r00)*(x239))));
evalcond[3]=((((new_r11)*(x227)))+(((IkReal(-1.00000000000000))*(new_r01)*(x239)))+(((IkReal(-1.00000000000000))*(x229))));
evalcond[4]=((((cj5)*(sj6)))+(x234)+(x240));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x229)))+(x238)+(x232));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r22)*(x230)))+(((new_r02)*(x235)))+(((new_r12)*(x233))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x230)*(x238)))+(((IkReal(-1.00000000000000))*(x230)*(x232)))+(((IkReal(-1.00000000000000))*(new_r20)*(x231))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x230)*(x234)))+(((IkReal(-1.00000000000000))*(new_r21)*(x231)))+(((IkReal(-1.00000000000000))*(x230)*(x240))));
evalcond[9]=((sj6)+(((IkReal(-1.00000000000000))*(new_r21)*(x230)))+(((new_r11)*(x233)))+(((new_r01)*(x235))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x231)))+(((IkReal(-1.00000000000000))*(x230)*(x237)))+(((IkReal(-1.00000000000000))*(x230)*(x236))));
evalcond[11]=((((new_r10)*(x233)))+(((IkReal(-1.00000000000000))*(new_r20)*(x230)))+(((cj5)*(x232)))+(((IkReal(-1.00000000000000))*(x229))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x241=((gconst44)*(sj5));
if( IKabs(((new_r12)*(x241))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x241))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r12)*(x241)), ((new_r02)*(x241)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x242=IKcos(j4);
IkReal x243=IKsin(j4);
IkReal x244=((IkReal(1.00000000000000))*(cj6));
IkReal x245=((IkReal(1.00000000000000))*(sj5));
IkReal x246=((IkReal(1.00000000000000))*(cj5));
IkReal x247=((new_r00)*(x242));
IkReal x248=((cj5)*(x243));
IkReal x249=((new_r11)*(x243));
IkReal x250=((cj5)*(x242));
IkReal x251=((new_r02)*(x242));
IkReal x252=((new_r12)*(x243));
IkReal x253=((new_r10)*(x243));
IkReal x254=((IkReal(1.00000000000000))*(x243));
IkReal x255=((new_r01)*(x242));
evalcond[0]=((((new_r12)*(x242)))+(((IkReal(-1.00000000000000))*(new_r02)*(x254))));
evalcond[1]=((x251)+(x252)+(((IkReal(-1.00000000000000))*(x245))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(new_r00)*(x254)))+(((new_r10)*(x242))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x254)))+(((IkReal(-1.00000000000000))*(x244)))+(((new_r11)*(x242))));
evalcond[4]=((((cj5)*(sj6)))+(x255)+(x249));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x244)))+(x253)+(x247));
evalcond[6]=((((new_r12)*(x248)))+(((new_r02)*(x250)))+(((IkReal(-1.00000000000000))*(new_r22)*(x245))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x245)*(x253)))+(((IkReal(-1.00000000000000))*(new_r20)*(x246)))+(((IkReal(-1.00000000000000))*(x245)*(x247))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r21)*(x246)))+(((IkReal(-1.00000000000000))*(x245)*(x255)))+(((IkReal(-1.00000000000000))*(x245)*(x249))));
evalcond[9]=((((new_r01)*(x250)))+(sj6)+(((IkReal(-1.00000000000000))*(new_r21)*(x245)))+(((new_r11)*(x248))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x246)))+(((IkReal(-1.00000000000000))*(x245)*(x252)))+(((IkReal(-1.00000000000000))*(x245)*(x251))));
evalcond[11]=((((cj5)*(x247)))+(((IkReal(-1.00000000000000))*(new_r20)*(x245)))+(((IkReal(-1.00000000000000))*(x244)))+(((new_r10)*(x248))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - BarrettWAM (7e4d38b9ddec04eac44367aed0569706)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
