/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2015-10-21 11:38:24.570004
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ik_test_service/ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKsin(j[6]);
x11=IKsin(j[5]);
x12=IKcos(j[5]);
x13=IKcos(j[6]);
x14=((IkReal(0.0600000000000000))*(x5));
x15=((IkReal(0.0450000000000000))*(x1));
x16=((IkReal(1.00000000000000))*(x5));
x17=((IkReal(0.0600000000000000))*(x9));
x18=((IkReal(0.300000000000000))*(x1));
x19=((IkReal(0.0600000000000000))*(x6));
x20=((IkReal(1.00000000000000))*(x11));
x21=((IkReal(0.0450000000000000))*(x5));
x22=((IkReal(1.00000000000000))*(x1));
x23=((IkReal(1.00000000000000))*(x12));
x24=((IkReal(0.0600000000000000))*(x8));
x25=((IkReal(1.00000000000000))*(x6));
x26=((x0)*(x4));
x27=((x0)*(x2));
x28=((x2)*(x7));
x29=((x3)*(x4));
x30=((x0)*(x7));
x31=((x2)*(x3));
x32=((x3)*(x7));
x33=((IkReal(1.00000000000000))*(x29));
x34=((IkReal(0.0450000000000000))*(x29));
x35=((IkReal(0.0450000000000000))*(x26));
x36=((x22)*(x6));
x37=((x32)*(x6));
x38=((x4)*(x7)*(x9));
x39=((x16)*(x30));
x40=((x25)*(x30));
x41=((x15)*(x27));
x42=((x16)*(x32));
x43=((x25)*(x32));
x44=((x15)*(x31));
x45=((((IkReal(-1.00000000000000))*(x33)))+(((x1)*(x27))));
x46=((x26)+(((x1)*(x31))));
x47=((x27)+(((IkReal(-1.00000000000000))*(x22)*(x29))));
x48=((((IkReal(-1.00000000000000))*(x36)))+(((x28)*(x5))));
x49=((x33)+(((IkReal(-1.00000000000000))*(x22)*(x27))));
x50=((((IkReal(-1.00000000000000))*(x31)))+(((IkReal(-1.00000000000000))*(x22)*(x26))));
x51=((((IkReal(-1.00000000000000))*(x26)))+(((IkReal(-1.00000000000000))*(x22)*(x31))));
x52=((((x1)*(x16)))+(((x25)*(x28))));
x53=((IkReal(-1.00000000000000))*(x52));
x54=((x35)+(x44));
x55=((x46)*(x6));
x56=((x11)*(x48));
x57=((x45)*(x6));
x58=((x5)*(x51));
x59=((x50)*(x9));
x60=((x53)*(x8));
x61=((((IkReal(-1.00000000000000))*(x39)))+(x57));
x62=((((IkReal(-1.00000000000000))*(x42)))+(x55));
x63=((((IkReal(-1.00000000000000))*(x40)))+(((x49)*(x5))));
x64=((((IkReal(-1.00000000000000))*(x43)))+(x58));
x65=((((x4)*(x7)*(x8)))+(((x52)*(x9))));
x66=((x38)+(x60));
x67=((x61)*(x8));
x68=((x11)*(x64));
x69=((((x47)*(x9)))+(((x62)*(x8))));
x70=((((x47)*(x8)))+(((x9)*(((((IkReal(-1.00000000000000))*(x25)*(x46)))+(x42))))));
x71=((x59)+(x67));
x72=((x12)*(x69));
x73=((((x50)*(x8)))+(((x9)*(((x39)+(((IkReal(-1.00000000000000))*(x57))))))));
eerot[0]=((((x10)*(x73)))+(((x13)*(((((x11)*(x63)))+(((x12)*(x71))))))));
eerot[1]=((((x10)*(((((IkReal(-1.00000000000000))*(x20)*(x63)))+(((IkReal(-1.00000000000000))*(x23)*(x71)))))))+(((x13)*(x73))));
eerot[2]=((((x12)*(((((IkReal(-1.00000000000000))*(x16)*(x49)))+(x40)))))+(((x11)*(x71))));
eetrans[0]=((IkReal(0.220000000000000))+(((IkReal(-1.00000000000000))*(x34)))+(((x12)*(((((x19)*(x30)))+(((IkReal(-1.00000000000000))*(x14)*(x49)))))))+(((x11)*(((((x17)*(x50)))+(((x24)*(x61)))))))+(((x21)*(x30)))+(((IkReal(0.300000000000000))*(x30)*(x6)))+(((IkReal(0.550000000000000))*(x30)))+(x41)+(((x5)*(((((x18)*(x27)))+(((IkReal(-0.300000000000000))*(x29)))))))+(((x6)*(((((IkReal(-1.00000000000000))*(x41)))+(x34))))));
eerot[3]=((((x10)*(x70)))+(((x13)*(((x72)+(x68))))));
eerot[4]=((((x10)*(((((IkReal(-1.00000000000000))*(x20)*(x64)))+(((IkReal(-1.00000000000000))*(x23)*(x69)))))))+(((x13)*(x70))));
eerot[5]=((((x11)*(x69)))+(((x12)*(((x43)+(((IkReal(-1.00000000000000))*(x16)*(x51))))))));
eetrans[1]=((IkReal(0.140000000000000))+(((x5)*(((((x18)*(x31)))+(((IkReal(0.300000000000000))*(x26)))))))+(((IkReal(-1.00000000000000))*(x54)*(x6)))+(((x21)*(x32)))+(((IkReal(0.550000000000000))*(x32)))+(x54)+(((x12)*(((((x19)*(x32)))+(((IkReal(-1.00000000000000))*(x14)*(x51)))))))+(((x11)*(((((x17)*(x47)))+(((x24)*(x62)))))))+(((IkReal(0.300000000000000))*(x37))));
eerot[6]=((((x13)*(((((x12)*(x66)))+(x56)))))+(((x10)*(x65))));
eerot[7]=((((x13)*(x65)))+(((x10)*(((((IkReal(-1.00000000000000))*(x20)*(x48)))+(((IkReal(-1.00000000000000))*(x23)*(x66))))))));
eerot[8]=((((x11)*(x66)))+(((x12)*(((((IkReal(-1.00000000000000))*(x16)*(x28)))+(x36))))));
IkReal x74=((IkReal(0.0450000000000000))*(x28));
eetrans[2]=((IkReal(0.346000000000000))+(((x18)*(x6)))+(((x11)*(((((x24)*(x53)))+(((x17)*(x4)*(x7)))))))+(((IkReal(-0.300000000000000))*(x28)*(x5)))+(((IkReal(-1.00000000000000))*(x74)))+(((x12)*(((((x1)*(x19)))+(((IkReal(-1.00000000000000))*(x14)*(x28)))))))+(((x6)*(x74)))+(((IkReal(0.550000000000000))*(x1)))+(((x15)*(x5))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {6}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1;  _ij6[0] = -1; _ij6[1] = -1; _nj6 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j6=pfree[0]; cj6=cos(pfree[0]); sj6=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((IkReal(-0.220000000000000))+(((IkReal(-0.0600000000000000))*(r02)))+(px));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((IkReal(-0.140000000000000))+(py)+(((IkReal(-0.0600000000000000))*(r12))));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((IkReal(-0.346000000000000))+(((IkReal(-0.0600000000000000))*(r22)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( (((IkReal(1.18441410190393))+(((IkReal(-2.98679637348110))*(pp))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(1.18441410190393))+(((IkReal(-2.98679637348110))*(pp))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x75=IKasin(((IkReal(1.18441410190393))+(((IkReal(-2.98679637348110))*(pp)))));
j3array[0]=((IkReal(1.80132261653346))+(((IkReal(1.00000000000000))*(x75))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((IkReal(4.94291527012326))+(((IkReal(-1.00000000000000))*(x75))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[1];
dummyeval[0]=(((((cj6)*(cj6))*((npx)*(npx))))+((((npy)*(npy))*((sj6)*(sj6))))+((npz)*(npz))+(((IkReal(-2.00000000000000))*(cj6)*(npx)*(npy)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((((cj6)*(cj6))*((npx)*(npx))))+((((npy)*(npy))*((sj6)*(sj6))))+((npz)*(npz))+(((IkReal(-2.00000000000000))*(cj6)*(npx)*(npy)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(12.2222222222222))*(sj3)))+(((IkReal(-1.00000000000000))*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.722500000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(20.0000000000000))*((npz)*(npz))))+(((IkReal(20.0000000000000))*((cj6)*(cj6))*((npx)*(npx))))+(((IkReal(-40.0000000000000))*(cj6)*(npx)*(npy)*(sj6)))+(((IkReal(20.0000000000000))*((npy)*(npy))*((sj6)*(sj6))))));
dummyeval[0]=(((((cj6)*(cj6))*((npx)*(npx))))+((((npy)*(npy))*((sj6)*(sj6))))+((npz)*(npz))+(((IkReal(-2.00000000000000))*(cj6)*(npx)*(npy)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((gconst5)*(((((IkReal(17.0000000000000))*(npy)*(sj6)))+(((IkReal(-17.0000000000000))*(cj6)*(npx))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(17.0000000000000))*(gconst5)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst5)*(((((IkReal(17.0000000000000))*(npy)*(sj6)))+(((IkReal(-17.0000000000000))*(cj6)*(npx)))))), ((IkReal(17.0000000000000))*(gconst5)*(npz)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x76=IKsin(j5);
IkReal x77=IKcos(j5);
IkReal x78=((npy)*(sj6));
IkReal x79=((cj6)*(npx));
IkReal x80=((IkReal(1.00000000000000))*(x76));
evalcond[0]=((IkReal(-0.850000000000000))+(((IkReal(-1.00000000000000))*(x79)*(x80)))+(((x76)*(x78)))+(((npz)*(x77))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x77)*(x79)))+(((IkReal(-1.00000000000000))*(npz)*(x80)))+(((x77)*(x78))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x81=IKatan2(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))), ((((cj6)*(npy)))+(((npx)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x81));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x81))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x82=IKsin(j4);
IkReal x83=IKcos(j4);
IkReal x84=((IkReal(1.00000000000000))*(x83));
IkReal x85=((IkReal(1.00000000000000))*(x82));
evalcond[0]=((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x84)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x84)))+(((IkReal(-1.00000000000000))*(npz)*(sj5)*(x85)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)*(x85)))+(((cj5)*(npy)*(sj6)*(x82))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.722500000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((IkReal(20.0000000000000))*((npz)*(npz))))+(((IkReal(20.0000000000000))*((cj6)*(cj6))*((npx)*(npx))))+(((IkReal(-40.0000000000000))*(cj6)*(npx)*(npy)*(sj6)))+(((IkReal(20.0000000000000))*((npy)*(npy))*((sj6)*(sj6))))));
dummyeval[0]=(((((cj6)*(cj6))*((npx)*(npx))))+((((npy)*(npy))*((sj6)*(sj6))))+((npz)*(npz))+(((IkReal(-2.00000000000000))*(cj6)*(npx)*(npy)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((gconst6)*(((((IkReal(17.0000000000000))*(npy)*(sj6)))+(((IkReal(-17.0000000000000))*(cj6)*(npx))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(17.0000000000000))*(gconst6)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst6)*(((((IkReal(17.0000000000000))*(npy)*(sj6)))+(((IkReal(-17.0000000000000))*(cj6)*(npx)))))), ((IkReal(17.0000000000000))*(gconst6)*(npz)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x248=IKsin(j5);
IkReal x249=IKcos(j5);
IkReal x250=((npy)*(sj6));
IkReal x251=((cj6)*(npx));
IkReal x252=((IkReal(1.00000000000000))*(x248));
evalcond[0]=((IkReal(-0.850000000000000))+(((x248)*(x250)))+(((IkReal(-1.00000000000000))*(x251)*(x252)))+(((npz)*(x249))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x249)*(x251)))+(((x249)*(x250)))+(((IkReal(-1.00000000000000))*(npz)*(x252))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x253=IKatan2(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))), ((((cj6)*(npy)))+(((npx)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x253));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x253))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x254=IKsin(j4);
IkReal x255=IKcos(j4);
IkReal x256=((IkReal(1.00000000000000))*(x255));
IkReal x257=((IkReal(1.00000000000000))*(x254));
evalcond[0]=((((IkReal(-1.00000000000000))*(npz)*(sj5)*(x257)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)*(x257)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x256)))+(((cj5)*(npy)*(sj6)*(x254)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x256))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(-0.163272684258140))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0624999997657902))+(pp));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=((((IkReal(414405822679.079))*(npx)*(sj6)))+(((IkReal(414405822679.079))*(cj6)*(npy))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(6.15202020000000e+16))*(cj6)*(npx)*(npy)*(sj6)))+(((IkReal(-3.07601010000000e+16))*((npy)*(npy))*((sj6)*(sj6))))+(((IkReal(-3.07601010000000e+16))*((cj6)*(cj6))*((npx)*(npx))))+(((IkReal(-3.07601010000000e+16))*((npz)*(npz))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npy)*(npy))*((sj6)*(sj6))))+(((IkReal(-1.00000000000000))*((npz)*(npz))))+(((IkReal(-1.00000000000000))*((cj6)*(cj6))*((npx)*(npx))))+(((IkReal(2.00000000000000))*(cj6)*(npx)*(npy)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
IkReal x258=((IkReal(341778900000000.))*(cj4));
gconst8=IKsign(((((x258)*((npz)*(npz))))+(((IkReal(-683557800000000.))*(cj4)*(cj6)*(npx)*(npy)*(sj6)))+(((x258)*((npy)*(npy))*((sj6)*(sj6))))+(((x258)*((cj6)*(cj6))*((npx)*(npx))))));
dummyeval[0]=((((cj4)*((npz)*(npz))))+(((IkReal(-2.00000000000000))*(cj4)*(cj6)*(npx)*(npy)*(sj6)))+(((cj4)*((npy)*(npy))*((sj6)*(sj6))))+(((cj4)*((cj6)*(cj6))*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x259=((cj6)*(npy));
IkReal x260=((npx)*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0624999997657902))+(pp));
evalcond[2]=((IkReal(2.41309350707268e-12))+(((IkReal(-1.00000000000000))*(x260)))+(((IkReal(-1.00000000000000))*(x259))));
evalcond[3]=((IkReal(-2.41309350707268e-12))+(x259)+(x260));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((IkReal(-341778900000000.))*((npz)*(npz))))+(((IkReal(683557800000000.))*(cj6)*(npx)*(npy)*(sj6)))+(((IkReal(-341778900000000.))*((cj6)*(cj6))*((npx)*(npx))))+(((IkReal(-341778900000000.))*((npy)*(npy))*((sj6)*(sj6))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npy)*(npy))*((sj6)*(sj6))))+(((IkReal(-1.00000000000000))*((npz)*(npz))))+(((IkReal(-1.00000000000000))*((cj6)*(cj6))*((npx)*(npx))))+(((IkReal(2.00000000000000))*(cj6)*(npx)*(npy)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((gconst9)*(((((IkReal(85444725133537.0))*(npy)*(sj6)))+(((IkReal(-85444725133537.0))*(cj6)*(npx))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(85444725133537.0))*(gconst9)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst9)*(((((IkReal(85444725133537.0))*(npy)*(sj6)))+(((IkReal(-85444725133537.0))*(cj6)*(npx)))))), ((IkReal(85444725133537.0))*(gconst9)*(npz)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x261=IKsin(j5);
IkReal x262=IKcos(j5);
IkReal x263=((npy)*(sj6));
IkReal x264=((cj6)*(npx));
IkReal x265=((IkReal(1.00000000000000))*(x261));
evalcond[0]=((IkReal(0.250000000390712))+(((npz)*(x262)))+(((x261)*(x263)))+(((IkReal(-1.00000000000000))*(x264)*(x265))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npz)*(x265)))+(((x262)*(x263)))+(((IkReal(-1.00000000000000))*(x262)*(x264))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x266=((IkReal(-2.41309350707268e-12))+(((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(sj6))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0624999997657902))+(pp));
evalcond[2]=x266;
evalcond[3]=x266;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((((IkReal(-341778900000000.))*((npz)*(npz))))+(((IkReal(683557800000000.))*(cj6)*(npx)*(npy)*(sj6)))+(((IkReal(-341778900000000.))*((cj6)*(cj6))*((npx)*(npx))))+(((IkReal(-341778900000000.))*((npy)*(npy))*((sj6)*(sj6))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npy)*(npy))*((sj6)*(sj6))))+(((IkReal(-1.00000000000000))*((npz)*(npz))))+(((IkReal(-1.00000000000000))*((cj6)*(cj6))*((npx)*(npx))))+(((IkReal(2.00000000000000))*(cj6)*(npx)*(npy)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((gconst10)*(((((IkReal(85444725133537.0))*(npy)*(sj6)))+(((IkReal(-85444725133537.0))*(cj6)*(npx))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(85444725133537.0))*(gconst10)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst10)*(((((IkReal(85444725133537.0))*(npy)*(sj6)))+(((IkReal(-85444725133537.0))*(cj6)*(npx)))))), ((IkReal(85444725133537.0))*(gconst10)*(npz)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x267=IKsin(j5);
IkReal x268=IKcos(j5);
IkReal x269=((npy)*(sj6));
IkReal x270=((cj6)*(npx));
IkReal x271=((IkReal(1.00000000000000))*(x267));
evalcond[0]=((IkReal(0.250000000390712))+(((x267)*(x269)))+(((npz)*(x268)))+(((IkReal(-1.00000000000000))*(x270)*(x271))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npz)*(x271)))+(((IkReal(-1.00000000000000))*(x268)*(x270)))+(((x268)*(x269))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x272=((npy)*(sj6));
IkReal x273=((IkReal(85444725133537.0))*(cj4));
IkReal x274=((cj6)*(npx));
IkReal x275=((IkReal(341778900000000.))*(sj4));
IkReal x276=((cj6)*(sj6));
IkReal x277=((npx)*(npy));
IkReal x278=((npz)*(x275));
if( IKabs(((gconst8)*(((((x273)*(x274)))+(((IkReal(-1.00000000000000))*(x272)*(x273)))+(((cj6)*(npy)*(x278)))+(((IkReal(-824.744444444444))*(npz)))+(((npx)*(sj6)*(x278))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((cj6)*(npy)*(x274)*(x275)))+(((npx)*(sj6)*(x274)*(x275)))+(((IkReal(-1.00000000000000))*(npz)*(x273)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x272)*(x275)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x272)*(x275)))+(((IkReal(-824.744444444444))*(x274)))+(((IkReal(824.744444444444))*(x272))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst8)*(((((x273)*(x274)))+(((IkReal(-1.00000000000000))*(x272)*(x273)))+(((cj6)*(npy)*(x278)))+(((IkReal(-824.744444444444))*(npz)))+(((npx)*(sj6)*(x278)))))), ((gconst8)*(((((cj6)*(npy)*(x274)*(x275)))+(((npx)*(sj6)*(x274)*(x275)))+(((IkReal(-1.00000000000000))*(npz)*(x273)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x272)*(x275)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x272)*(x275)))+(((IkReal(-824.744444444444))*(x274)))+(((IkReal(824.744444444444))*(x272)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x279=IKsin(j5);
IkReal x280=IKcos(j5);
IkReal x281=((npx)*(sj4));
IkReal x282=((cj6)*(npy));
IkReal x283=((IkReal(1.00000000000000))*(npx));
IkReal x284=((cj4)*(x283));
IkReal x285=((cj6)*(x280));
IkReal x286=((npy)*(sj6)*(x280));
IkReal x287=((IkReal(1.00000000000000))*(npz)*(x279));
evalcond[0]=((IkReal(0.250000000390712))+(((npz)*(x280)))+(((npy)*(sj6)*(x279)))+(((IkReal(-1.00000000000000))*(cj6)*(x279)*(x283))));
evalcond[1]=((((IkReal(-2.41309350707268e-12))*(cj4)))+(x286)+(((IkReal(-1.00000000000000))*(x287)))+(((IkReal(-1.00000000000000))*(x283)*(x285))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x284)))+(((IkReal(-1.00000000000000))*(sj4)*(x287)))+(((IkReal(-1.00000000000000))*(x281)*(x285)))+(((IkReal(-1.00000000000000))*(cj4)*(x282)))+(((sj4)*(x286))));
evalcond[3]=((IkReal(-2.41309350707268e-12))+(((sj6)*(x281)))+(((IkReal(-1.00000000000000))*(x284)*(x285)))+(((IkReal(-1.00000000000000))*(cj4)*(x287)))+(((cj4)*(x286)))+(((sj4)*(x282))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x288=((IkReal(74227.0000000000))*(cj4));
IkReal x289=((cj6)*(npx));
IkReal x290=((npy)*(sj6));
if( IKabs(((gconst7)*(((((IkReal(7.69002526201833e+15))*(x290)))+(((npz)*(x288)))+(((IkReal(-7.69002526201833e+15))*(x289))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((x288)*(x289)))+(((IkReal(7.69002526201833e+15))*(npz)))+(((IkReal(-1.00000000000000))*(x288)*(x290))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst7)*(((((IkReal(7.69002526201833e+15))*(x290)))+(((npz)*(x288)))+(((IkReal(-7.69002526201833e+15))*(x289)))))), ((gconst7)*(((((x288)*(x289)))+(((IkReal(7.69002526201833e+15))*(npz)))+(((IkReal(-1.00000000000000))*(x288)*(x290)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x291=IKsin(j5);
IkReal x292=IKcos(j5);
IkReal x293=((npx)*(sj4));
IkReal x294=((cj6)*(npy));
IkReal x295=((IkReal(1.00000000000000))*(npx));
IkReal x296=((cj4)*(x295));
IkReal x297=((cj6)*(x292));
IkReal x298=((npy)*(sj6)*(x292));
IkReal x299=((IkReal(1.00000000000000))*(npz)*(x291));
evalcond[0]=((IkReal(0.250000000390712))+(((npy)*(sj6)*(x291)))+(((IkReal(-1.00000000000000))*(cj6)*(x291)*(x295)))+(((npz)*(x292))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x299)))+(((IkReal(-2.41309350707268e-12))*(cj4)))+(x298)+(((IkReal(-1.00000000000000))*(x295)*(x297))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x293)*(x297)))+(((IkReal(-1.00000000000000))*(cj4)*(x294)))+(((IkReal(-1.00000000000000))*(sj6)*(x296)))+(((sj4)*(x298)))+(((IkReal(-1.00000000000000))*(sj4)*(x299))));
evalcond[3]=((IkReal(-2.41309350707268e-12))+(((IkReal(-1.00000000000000))*(cj4)*(x299)))+(((IkReal(-1.00000000000000))*(x296)*(x297)))+(((cj4)*(x298)))+(((sj4)*(x294)))+(((sj6)*(x293))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=((((IKabs(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.550000000000000))*(sj3))))) != 0)?((IkReal)1/(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.550000000000000))*(sj3)))))):(IkReal)1.0e30))*(((((IkReal(1.00000000000000))*(npx)*(sj6)))+(((IkReal(1.00000000000000))*(cj6)*(npy))))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign((((((cj6)*(cj6))*((npx)*(npx))))+((((npy)*(npy))*((sj6)*(sj6))))+((npz)*(npz))+(((IkReal(-2.00000000000000))*(cj6)*(npx)*(npy)*(sj6)))));
dummyeval[0]=(((((cj6)*(cj6))*((npx)*(npx))))+((((npy)*(npy))*((sj6)*(sj6))))+((npz)*(npz))+(((IkReal(-2.00000000000000))*(cj6)*(npx)*(npy)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((sj4)*((npz)*(npz))))+(((IkReal(-2.00000000000000))*(cj6)*(npx)*(npy)*(sj4)*(sj6)))+(((sj4)*((cj6)*(cj6))*((npx)*(npx))))+(((sj4)*((npy)*(npy))*((sj6)*(sj6))))));
dummyeval[0]=((((sj4)*((npz)*(npz))))+(((IkReal(-2.00000000000000))*(cj6)*(npx)*(npy)*(sj4)*(sj6)))+(((sj4)*((cj6)*(cj6))*((npx)*(npx))))+(((sj4)*((npy)*(npy))*((sj6)*(sj6)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x300=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(npx)*(sj6))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.396550000000000))+(((IkReal(-0.0765000000000000))*(sj3)))+(((IkReal(-0.325950000000000))*(cj3)))+(pp));
evalcond[2]=x300;
evalcond[3]=x300;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign((((((cj6)*(cj6))*((npx)*(npx))))+((((npy)*(npy))*((sj6)*(sj6))))+((npz)*(npz))+(((IkReal(-2.00000000000000))*(cj6)*(npx)*(npy)*(sj6)))));
dummyeval[0]=(((((cj6)*(cj6))*((npx)*(npx))))+((((npy)*(npy))*((sj6)*(sj6))))+((npz)*(npz))+(((IkReal(-2.00000000000000))*(cj6)*(npx)*(npy)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x301=((IkReal(0.0450000000000000))*(cj3));
IkReal x302=((cj6)*(npx));
IkReal x303=((IkReal(0.550000000000000))*(cj3));
IkReal x304=((IkReal(0.550000000000000))*(sj3));
IkReal x305=((npy)*(sj6));
IkReal x306=((IkReal(0.0450000000000000))*(sj3));
IkReal x307=((sj3)*(x305));
if( IKabs(((gconst2)*(((((IkReal(-0.0450000000000000))*(npz)))+(((IkReal(-0.300000000000000))*(x302)))+(((IkReal(0.300000000000000))*(x305)))+(((x303)*(x305)))+(((IkReal(-1.00000000000000))*(x302)*(x303)))+(((IkReal(-1.00000000000000))*(x302)*(x306)))+(((x305)*(x306)))+(((npz)*(x301)))+(((IkReal(-1.00000000000000))*(npz)*(x304))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((x301)*(x302)))+(((IkReal(-1.00000000000000))*(x301)*(x305)))+(((IkReal(0.300000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x302)*(x304)))+(((IkReal(-0.0450000000000000))*(x302)))+(((IkReal(0.0450000000000000))*(x305)))+(((x304)*(x305)))+(((npz)*(x306)))+(((npz)*(x303))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst2)*(((((IkReal(-0.0450000000000000))*(npz)))+(((IkReal(-0.300000000000000))*(x302)))+(((IkReal(0.300000000000000))*(x305)))+(((x303)*(x305)))+(((IkReal(-1.00000000000000))*(x302)*(x303)))+(((IkReal(-1.00000000000000))*(x302)*(x306)))+(((x305)*(x306)))+(((npz)*(x301)))+(((IkReal(-1.00000000000000))*(npz)*(x304)))))), ((gconst2)*(((((x301)*(x302)))+(((IkReal(-1.00000000000000))*(x301)*(x305)))+(((IkReal(0.300000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x302)*(x304)))+(((IkReal(-0.0450000000000000))*(x302)))+(((IkReal(0.0450000000000000))*(x305)))+(((x304)*(x305)))+(((npz)*(x306)))+(((npz)*(x303)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x308=IKsin(j5);
IkReal x309=IKcos(j5);
IkReal x310=((npy)*(sj6));
IkReal x311=((cj6)*(npx));
IkReal x312=((IkReal(1.00000000000000))*(x308));
evalcond[0]=((IkReal(-0.300000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.550000000000000))*(cj3)))+(((x308)*(x310)))+(((npz)*(x309)))+(((IkReal(-1.00000000000000))*(x311)*(x312))));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(npz)*(x312)))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x309)*(x311)))+(((x309)*(x310)))+(((IkReal(-0.550000000000000))*(sj3))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x313=((cj6)*(npy));
IkReal x314=((npx)*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.396550000000000))+(((IkReal(-0.0765000000000000))*(sj3)))+(((IkReal(-0.325950000000000))*(cj3)))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(x313)))+(((IkReal(-1.00000000000000))*(x314))));
evalcond[3]=((x314)+(x313));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign((((((cj6)*(cj6))*((npx)*(npx))))+((((npy)*(npy))*((sj6)*(sj6))))+((npz)*(npz))+(((IkReal(-2.00000000000000))*(cj6)*(npx)*(npy)*(sj6)))));
dummyeval[0]=(((((cj6)*(cj6))*((npx)*(npx))))+((((npy)*(npy))*((sj6)*(sj6))))+((npz)*(npz))+(((IkReal(-2.00000000000000))*(cj6)*(npx)*(npy)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x315=((IkReal(0.0450000000000000))*(cj3));
IkReal x316=((IkReal(0.550000000000000))*(npz));
IkReal x317=((cj6)*(npx));
IkReal x318=((npy)*(sj6));
IkReal x319=((IkReal(0.0450000000000000))*(sj3));
IkReal x320=((sj3)*(x318));
IkReal x321=((IkReal(0.550000000000000))*(x317));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(npz)*(x315)))+(((IkReal(-0.300000000000000))*(x317)))+(((IkReal(-1.00000000000000))*(cj3)*(x321)))+(((IkReal(0.550000000000000))*(cj3)*(x318)))+(((IkReal(0.0450000000000000))*(npz)))+(((sj3)*(x316)))+(((IkReal(0.300000000000000))*(x318)))+(((x318)*(x319)))+(((IkReal(-1.00000000000000))*(x317)*(x319))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((IkReal(0.300000000000000))*(npz)))+(((IkReal(-0.550000000000000))*(x320)))+(((x315)*(x318)))+(((sj3)*(x321)))+(((npz)*(x319)))+(((IkReal(-0.0450000000000000))*(x318)))+(((IkReal(-1.00000000000000))*(x315)*(x317)))+(((cj3)*(x316)))+(((IkReal(0.0450000000000000))*(x317))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(npz)*(x315)))+(((IkReal(-0.300000000000000))*(x317)))+(((IkReal(-1.00000000000000))*(cj3)*(x321)))+(((IkReal(0.550000000000000))*(cj3)*(x318)))+(((IkReal(0.0450000000000000))*(npz)))+(((sj3)*(x316)))+(((IkReal(0.300000000000000))*(x318)))+(((x318)*(x319)))+(((IkReal(-1.00000000000000))*(x317)*(x319)))))), ((gconst3)*(((((IkReal(0.300000000000000))*(npz)))+(((IkReal(-0.550000000000000))*(x320)))+(((x315)*(x318)))+(((sj3)*(x321)))+(((npz)*(x319)))+(((IkReal(-0.0450000000000000))*(x318)))+(((IkReal(-1.00000000000000))*(x315)*(x317)))+(((cj3)*(x316)))+(((IkReal(0.0450000000000000))*(x317)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x322=IKsin(j5);
IkReal x323=IKcos(j5);
IkReal x324=((npy)*(sj6));
IkReal x325=((cj6)*(npx));
IkReal x326=((IkReal(1.00000000000000))*(x322));
evalcond[0]=((IkReal(-0.300000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((x322)*(x324)))+(((IkReal(-0.550000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x325)*(x326)))+(((npz)*(x323))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x323)*(x325)))+(((x323)*(x324)))+(((IkReal(-1.00000000000000))*(npz)*(x326)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.550000000000000))*(sj3))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x327=((npz)*(sj4));
IkReal x328=((IkReal(0.550000000000000))*(cj3));
IkReal x329=((IkReal(0.0450000000000000))*(sj3));
IkReal x330=((cj4)*(npx));
IkReal x331=((IkReal(1.00000000000000))*(cj4)*(cj6));
IkReal x332=((npy)*(sj4)*(sj6));
IkReal x333=((cj6)*(npx)*(sj4));
if( IKabs(((gconst1)*(((((IkReal(0.300000000000000))*(x332)))+(((IkReal(-1.00000000000000))*(npz)*(sj6)*(x330)))+(((IkReal(-1.00000000000000))*(x329)*(x333)))+(((IkReal(-1.00000000000000))*(x328)*(x333)))+(((IkReal(-0.300000000000000))*(x333)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(x331)))+(((x329)*(x332)))+(((x328)*(x332))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((x327)*(x328)))+(((x327)*(x329)))+(((cj4)*(cj6)*(sj6)*((npy)*(npy))))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(sj6)*(x330)))+(((IkReal(0.300000000000000))*(x327)))+(((npy)*(x330)*((sj6)*(sj6))))+(((IkReal(-1.00000000000000))*(npy)*(x330)*((cj6)*(cj6)))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst1)*(((((IkReal(0.300000000000000))*(x332)))+(((IkReal(-1.00000000000000))*(npz)*(sj6)*(x330)))+(((IkReal(-1.00000000000000))*(x329)*(x333)))+(((IkReal(-1.00000000000000))*(x328)*(x333)))+(((IkReal(-0.300000000000000))*(x333)))+(((IkReal(-1.00000000000000))*(npy)*(npz)*(x331)))+(((x329)*(x332)))+(((x328)*(x332)))))), ((gconst1)*(((((x327)*(x328)))+(((x327)*(x329)))+(((cj4)*(cj6)*(sj6)*((npy)*(npy))))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(sj6)*(x330)))+(((IkReal(0.300000000000000))*(x327)))+(((npy)*(x330)*((sj6)*(sj6))))+(((IkReal(-1.00000000000000))*(npy)*(x330)*((cj6)*(cj6))))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x334=IKsin(j5);
IkReal x335=IKcos(j5);
IkReal x336=((IkReal(0.0450000000000000))*(cj3));
IkReal x337=((IkReal(0.550000000000000))*(sj3));
IkReal x338=((IkReal(1.00000000000000))*(cj6));
IkReal x339=((npx)*(sj4));
IkReal x340=((cj4)*(npx));
IkReal x341=((npy)*(sj6)*(x335));
IkReal x342=((IkReal(1.00000000000000))*(npz)*(x334));
evalcond[0]=((IkReal(-0.300000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.550000000000000))*(cj3)))+(((npy)*(sj6)*(x334)))+(((IkReal(-1.00000000000000))*(npx)*(x334)*(x338)))+(((npz)*(x335))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj4)*(x337)))+(x341)+(((IkReal(-0.0450000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(npx)*(x335)*(x338)))+(((cj4)*(x336)))+(((IkReal(-1.00000000000000))*(x342))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj4)*(npy)*(x338)))+(((IkReal(-1.00000000000000))*(sj6)*(x340)))+(((IkReal(-1.00000000000000))*(x335)*(x338)*(x339)))+(((IkReal(-1.00000000000000))*(sj4)*(x342)))+(((sj4)*(x341))));
evalcond[3]=((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(cj4)*(x342)))+(((IkReal(-1.00000000000000))*(x335)*(x338)*(x340)))+(x336)+(((cj4)*(x341)))+(((cj6)*(npy)*(sj4)))+(((IkReal(-1.00000000000000))*(x337)))+(((sj6)*(x339))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x343=((IkReal(0.550000000000000))*(cj3));
IkReal x344=((cj6)*(npx));
IkReal x345=((npy)*(sj6));
IkReal x346=((IkReal(0.0450000000000000))*(sj3));
IkReal x347=((IkReal(0.0450000000000000))*(cj4));
IkReal x348=((IkReal(0.0450000000000000))*(x345));
IkReal x349=((npz)*(x347));
IkReal x350=((IkReal(0.550000000000000))*(cj4)*(sj3));
if( IKabs(((gconst0)*(((((IkReal(-0.300000000000000))*(x344)))+(((IkReal(0.300000000000000))*(x345)))+(((IkReal(-1.00000000000000))*(npz)*(x350)))+(((x345)*(x346)))+(((IkReal(-1.00000000000000))*(x344)*(x346)))+(((IkReal(-1.00000000000000))*(x343)*(x344)))+(((IkReal(-1.00000000000000))*(x349)))+(((x343)*(x345)))+(((cj3)*(x349))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((x345)*(x350)))+(((IkReal(0.300000000000000))*(npz)))+(((x345)*(x347)))+(((IkReal(-1.00000000000000))*(x344)*(x347)))+(((cj3)*(x344)*(x347)))+(((IkReal(-1.00000000000000))*(x344)*(x350)))+(((npz)*(x343)))+(((npz)*(x346)))+(((IkReal(-1.00000000000000))*(cj3)*(x345)*(x347))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst0)*(((((IkReal(-0.300000000000000))*(x344)))+(((IkReal(0.300000000000000))*(x345)))+(((IkReal(-1.00000000000000))*(npz)*(x350)))+(((x345)*(x346)))+(((IkReal(-1.00000000000000))*(x344)*(x346)))+(((IkReal(-1.00000000000000))*(x343)*(x344)))+(((IkReal(-1.00000000000000))*(x349)))+(((x343)*(x345)))+(((cj3)*(x349)))))), ((gconst0)*(((((x345)*(x350)))+(((IkReal(0.300000000000000))*(npz)))+(((x345)*(x347)))+(((IkReal(-1.00000000000000))*(x344)*(x347)))+(((cj3)*(x344)*(x347)))+(((IkReal(-1.00000000000000))*(x344)*(x350)))+(((npz)*(x343)))+(((npz)*(x346)))+(((IkReal(-1.00000000000000))*(cj3)*(x345)*(x347)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x351=IKsin(j5);
IkReal x352=IKcos(j5);
IkReal x353=((IkReal(0.0450000000000000))*(cj3));
IkReal x354=((IkReal(0.550000000000000))*(sj3));
IkReal x355=((IkReal(1.00000000000000))*(cj6));
IkReal x356=((npx)*(sj4));
IkReal x357=((cj4)*(npx));
IkReal x358=((npy)*(sj6)*(x352));
IkReal x359=((IkReal(1.00000000000000))*(npz)*(x351));
evalcond[0]=((IkReal(-0.300000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(npx)*(x351)*(x355)))+(((IkReal(-0.550000000000000))*(cj3)))+(((npy)*(sj6)*(x351)))+(((npz)*(x352))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x359)))+(((cj4)*(x353)))+(x358)+(((IkReal(-0.0450000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(cj4)*(x354)))+(((IkReal(-1.00000000000000))*(npx)*(x352)*(x355))));
evalcond[2]=((((sj4)*(x358)))+(((IkReal(-1.00000000000000))*(x352)*(x355)*(x356)))+(((IkReal(-1.00000000000000))*(sj6)*(x357)))+(((IkReal(-1.00000000000000))*(cj4)*(npy)*(x355)))+(((IkReal(-1.00000000000000))*(sj4)*(x359))));
evalcond[3]=((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x354)))+(((cj4)*(x358)))+(x353)+(((IkReal(-1.00000000000000))*(x352)*(x355)*(x357)))+(((cj6)*(npy)*(sj4)))+(((sj6)*(x356)))+(((IkReal(-1.00000000000000))*(cj4)*(x359))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x360=((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6))));
if( IKabs(npz) < IKFAST_ATAN2_MAGTHRESH && IKabs(x360) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x361=((IkReal(1.00000000000000))*(IKatan2(npz, x360)));
if( ((((x360)*(x360))+((npz)*(npz)))) < (IkReal)-0.00001 )
    continue;
if( (((IkReal(-1.00000000000000))*(((IKabs(IKabs(IKsqrt((((x360)*(x360))+((npz)*(npz)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x360)*(x360))+((npz)*(npz))))))):(IkReal)1.0e30))*(((IkReal(-0.300000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.550000000000000))*(cj3))))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(-1.00000000000000))*(((IKabs(IKabs(IKsqrt((((x360)*(x360))+((npz)*(npz)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x360)*(x360))+((npz)*(npz))))))):(IkReal)1.0e30))*(((IkReal(-0.300000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.550000000000000))*(cj3))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x362=((IkReal(-1.00000000000000))*(IKasin(((IkReal(-1.00000000000000))*(((IKabs(IKabs(IKsqrt((((x360)*(x360))+((npz)*(npz)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x360)*(x360))+((npz)*(npz))))))):(IkReal)1.0e30))*(((IkReal(-0.300000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.550000000000000))*(cj3)))))))));
j5array[0]=((((IkReal(-1.00000000000000))*(x362)))+(((IkReal(-1.00000000000000))*(x361))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x361)))+(((IkReal(1.00000000000000))*(x362))));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.550000000000000))*(sj3)))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(12.2222222222222))*(sj3)))+(((IkReal(-1.00000000000000))*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x363=((IkReal(12.2222222222222))*(sj3));
IkReal x364=((npx)*(sj6));
IkReal x365=((cj6)*(npy));
dummyeval[0]=((IkReal(1.00000000000000))+(x363)+(((IkReal(-1.00000000000000))*(cj3))));
dummyeval[1]=((((IkReal(-1.00000000000000))*(x364)))+(((IkReal(-1.00000000000000))*(x365)))+(((IkReal(-1.00000000000000))*(x363)*(x365)))+(((IkReal(-1.00000000000000))*(x363)*(x364)))+(((cj3)*(x365)))+(((cj3)*(x364))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x366=((npz)*(sj5));
IkReal x367=((IkReal(12.2222222222222))*(sj3));
IkReal x368=((IkReal(1.00000000000000))*(cj3));
IkReal x369=((cj5)*(npy)*(sj6));
IkReal x370=((cj5)*(cj6)*(npx));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x368)))+(x367));
dummyeval[1]=((((IkReal(-1.00000000000000))*(x370)))+(((IkReal(-1.00000000000000))*(x366)))+(((IkReal(-1.00000000000000))*(x367)*(x370)))+(x369)+(((IkReal(-1.00000000000000))*(x366)*(x367)))+(((cj3)*(x370)))+(((cj3)*(x366)))+(((x367)*(x369)))+(((IkReal(-1.00000000000000))*(x368)*(x369))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x371=((IkReal(1.00000000000000))*(sj5));
IkReal x372=((IkReal(1.00000000000000))*(cj6));
IkReal x373=((npy)*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.722500000000000))+(pp));
evalcond[2]=((IkReal(-0.850000000000000))+(((sj5)*(x373)))+(((cj5)*(npz)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(x371))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npx)*(sj6)))+(((IkReal(-1.00000000000000))*(npy)*(x372))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj5)*(npx)*(x372)))+(((cj5)*(x373)))+(((IkReal(-1.00000000000000))*(npz)*(x371))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x374=IKatan2(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))), ((((cj6)*(npy)))+(((npx)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x374));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x374))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x375=IKsin(j4);
IkReal x376=IKcos(j4);
IkReal x377=((IkReal(1.00000000000000))*(x376));
IkReal x378=((IkReal(1.00000000000000))*(x375));
evalcond[0]=((((IkReal(-1.00000000000000))*(npz)*(sj5)*(x378)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)*(x378)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x377)))+(((cj5)*(npy)*(sj6)*(x375)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x377))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x379=((IkReal(1.00000000000000))*(sj5));
IkReal x380=((IkReal(1.00000000000000))*(cj6));
IkReal x381=((npy)*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.722500000000000))+(pp));
evalcond[2]=((IkReal(-0.850000000000000))+(((sj5)*(x381)))+(((cj5)*(npz)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(x379))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npy)*(x380)))+(((IkReal(-1.00000000000000))*(npx)*(sj6))));
evalcond[4]=((((cj5)*(x381)))+(((IkReal(-1.00000000000000))*(cj5)*(npx)*(x380)))+(((IkReal(-1.00000000000000))*(npz)*(x379))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x382=IKatan2(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))), ((((cj6)*(npy)))+(((npx)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x382));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x382))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x383=IKsin(j4);
IkReal x384=IKcos(j4);
IkReal x385=((IkReal(1.00000000000000))*(x384));
IkReal x386=((IkReal(1.00000000000000))*(x383));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)*(x386)))+(((IkReal(-1.00000000000000))*(npz)*(sj5)*(x386)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x385)))+(((cj5)*(npy)*(sj6)*(x383)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x385))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(-0.163272684258140))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0624999997657902))+(pp));
evalcond[2]=((IkReal(0.250000000390712))+(((npy)*(sj5)*(sj6)))+(((cj5)*(npz)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x387=((IkReal(414405822679.079))*(cj5));
if( IKabs(((((IkReal(414405822679.079))*(npx)*(sj6)))+(((IkReal(414405822679.079))*(cj6)*(npy))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-414405822679.079))*(npz)*(sj5)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(x387)))+(((npy)*(sj6)*(x387))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(414405822679.079))*(npx)*(sj6)))+(((IkReal(414405822679.079))*(cj6)*(npy)))))+IKsqr(((((IkReal(-414405822679.079))*(npz)*(sj5)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(x387)))+(((npy)*(sj6)*(x387)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(414405822679.079))*(npx)*(sj6)))+(((IkReal(414405822679.079))*(cj6)*(npy)))), ((((IkReal(-414405822679.079))*(npz)*(sj5)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(x387)))+(((npy)*(sj6)*(x387)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x388=IKsin(j4);
IkReal x389=IKcos(j4);
IkReal x390=((IkReal(1.00000000000000))*(cj6));
IkReal x391=((cj5)*(sj6));
IkReal x392=((cj5)*(npx));
IkReal x393=((IkReal(1.00000000000000))*(npz)*(sj5));
IkReal x394=((npx)*(x388));
IkReal x395=((IkReal(1.00000000000000))*(npx)*(sj6));
IkReal x396=((npy)*(x388));
IkReal x397=((npy)*(x389));
evalcond[0]=((((IkReal(-1.00000000000000))*(x395)))+(((IkReal(2.41309350707268e-12))*(x388)))+(((IkReal(-1.00000000000000))*(npy)*(x390))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x393)))+(((IkReal(-2.41309350707268e-12))*(x389)))+(((npy)*(x391)))+(((IkReal(-1.00000000000000))*(x390)*(x392))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x389)*(x395)))+(((IkReal(-1.00000000000000))*(x388)*(x393)))+(((x391)*(x396)))+(((IkReal(-1.00000000000000))*(x390)*(x397)))+(((IkReal(-1.00000000000000))*(x388)*(x390)*(x392))));
evalcond[3]=((IkReal(-2.41309350707268e-12))+(((IkReal(-1.00000000000000))*(x389)*(x393)))+(((sj6)*(x394)))+(((x391)*(x397)))+(((IkReal(-1.00000000000000))*(x389)*(x390)*(x392)))+(((cj6)*(x396))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x398=((cj6)*(npx));
IkReal x399=((npy)*(sj6));
IkReal x400=((IkReal(0.0450000000000000))*(cj3));
IkReal x401=((IkReal(0.0495000000000000))*(sj3));
IkReal x402=((npz)*(sj5));
IkReal x403=((IkReal(0.550000000000000))*(sj3));
IkReal x404=((IkReal(0.0450000000000000))*(cj5));
IkReal x405=((cj5)*(x403));
if( IKabs(((((IKabs(((IkReal(0.0450000000000000))+(x403)+(((IkReal(-1.00000000000000))*(x400))))) != 0)?((IkReal)1/(((IkReal(0.0450000000000000))+(x403)+(((IkReal(-1.00000000000000))*(x400)))))):(IkReal)1.0e30))*(((((cj6)*(npy)))+(((npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-0.0450000000000000))*(x402)))+(((IkReal(-1.00000000000000))*(x402)*(x403)))+(((IkReal(-1.00000000000000))*(x398)*(x404)))+(((IkReal(-1.00000000000000))*(x398)*(x405)))+(((IkReal(-1.00000000000000))*(cj5)*(x399)*(x400)))+(((x399)*(x405)))+(((x399)*(x404)))+(((x400)*(x402)))+(((cj5)*(x398)*(x400))))) != 0)?((IkReal)1/(((((IkReal(-0.0450000000000000))*(x402)))+(((IkReal(-1.00000000000000))*(x402)*(x403)))+(((IkReal(-1.00000000000000))*(x398)*(x404)))+(((IkReal(-1.00000000000000))*(x398)*(x405)))+(((IkReal(-1.00000000000000))*(cj5)*(x399)*(x400)))+(((x399)*(x405)))+(((x399)*(x404)))+(((x400)*(x402)))+(((cj5)*(x398)*(x400)))))):(IkReal)1.0e30))*(((IkReal(0.00202500000000000))+(((IkReal(-1.00000000000000))*((npx)*(npx))*((sj6)*(sj6))))+(((IkReal(-2.00000000000000))*(x398)*(x399)))+(((IkReal(-1.00000000000000))*(cj3)*(x401)))+(((IkReal(-0.00405000000000000))*(cj3)))+(((IkReal(0.302500000000000))*((sj3)*(sj3))))+(((IkReal(-1.00000000000000))*((cj6)*(cj6))*((npy)*(npy))))+(x401)+(((IkReal(0.00202500000000000))*((cj3)*(cj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((IkReal(0.0450000000000000))+(x403)+(((IkReal(-1.00000000000000))*(x400))))) != 0)?((IkReal)1/(((IkReal(0.0450000000000000))+(x403)+(((IkReal(-1.00000000000000))*(x400)))))):(IkReal)1.0e30))*(((((cj6)*(npy)))+(((npx)*(sj6)))))))+IKsqr(((((IKabs(((((IkReal(-0.0450000000000000))*(x402)))+(((IkReal(-1.00000000000000))*(x402)*(x403)))+(((IkReal(-1.00000000000000))*(x398)*(x404)))+(((IkReal(-1.00000000000000))*(x398)*(x405)))+(((IkReal(-1.00000000000000))*(cj5)*(x399)*(x400)))+(((x399)*(x405)))+(((x399)*(x404)))+(((x400)*(x402)))+(((cj5)*(x398)*(x400))))) != 0)?((IkReal)1/(((((IkReal(-0.0450000000000000))*(x402)))+(((IkReal(-1.00000000000000))*(x402)*(x403)))+(((IkReal(-1.00000000000000))*(x398)*(x404)))+(((IkReal(-1.00000000000000))*(x398)*(x405)))+(((IkReal(-1.00000000000000))*(cj5)*(x399)*(x400)))+(((x399)*(x405)))+(((x399)*(x404)))+(((x400)*(x402)))+(((cj5)*(x398)*(x400)))))):(IkReal)1.0e30))*(((IkReal(0.00202500000000000))+(((IkReal(-1.00000000000000))*((npx)*(npx))*((sj6)*(sj6))))+(((IkReal(-2.00000000000000))*(x398)*(x399)))+(((IkReal(-1.00000000000000))*(cj3)*(x401)))+(((IkReal(-0.00405000000000000))*(cj3)))+(((IkReal(0.302500000000000))*((sj3)*(sj3))))+(((IkReal(-1.00000000000000))*((cj6)*(cj6))*((npy)*(npy))))+(x401)+(((IkReal(0.00202500000000000))*((cj3)*(cj3))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((IkReal(0.0450000000000000))+(x403)+(((IkReal(-1.00000000000000))*(x400))))) != 0)?((IkReal)1/(((IkReal(0.0450000000000000))+(x403)+(((IkReal(-1.00000000000000))*(x400)))))):(IkReal)1.0e30))*(((((cj6)*(npy)))+(((npx)*(sj6)))))), ((((IKabs(((((IkReal(-0.0450000000000000))*(x402)))+(((IkReal(-1.00000000000000))*(x402)*(x403)))+(((IkReal(-1.00000000000000))*(x398)*(x404)))+(((IkReal(-1.00000000000000))*(x398)*(x405)))+(((IkReal(-1.00000000000000))*(cj5)*(x399)*(x400)))+(((x399)*(x405)))+(((x399)*(x404)))+(((x400)*(x402)))+(((cj5)*(x398)*(x400))))) != 0)?((IkReal)1/(((((IkReal(-0.0450000000000000))*(x402)))+(((IkReal(-1.00000000000000))*(x402)*(x403)))+(((IkReal(-1.00000000000000))*(x398)*(x404)))+(((IkReal(-1.00000000000000))*(x398)*(x405)))+(((IkReal(-1.00000000000000))*(cj5)*(x399)*(x400)))+(((x399)*(x405)))+(((x399)*(x404)))+(((x400)*(x402)))+(((cj5)*(x398)*(x400)))))):(IkReal)1.0e30))*(((IkReal(0.00202500000000000))+(((IkReal(-1.00000000000000))*((npx)*(npx))*((sj6)*(sj6))))+(((IkReal(-2.00000000000000))*(x398)*(x399)))+(((IkReal(-1.00000000000000))*(cj3)*(x401)))+(((IkReal(-0.00405000000000000))*(cj3)))+(((IkReal(0.302500000000000))*((sj3)*(sj3))))+(((IkReal(-1.00000000000000))*((cj6)*(cj6))*((npy)*(npy))))+(x401)+(((IkReal(0.00202500000000000))*((cj3)*(cj3))))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x406=IKsin(j4);
IkReal x407=IKcos(j4);
IkReal x408=((IkReal(0.0450000000000000))*(cj3));
IkReal x409=((IkReal(1.00000000000000))*(cj6));
IkReal x410=((cj5)*(npx));
IkReal x411=((cj5)*(sj6));
IkReal x412=((IkReal(0.550000000000000))*(sj3));
IkReal x413=((npy)*(x406));
IkReal x414=((IkReal(1.00000000000000))*(npz)*(sj5));
IkReal x415=((IkReal(1.00000000000000))*(npx)*(sj6));
IkReal x416=((npy)*(x407));
evalcond[0]=((((IkReal(0.0450000000000000))*(x406)))+(((IkReal(-1.00000000000000))*(x406)*(x408)))+(((x406)*(x412)))+(((IkReal(-1.00000000000000))*(npy)*(x409)))+(((IkReal(-1.00000000000000))*(x415))));
evalcond[1]=((((x407)*(x408)))+(((IkReal(-0.0450000000000000))*(x407)))+(((npy)*(x411)))+(((IkReal(-1.00000000000000))*(x407)*(x412)))+(((IkReal(-1.00000000000000))*(x414)))+(((IkReal(-1.00000000000000))*(x409)*(x410))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x406)*(x414)))+(((x411)*(x413)))+(((IkReal(-1.00000000000000))*(x406)*(x409)*(x410)))+(((IkReal(-1.00000000000000))*(x407)*(x415)))+(((IkReal(-1.00000000000000))*(x409)*(x416))));
evalcond[3]=((IkReal(-0.0450000000000000))+(((cj6)*(x413)))+(((x411)*(x416)))+(((IkReal(-1.00000000000000))*(x407)*(x409)*(x410)))+(x408)+(((IkReal(-1.00000000000000))*(x407)*(x414)))+(((IkReal(-1.00000000000000))*(x412)))+(((npx)*(sj6)*(x406))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x417=((IkReal(0.0450000000000000))*(cj3));
IkReal x418=((npx)*(sj6));
IkReal x419=((IkReal(0.550000000000000))*(sj3));
IkReal x420=((cj6)*(npy));
IkReal x421=((npz)*(sj5));
IkReal x422=((cj5)*(npx)*(npy));
IkReal x423=((cj5)*(cj6)*(sj6));
if( IKabs(((((IKabs(((IkReal(0.0450000000000000))+(x419)+(((IkReal(-1.00000000000000))*(x417))))) != 0)?((IkReal)1/(((IkReal(0.0450000000000000))+(x419)+(((IkReal(-1.00000000000000))*(x417)))))):(IkReal)1.0e30))*(((x418)+(x420))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x418)*(x419)))+(((IkReal(-0.0450000000000000))*(x418)))+(((IkReal(-0.0450000000000000))*(x420)))+(((x417)*(x418)))+(((IkReal(-1.00000000000000))*(x419)*(x420)))+(((x417)*(x420))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x418)*(x419)))+(((IkReal(-0.0450000000000000))*(x418)))+(((IkReal(-0.0450000000000000))*(x420)))+(((x417)*(x418)))+(((IkReal(-1.00000000000000))*(x419)*(x420)))+(((x417)*(x420)))))):(IkReal)1.0e30))*(((((x420)*(x421)))+(((cj5)*(cj6)*(npx)*(x418)))+(((x418)*(x421)))+(((IkReal(-1.00000000000000))*(cj5)*(npy)*(sj6)*(x420)))+(((cj5)*(cj6)*(npx)*(x420)))+(((IkReal(-1.00000000000000))*(cj5)*(npy)*(sj6)*(x418))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((IkReal(0.0450000000000000))+(x419)+(((IkReal(-1.00000000000000))*(x417))))) != 0)?((IkReal)1/(((IkReal(0.0450000000000000))+(x419)+(((IkReal(-1.00000000000000))*(x417)))))):(IkReal)1.0e30))*(((x418)+(x420)))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x418)*(x419)))+(((IkReal(-0.0450000000000000))*(x418)))+(((IkReal(-0.0450000000000000))*(x420)))+(((x417)*(x418)))+(((IkReal(-1.00000000000000))*(x419)*(x420)))+(((x417)*(x420))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x418)*(x419)))+(((IkReal(-0.0450000000000000))*(x418)))+(((IkReal(-0.0450000000000000))*(x420)))+(((x417)*(x418)))+(((IkReal(-1.00000000000000))*(x419)*(x420)))+(((x417)*(x420)))))):(IkReal)1.0e30))*(((((x420)*(x421)))+(((cj5)*(cj6)*(npx)*(x418)))+(((x418)*(x421)))+(((IkReal(-1.00000000000000))*(cj5)*(npy)*(sj6)*(x420)))+(((cj5)*(cj6)*(npx)*(x420)))+(((IkReal(-1.00000000000000))*(cj5)*(npy)*(sj6)*(x418)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((IkReal(0.0450000000000000))+(x419)+(((IkReal(-1.00000000000000))*(x417))))) != 0)?((IkReal)1/(((IkReal(0.0450000000000000))+(x419)+(((IkReal(-1.00000000000000))*(x417)))))):(IkReal)1.0e30))*(((x418)+(x420)))), ((((IKabs(((((IkReal(-1.00000000000000))*(x418)*(x419)))+(((IkReal(-0.0450000000000000))*(x418)))+(((IkReal(-0.0450000000000000))*(x420)))+(((x417)*(x418)))+(((IkReal(-1.00000000000000))*(x419)*(x420)))+(((x417)*(x420))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x418)*(x419)))+(((IkReal(-0.0450000000000000))*(x418)))+(((IkReal(-0.0450000000000000))*(x420)))+(((x417)*(x418)))+(((IkReal(-1.00000000000000))*(x419)*(x420)))+(((x417)*(x420)))))):(IkReal)1.0e30))*(((((x420)*(x421)))+(((cj5)*(cj6)*(npx)*(x418)))+(((x418)*(x421)))+(((IkReal(-1.00000000000000))*(cj5)*(npy)*(sj6)*(x420)))+(((cj5)*(cj6)*(npx)*(x420)))+(((IkReal(-1.00000000000000))*(cj5)*(npy)*(sj6)*(x418)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x424=IKsin(j4);
IkReal x425=IKcos(j4);
IkReal x426=((IkReal(0.0450000000000000))*(cj3));
IkReal x427=((IkReal(1.00000000000000))*(cj6));
IkReal x428=((cj5)*(npx));
IkReal x429=((cj5)*(sj6));
IkReal x430=((IkReal(0.550000000000000))*(sj3));
IkReal x431=((npy)*(x424));
IkReal x432=((IkReal(1.00000000000000))*(npz)*(sj5));
IkReal x433=((IkReal(1.00000000000000))*(npx)*(sj6));
IkReal x434=((npy)*(x425));
evalcond[0]=((((x424)*(x430)))+(((IkReal(-1.00000000000000))*(x433)))+(((IkReal(-1.00000000000000))*(npy)*(x427)))+(((IkReal(-1.00000000000000))*(x424)*(x426)))+(((IkReal(0.0450000000000000))*(x424))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x432)))+(((x425)*(x426)))+(((IkReal(-1.00000000000000))*(x427)*(x428)))+(((npy)*(x429)))+(((IkReal(-0.0450000000000000))*(x425)))+(((IkReal(-1.00000000000000))*(x425)*(x430))));
evalcond[2]=((((x429)*(x431)))+(((IkReal(-1.00000000000000))*(x427)*(x434)))+(((IkReal(-1.00000000000000))*(x424)*(x432)))+(((IkReal(-1.00000000000000))*(x425)*(x433)))+(((IkReal(-1.00000000000000))*(x424)*(x427)*(x428))));
evalcond[3]=((IkReal(-0.0450000000000000))+(((x429)*(x434)))+(((IkReal(-1.00000000000000))*(x430)))+(((npx)*(sj6)*(x424)))+(x426)+(((cj6)*(x431)))+(((IkReal(-1.00000000000000))*(x425)*(x432)))+(((IkReal(-1.00000000000000))*(x425)*(x427)*(x428))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst4)*(((((cj6)*(npy)))+(((npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst4)*(((((cj6)*(npy)))+(((npx)*(sj6)))))), ((gconst4)*(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x435=IKsin(j4);
IkReal x436=IKcos(j4);
IkReal x437=((IkReal(0.0450000000000000))*(cj3));
IkReal x438=((IkReal(1.00000000000000))*(cj6));
IkReal x439=((cj5)*(npx));
IkReal x440=((cj5)*(sj6));
IkReal x441=((IkReal(0.550000000000000))*(sj3));
IkReal x442=((npy)*(x435));
IkReal x443=((IkReal(1.00000000000000))*(npz)*(sj5));
IkReal x444=((IkReal(1.00000000000000))*(npx)*(sj6));
IkReal x445=((npy)*(x436));
evalcond[0]=((((x435)*(x441)))+(((IkReal(-1.00000000000000))*(x444)))+(((IkReal(-1.00000000000000))*(x435)*(x437)))+(((IkReal(-1.00000000000000))*(npy)*(x438)))+(((IkReal(0.0450000000000000))*(x435))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x443)))+(((x436)*(x437)))+(((IkReal(-1.00000000000000))*(x438)*(x439)))+(((IkReal(-0.0450000000000000))*(x436)))+(((npy)*(x440)))+(((IkReal(-1.00000000000000))*(x436)*(x441))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x438)*(x445)))+(((IkReal(-1.00000000000000))*(x435)*(x443)))+(((x440)*(x442)))+(((IkReal(-1.00000000000000))*(x436)*(x444)))+(((IkReal(-1.00000000000000))*(x435)*(x438)*(x439))));
evalcond[3]=((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x441)))+(((npx)*(sj6)*(x435)))+(((x440)*(x445)))+(((IkReal(-1.00000000000000))*(x436)*(x443)))+(x437)+(((IkReal(-1.00000000000000))*(x436)*(x438)*(x439)))+(((cj6)*(x442))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x446=((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6))));
if( IKabs(npz) < IKFAST_ATAN2_MAGTHRESH && IKabs(x446) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x447=((IkReal(1.00000000000000))*(IKatan2(npz, x446)));
if( ((((x446)*(x446))+((npz)*(npz)))) < (IkReal)-0.00001 )
    continue;
if( (((IkReal(-1.00000000000000))*(((IKabs(IKabs(IKsqrt((((x446)*(x446))+((npz)*(npz)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x446)*(x446))+((npz)*(npz))))))):(IkReal)1.0e30))*(((IkReal(-0.300000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.550000000000000))*(cj3))))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(-1.00000000000000))*(((IKabs(IKabs(IKsqrt((((x446)*(x446))+((npz)*(npz)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x446)*(x446))+((npz)*(npz))))))):(IkReal)1.0e30))*(((IkReal(-0.300000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.550000000000000))*(cj3))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x448=((IkReal(-1.00000000000000))*(IKasin(((IkReal(-1.00000000000000))*(((IKabs(IKabs(IKsqrt((((x446)*(x446))+((npz)*(npz)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x446)*(x446))+((npz)*(npz))))))):(IkReal)1.0e30))*(((IkReal(-0.300000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.550000000000000))*(cj3)))))))));
j5array[0]=((((IkReal(-1.00000000000000))*(x448)))+(((IkReal(-1.00000000000000))*(x447))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x447)))+(((IkReal(1.00000000000000))*(x448))));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.550000000000000))*(sj3)))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(12.2222222222222))*(sj3)))+(((IkReal(-1.00000000000000))*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x449=((IkReal(12.2222222222222))*(sj3));
IkReal x450=((npx)*(sj6));
IkReal x451=((cj6)*(npy));
dummyeval[0]=((IkReal(1.00000000000000))+(x449)+(((IkReal(-1.00000000000000))*(cj3))));
dummyeval[1]=((((IkReal(-1.00000000000000))*(x450)))+(((IkReal(-1.00000000000000))*(x451)))+(((cj3)*(x451)))+(((cj3)*(x450)))+(((IkReal(-1.00000000000000))*(x449)*(x450)))+(((IkReal(-1.00000000000000))*(x449)*(x451))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x452=((npz)*(sj5));
IkReal x453=((IkReal(12.2222222222222))*(sj3));
IkReal x454=((IkReal(1.00000000000000))*(cj3));
IkReal x455=((cj5)*(npy)*(sj6));
IkReal x456=((cj5)*(cj6)*(npx));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x454)))+(x453));
dummyeval[1]=((((x453)*(x455)))+(((IkReal(-1.00000000000000))*(x452)))+(((IkReal(-1.00000000000000))*(x456)))+(((cj3)*(x456)))+(((cj3)*(x452)))+(((IkReal(-1.00000000000000))*(x454)*(x455)))+(x455)+(((IkReal(-1.00000000000000))*(x452)*(x453)))+(((IkReal(-1.00000000000000))*(x453)*(x456))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x457=((IkReal(1.00000000000000))*(sj5));
IkReal x458=((IkReal(1.00000000000000))*(cj6));
IkReal x459=((npy)*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.722500000000000))+(pp));
evalcond[2]=((IkReal(-0.850000000000000))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(x457)))+(((cj5)*(npz)))+(((sj5)*(x459))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npx)*(sj6)))+(((IkReal(-1.00000000000000))*(npy)*(x458))));
evalcond[4]=((((cj5)*(x459)))+(((IkReal(-1.00000000000000))*(npz)*(x457)))+(((IkReal(-1.00000000000000))*(cj5)*(npx)*(x458))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x460=IKatan2(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))), ((((cj6)*(npy)))+(((npx)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x460));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x460))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x461=IKsin(j4);
IkReal x462=IKcos(j4);
IkReal x463=((IkReal(1.00000000000000))*(x462));
IkReal x464=((IkReal(1.00000000000000))*(x461));
evalcond[0]=((((IkReal(-1.00000000000000))*(npz)*(sj5)*(x464)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x463)))+(((cj5)*(npy)*(sj6)*(x461)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x463)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)*(x464))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x465=((IkReal(1.00000000000000))*(sj5));
IkReal x466=((IkReal(1.00000000000000))*(cj6));
IkReal x467=((npy)*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.722500000000000))+(pp));
evalcond[2]=((IkReal(-0.850000000000000))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(x465)))+(((cj5)*(npz)))+(((sj5)*(x467))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npx)*(sj6)))+(((IkReal(-1.00000000000000))*(npy)*(x466))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj5)*(npx)*(x466)))+(((cj5)*(x467)))+(((IkReal(-1.00000000000000))*(npz)*(x465))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x468=IKatan2(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))), ((((cj6)*(npy)))+(((npx)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x468));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x468))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x469=IKsin(j4);
IkReal x470=IKcos(j4);
IkReal x471=((IkReal(1.00000000000000))*(x470));
IkReal x472=((IkReal(1.00000000000000))*(x469));
evalcond[0]=((((IkReal(-1.00000000000000))*(npz)*(sj5)*(x472)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x471)))+(((cj5)*(npy)*(sj6)*(x469)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)*(x472)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x471))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(-0.163272684258140))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0624999997657902))+(pp));
evalcond[2]=((IkReal(0.250000000390712))+(((npy)*(sj5)*(sj6)))+(((cj5)*(npz)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x473=((IkReal(414405822679.079))*(cj5));
if( IKabs(((((IkReal(414405822679.079))*(npx)*(sj6)))+(((IkReal(414405822679.079))*(cj6)*(npy))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-414405822679.079))*(npz)*(sj5)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(x473)))+(((npy)*(sj6)*(x473))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(414405822679.079))*(npx)*(sj6)))+(((IkReal(414405822679.079))*(cj6)*(npy)))))+IKsqr(((((IkReal(-414405822679.079))*(npz)*(sj5)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(x473)))+(((npy)*(sj6)*(x473)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(414405822679.079))*(npx)*(sj6)))+(((IkReal(414405822679.079))*(cj6)*(npy)))), ((((IkReal(-414405822679.079))*(npz)*(sj5)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(x473)))+(((npy)*(sj6)*(x473)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x474=IKsin(j4);
IkReal x475=IKcos(j4);
IkReal x476=((IkReal(1.00000000000000))*(cj6));
IkReal x477=((cj5)*(sj6));
IkReal x478=((cj5)*(npx));
IkReal x479=((IkReal(1.00000000000000))*(npz)*(sj5));
IkReal x480=((npx)*(x474));
IkReal x481=((IkReal(1.00000000000000))*(npx)*(sj6));
IkReal x482=((npy)*(x474));
IkReal x483=((npy)*(x475));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x476)))+(((IkReal(-1.00000000000000))*(x481)))+(((IkReal(2.41309350707268e-12))*(x474))));
evalcond[1]=((((npy)*(x477)))+(((IkReal(-1.00000000000000))*(x476)*(x478)))+(((IkReal(-1.00000000000000))*(x479)))+(((IkReal(-2.41309350707268e-12))*(x475))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x474)*(x476)*(x478)))+(((IkReal(-1.00000000000000))*(x476)*(x483)))+(((IkReal(-1.00000000000000))*(x475)*(x481)))+(((IkReal(-1.00000000000000))*(x474)*(x479)))+(((x477)*(x482))));
evalcond[3]=((IkReal(-2.41309350707268e-12))+(((sj6)*(x480)))+(((IkReal(-1.00000000000000))*(x475)*(x476)*(x478)))+(((IkReal(-1.00000000000000))*(x475)*(x479)))+(((cj6)*(x482)))+(((x477)*(x483))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x484=((cj6)*(npx));
IkReal x485=((npy)*(sj6));
IkReal x486=((IkReal(0.0450000000000000))*(cj3));
IkReal x487=((IkReal(0.0495000000000000))*(sj3));
IkReal x488=((npz)*(sj5));
IkReal x489=((IkReal(0.550000000000000))*(sj3));
IkReal x490=((IkReal(0.0450000000000000))*(cj5));
IkReal x491=((cj5)*(x489));
if( IKabs(((((IKabs(((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x486)))+(x489))) != 0)?((IkReal)1/(((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x486)))+(x489)))):(IkReal)1.0e30))*(((((cj6)*(npy)))+(((npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-0.0450000000000000))*(x488)))+(((IkReal(-1.00000000000000))*(x488)*(x489)))+(((cj5)*(x484)*(x486)))+(((IkReal(-1.00000000000000))*(cj5)*(x485)*(x486)))+(((x486)*(x488)))+(((IkReal(-1.00000000000000))*(x484)*(x491)))+(((IkReal(-1.00000000000000))*(x484)*(x490)))+(((x485)*(x490)))+(((x485)*(x491))))) != 0)?((IkReal)1/(((((IkReal(-0.0450000000000000))*(x488)))+(((IkReal(-1.00000000000000))*(x488)*(x489)))+(((cj5)*(x484)*(x486)))+(((IkReal(-1.00000000000000))*(cj5)*(x485)*(x486)))+(((x486)*(x488)))+(((IkReal(-1.00000000000000))*(x484)*(x491)))+(((IkReal(-1.00000000000000))*(x484)*(x490)))+(((x485)*(x490)))+(((x485)*(x491)))))):(IkReal)1.0e30))*(((IkReal(0.00202500000000000))+(((IkReal(-1.00000000000000))*((npx)*(npx))*((sj6)*(sj6))))+(((IkReal(-0.00405000000000000))*(cj3)))+(((IkReal(0.302500000000000))*((sj3)*(sj3))))+(((IkReal(-1.00000000000000))*((cj6)*(cj6))*((npy)*(npy))))+(((IkReal(-1.00000000000000))*(cj3)*(x487)))+(x487)+(((IkReal(0.00202500000000000))*((cj3)*(cj3))))+(((IkReal(-2.00000000000000))*(x484)*(x485))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x486)))+(x489))) != 0)?((IkReal)1/(((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x486)))+(x489)))):(IkReal)1.0e30))*(((((cj6)*(npy)))+(((npx)*(sj6)))))))+IKsqr(((((IKabs(((((IkReal(-0.0450000000000000))*(x488)))+(((IkReal(-1.00000000000000))*(x488)*(x489)))+(((cj5)*(x484)*(x486)))+(((IkReal(-1.00000000000000))*(cj5)*(x485)*(x486)))+(((x486)*(x488)))+(((IkReal(-1.00000000000000))*(x484)*(x491)))+(((IkReal(-1.00000000000000))*(x484)*(x490)))+(((x485)*(x490)))+(((x485)*(x491))))) != 0)?((IkReal)1/(((((IkReal(-0.0450000000000000))*(x488)))+(((IkReal(-1.00000000000000))*(x488)*(x489)))+(((cj5)*(x484)*(x486)))+(((IkReal(-1.00000000000000))*(cj5)*(x485)*(x486)))+(((x486)*(x488)))+(((IkReal(-1.00000000000000))*(x484)*(x491)))+(((IkReal(-1.00000000000000))*(x484)*(x490)))+(((x485)*(x490)))+(((x485)*(x491)))))):(IkReal)1.0e30))*(((IkReal(0.00202500000000000))+(((IkReal(-1.00000000000000))*((npx)*(npx))*((sj6)*(sj6))))+(((IkReal(-0.00405000000000000))*(cj3)))+(((IkReal(0.302500000000000))*((sj3)*(sj3))))+(((IkReal(-1.00000000000000))*((cj6)*(cj6))*((npy)*(npy))))+(((IkReal(-1.00000000000000))*(cj3)*(x487)))+(x487)+(((IkReal(0.00202500000000000))*((cj3)*(cj3))))+(((IkReal(-2.00000000000000))*(x484)*(x485)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x486)))+(x489))) != 0)?((IkReal)1/(((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x486)))+(x489)))):(IkReal)1.0e30))*(((((cj6)*(npy)))+(((npx)*(sj6)))))), ((((IKabs(((((IkReal(-0.0450000000000000))*(x488)))+(((IkReal(-1.00000000000000))*(x488)*(x489)))+(((cj5)*(x484)*(x486)))+(((IkReal(-1.00000000000000))*(cj5)*(x485)*(x486)))+(((x486)*(x488)))+(((IkReal(-1.00000000000000))*(x484)*(x491)))+(((IkReal(-1.00000000000000))*(x484)*(x490)))+(((x485)*(x490)))+(((x485)*(x491))))) != 0)?((IkReal)1/(((((IkReal(-0.0450000000000000))*(x488)))+(((IkReal(-1.00000000000000))*(x488)*(x489)))+(((cj5)*(x484)*(x486)))+(((IkReal(-1.00000000000000))*(cj5)*(x485)*(x486)))+(((x486)*(x488)))+(((IkReal(-1.00000000000000))*(x484)*(x491)))+(((IkReal(-1.00000000000000))*(x484)*(x490)))+(((x485)*(x490)))+(((x485)*(x491)))))):(IkReal)1.0e30))*(((IkReal(0.00202500000000000))+(((IkReal(-1.00000000000000))*((npx)*(npx))*((sj6)*(sj6))))+(((IkReal(-0.00405000000000000))*(cj3)))+(((IkReal(0.302500000000000))*((sj3)*(sj3))))+(((IkReal(-1.00000000000000))*((cj6)*(cj6))*((npy)*(npy))))+(((IkReal(-1.00000000000000))*(cj3)*(x487)))+(x487)+(((IkReal(0.00202500000000000))*((cj3)*(cj3))))+(((IkReal(-2.00000000000000))*(x484)*(x485)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x492=IKsin(j4);
IkReal x493=IKcos(j4);
IkReal x494=((IkReal(0.0450000000000000))*(cj3));
IkReal x495=((IkReal(1.00000000000000))*(cj6));
IkReal x496=((cj5)*(npx));
IkReal x497=((cj5)*(sj6));
IkReal x498=((IkReal(0.550000000000000))*(sj3));
IkReal x499=((npy)*(x492));
IkReal x500=((IkReal(1.00000000000000))*(npz)*(sj5));
IkReal x501=((IkReal(1.00000000000000))*(npx)*(sj6));
IkReal x502=((npy)*(x493));
evalcond[0]=((((IkReal(-1.00000000000000))*(x501)))+(((IkReal(0.0450000000000000))*(x492)))+(((IkReal(-1.00000000000000))*(npy)*(x495)))+(((x492)*(x498)))+(((IkReal(-1.00000000000000))*(x492)*(x494))));
evalcond[1]=((((IkReal(-0.0450000000000000))*(x493)))+(((IkReal(-1.00000000000000))*(x495)*(x496)))+(((IkReal(-1.00000000000000))*(x500)))+(((x493)*(x494)))+(((IkReal(-1.00000000000000))*(x493)*(x498)))+(((npy)*(x497))));
evalcond[2]=((((x497)*(x499)))+(((IkReal(-1.00000000000000))*(x495)*(x502)))+(((IkReal(-1.00000000000000))*(x492)*(x495)*(x496)))+(((IkReal(-1.00000000000000))*(x493)*(x501)))+(((IkReal(-1.00000000000000))*(x492)*(x500))));
evalcond[3]=((IkReal(-0.0450000000000000))+(((cj6)*(x499)))+(((IkReal(-1.00000000000000))*(x498)))+(((x497)*(x502)))+(x494)+(((IkReal(-1.00000000000000))*(x493)*(x500)))+(((npx)*(sj6)*(x492)))+(((IkReal(-1.00000000000000))*(x493)*(x495)*(x496))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x503=((IkReal(0.0450000000000000))*(cj3));
IkReal x504=((npx)*(sj6));
IkReal x505=((IkReal(0.550000000000000))*(sj3));
IkReal x506=((cj6)*(npy));
IkReal x507=((npz)*(sj5));
IkReal x508=((cj5)*(npx)*(npy));
IkReal x509=((cj5)*(cj6)*(sj6));
if( IKabs(((((IKabs(((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x503)))+(x505))) != 0)?((IkReal)1/(((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x503)))+(x505)))):(IkReal)1.0e30))*(((x504)+(x506))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x505)*(x506)))+(((x503)*(x504)))+(((x503)*(x506)))+(((IkReal(-1.00000000000000))*(x504)*(x505)))+(((IkReal(-0.0450000000000000))*(x504)))+(((IkReal(-0.0450000000000000))*(x506))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x505)*(x506)))+(((x503)*(x504)))+(((x503)*(x506)))+(((IkReal(-1.00000000000000))*(x504)*(x505)))+(((IkReal(-0.0450000000000000))*(x504)))+(((IkReal(-0.0450000000000000))*(x506)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj5)*(npy)*(sj6)*(x504)))+(((IkReal(-1.00000000000000))*(cj5)*(npy)*(sj6)*(x506)))+(((x506)*(x507)))+(((cj5)*(cj6)*(npx)*(x506)))+(((cj5)*(cj6)*(npx)*(x504)))+(((x504)*(x507))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x503)))+(x505))) != 0)?((IkReal)1/(((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x503)))+(x505)))):(IkReal)1.0e30))*(((x504)+(x506)))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x505)*(x506)))+(((x503)*(x504)))+(((x503)*(x506)))+(((IkReal(-1.00000000000000))*(x504)*(x505)))+(((IkReal(-0.0450000000000000))*(x504)))+(((IkReal(-0.0450000000000000))*(x506))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x505)*(x506)))+(((x503)*(x504)))+(((x503)*(x506)))+(((IkReal(-1.00000000000000))*(x504)*(x505)))+(((IkReal(-0.0450000000000000))*(x504)))+(((IkReal(-0.0450000000000000))*(x506)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj5)*(npy)*(sj6)*(x504)))+(((IkReal(-1.00000000000000))*(cj5)*(npy)*(sj6)*(x506)))+(((x506)*(x507)))+(((cj5)*(cj6)*(npx)*(x506)))+(((cj5)*(cj6)*(npx)*(x504)))+(((x504)*(x507)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x503)))+(x505))) != 0)?((IkReal)1/(((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x503)))+(x505)))):(IkReal)1.0e30))*(((x504)+(x506)))), ((((IKabs(((((IkReal(-1.00000000000000))*(x505)*(x506)))+(((x503)*(x504)))+(((x503)*(x506)))+(((IkReal(-1.00000000000000))*(x504)*(x505)))+(((IkReal(-0.0450000000000000))*(x504)))+(((IkReal(-0.0450000000000000))*(x506))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x505)*(x506)))+(((x503)*(x504)))+(((x503)*(x506)))+(((IkReal(-1.00000000000000))*(x504)*(x505)))+(((IkReal(-0.0450000000000000))*(x504)))+(((IkReal(-0.0450000000000000))*(x506)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj5)*(npy)*(sj6)*(x504)))+(((IkReal(-1.00000000000000))*(cj5)*(npy)*(sj6)*(x506)))+(((x506)*(x507)))+(((cj5)*(cj6)*(npx)*(x506)))+(((cj5)*(cj6)*(npx)*(x504)))+(((x504)*(x507)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x510=IKsin(j4);
IkReal x511=IKcos(j4);
IkReal x512=((IkReal(0.0450000000000000))*(cj3));
IkReal x513=((IkReal(1.00000000000000))*(cj6));
IkReal x514=((cj5)*(npx));
IkReal x515=((cj5)*(sj6));
IkReal x516=((IkReal(0.550000000000000))*(sj3));
IkReal x517=((npy)*(x510));
IkReal x518=((IkReal(1.00000000000000))*(npz)*(sj5));
IkReal x519=((IkReal(1.00000000000000))*(npx)*(sj6));
IkReal x520=((npy)*(x511));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x513)))+(((x510)*(x516)))+(((IkReal(-1.00000000000000))*(x519)))+(((IkReal(0.0450000000000000))*(x510)))+(((IkReal(-1.00000000000000))*(x510)*(x512))));
evalcond[1]=((((x511)*(x512)))+(((IkReal(-1.00000000000000))*(x511)*(x516)))+(((npy)*(x515)))+(((IkReal(-1.00000000000000))*(x513)*(x514)))+(((IkReal(-0.0450000000000000))*(x511)))+(((IkReal(-1.00000000000000))*(x518))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x511)*(x519)))+(((IkReal(-1.00000000000000))*(x510)*(x513)*(x514)))+(((x515)*(x517)))+(((IkReal(-1.00000000000000))*(x513)*(x520)))+(((IkReal(-1.00000000000000))*(x510)*(x518))));
evalcond[3]=((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x511)*(x518)))+(((IkReal(-1.00000000000000))*(x511)*(x513)*(x514)))+(((x515)*(x520)))+(((npx)*(sj6)*(x510)))+(((cj6)*(x517)))+(x512)+(((IkReal(-1.00000000000000))*(x516))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst4)*(((((cj6)*(npy)))+(((npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst4)*(((((cj6)*(npy)))+(((npx)*(sj6)))))), ((gconst4)*(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x521=IKsin(j4);
IkReal x522=IKcos(j4);
IkReal x523=((IkReal(0.0450000000000000))*(cj3));
IkReal x524=((IkReal(1.00000000000000))*(cj6));
IkReal x525=((cj5)*(npx));
IkReal x526=((cj5)*(sj6));
IkReal x527=((IkReal(0.550000000000000))*(sj3));
IkReal x528=((npy)*(x521));
IkReal x529=((IkReal(1.00000000000000))*(npz)*(sj5));
IkReal x530=((IkReal(1.00000000000000))*(npx)*(sj6));
IkReal x531=((npy)*(x522));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x524)))+(((IkReal(0.0450000000000000))*(x521)))+(((IkReal(-1.00000000000000))*(x521)*(x523)))+(((IkReal(-1.00000000000000))*(x530)))+(((x521)*(x527))));
evalcond[1]=((((x522)*(x523)))+(((IkReal(-1.00000000000000))*(x524)*(x525)))+(((IkReal(-0.0450000000000000))*(x522)))+(((IkReal(-1.00000000000000))*(x529)))+(((npy)*(x526)))+(((IkReal(-1.00000000000000))*(x522)*(x527))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x521)*(x524)*(x525)))+(((IkReal(-1.00000000000000))*(x524)*(x531)))+(((IkReal(-1.00000000000000))*(x521)*(x529)))+(((x526)*(x528)))+(((IkReal(-1.00000000000000))*(x522)*(x530))));
evalcond[3]=((IkReal(-0.0450000000000000))+(((npx)*(sj6)*(x521)))+(((IkReal(-1.00000000000000))*(x522)*(x524)*(x525)))+(((x526)*(x531)))+(((IkReal(-1.00000000000000))*(x527)))+(x523)+(((IkReal(-1.00000000000000))*(x522)*(x529)))+(((cj6)*(x528))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x86=((IkReal(1.00000000000000))*(cj3));
IkReal x87=((IkReal(1.00000000000000))*(sj6));
IkReal x88=((IkReal(1.00000000000000))*(sj3));
IkReal x89=((IkReal(1.00000000000000))*(cj5));
IkReal x90=((IkReal(-1.00000000000000))*(sj4));
IkReal x91=((IkReal(-1.00000000000000))*(cj5));
IkReal x92=((((cj6)*(r00)))+(((IkReal(-1.00000000000000))*(r01)*(x87))));
IkReal x93=((((r00)*(sj6)))+(((cj6)*(r01))));
IkReal x94=((((IkReal(-1.00000000000000))*(r11)*(x87)))+(((cj6)*(r10))));
IkReal x95=((((r10)*(sj6)))+(((cj6)*(r11))));
IkReal x96=((((cj6)*(r20)))+(((IkReal(-1.00000000000000))*(r21)*(x87))));
IkReal x97=((((cj6)*(r21)))+(((r20)*(sj6))));
IkReal x98=((sj5)*(x94));
IkReal x99=((sj5)*(x96));
IkReal x100=((sj4)*(x97));
IkReal x101=((((r02)*(sj5)))+(((cj5)*(x92))));
IkReal x102=((((IkReal(-1.00000000000000))*(r02)*(x89)))+(((sj5)*(x92))));
IkReal x103=((((r12)*(sj5)))+(((cj5)*(x94))));
IkReal x104=((((r22)*(sj5)))+(((cj5)*(x96))));
IkReal x105=((cj4)*(x103));
IkReal x106=((cj4)*(x104));
IkReal x107=((IkReal(1.00000000000000))*(x102));
IkReal x108=((((x90)*(x93)))+(((cj4)*(x101))));
new_r00=((((cj3)*(x108)))+(((IkReal(-1.00000000000000))*(x102)*(x88))));
new_r01=((((sj4)*(x101)))+(((cj4)*(x93))));
new_r02=((((IkReal(-1.00000000000000))*(x102)*(x86)))+(((IkReal(-1.00000000000000))*(x108)*(x88))));
new_r10=((((cj3)*(((((IkReal(-1.00000000000000))*(sj4)*(x95)))+(x105)))))+(((IkReal(-1.00000000000000))*(x88)*(((((r12)*(x91)))+(x98))))));
new_r11=((((sj4)*(x103)))+(((cj4)*(x95))));
new_r12=((((IkReal(-1.00000000000000))*(x88)*(((x105)+(((x90)*(x95)))))))+(((IkReal(-1.00000000000000))*(x86)*(((((IkReal(-1.00000000000000))*(r12)*(x89)))+(x98))))));
new_r20=((((cj3)*(((x106)+(((IkReal(-1.00000000000000))*(x100)))))))+(((IkReal(-1.00000000000000))*(x88)*(((x99)+(((r22)*(x91))))))));
new_r21=((((sj4)*(x104)))+(((cj4)*(x97))));
new_r22=((((IkReal(-1.00000000000000))*(x86)*(((((IkReal(-1.00000000000000))*(r22)*(x89)))+(x99)))))+(((IkReal(-1.00000000000000))*(x88)*(((x106)+(((x90)*(x97))))))));
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=new_r22;
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(((((cj1)*((new_r12)*(new_r12))))+(((cj1)*((new_r02)*(new_r02))))));
dummyeval[0]=((((cj1)*((new_r12)*(new_r12))))+(((cj1)*((new_r02)*(new_r02)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
evalcond[0]=((IKcos(j2))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKsin(j2))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst20)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst20)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst20)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst20)*(new_r10)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x109=IKcos(j0);
IkReal x110=IKsin(j0);
IkReal x111=((IkReal(1.00000000000000))*(x110));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x111)))+(((new_r12)*(x109))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r02)*(x109)))+(((new_r12)*(x110))));
evalcond[2]=((((new_r10)*(x109)))+(((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(new_r00)*(x111))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x111)))+(((IkReal(-1.00000000000000))*(cj2)))+(((new_r11)*(x109))));
evalcond[4]=((((new_r11)*(x110)))+(((new_r01)*(x109))));
evalcond[5]=((((new_r10)*(x110)))+(((new_r00)*(x109))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst19)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst19)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst19)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst19)*(new_r11)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x112=IKcos(j0);
IkReal x113=IKsin(j0);
IkReal x114=((IkReal(1.00000000000000))*(x113));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x114)))+(((new_r12)*(x112))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r02)*(x112)))+(((new_r12)*(x113))));
evalcond[2]=((((new_r10)*(x112)))+(((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(new_r00)*(x114))));
evalcond[3]=((((new_r11)*(x112)))+(((IkReal(-1.00000000000000))*(new_r01)*(x114)))+(((IkReal(-1.00000000000000))*(cj2))));
evalcond[4]=((((new_r11)*(x113)))+(((new_r01)*(x112))));
evalcond[5]=((((new_r10)*(x113)))+(((new_r00)*(x112))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(IKcos(j2)))));
evalcond[1]=((IKsin(j2))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst23;
gconst23=IKsign(((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst24)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst24)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst24)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst24)*(new_r10)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x115=IKcos(j0);
IkReal x116=IKsin(j0);
IkReal x117=((IkReal(1.00000000000000))*(x116));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x117)))+(((new_r12)*(x115))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r02)*(x115)))+(((new_r12)*(x116))));
evalcond[2]=((((new_r10)*(x115)))+(((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(new_r00)*(x117))));
evalcond[3]=((((new_r11)*(x115)))+(((IkReal(-1.00000000000000))*(new_r01)*(x117)))+(((IkReal(-1.00000000000000))*(cj2))));
evalcond[4]=((((new_r11)*(x116)))+(((new_r01)*(x115))));
evalcond[5]=((((new_r10)*(x116)))+(((new_r00)*(x115))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst23)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst23)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst23)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst23)*(new_r11)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x118=IKcos(j0);
IkReal x119=IKsin(j0);
IkReal x120=((IkReal(1.00000000000000))*(x119));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x120)))+(((new_r12)*(x118))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r02)*(x118)))+(((new_r12)*(x119))));
evalcond[2]=((((new_r10)*(x118)))+(((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(new_r00)*(x120))));
evalcond[3]=((((new_r11)*(x118)))+(((IkReal(-1.00000000000000))*(new_r01)*(x120)))+(((IkReal(-1.00000000000000))*(cj2))));
evalcond[4]=((((new_r11)*(x119)))+(((new_r01)*(x118))));
evalcond[5]=((((new_r10)*(x119)))+(((new_r00)*(x118))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x121=IKatan2(new_r02, new_r12);
j0array[0]=((IkReal(-1.00000000000000))*(x121));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x121))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j0))))+(((new_r12)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj0)))+(((cj0)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))))+IKsqr(((((new_r10)*(sj0)))+(((cj0)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))), ((((new_r10)*(sj0)))+(((cj0)*(new_r00)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x122=IKsin(j2);
IkReal x123=((IkReal(1.00000000000000))*(sj0));
IkReal x124=((IkReal(1.00000000000000))*(IKcos(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x123)))+(((IkReal(-1.00000000000000))*(x122)))+(((cj0)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x123)))+(((IkReal(-1.00000000000000))*(x124)))+(((cj0)*(new_r11))));
evalcond[2]=((((new_r11)*(sj0)))+(x122)+(((cj0)*(new_r01))));
evalcond[3]=((((new_r10)*(sj0)))+(((IkReal(-1.00000000000000))*(x124)))+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x125=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x125;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x125;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x126=IKatan2(new_r02, new_r12);
j0array[0]=((IkReal(-1.00000000000000))*(x126));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x126))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j0))))+(((new_r12)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((new_r11)*(sj0)))+(((cj0)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x127=IKcos(j2);
IkReal x128=((IkReal(1.00000000000000))*(sj0));
IkReal x129=((IkReal(1.00000000000000))*(IKsin(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x128)))+(((IkReal(-1.00000000000000))*(x129)))+(((cj0)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x128)))+(((IkReal(-1.00000000000000))*(x127)))+(((cj0)*(new_r11))));
evalcond[2]=((((new_r11)*(sj0)))+(((IkReal(-1.00000000000000))*(x129)))+(((cj0)*(new_r01))));
evalcond[3]=((((new_r10)*(sj0)))+(x127)+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x130=((gconst12)*(new_r22)*(sj1));
if( IKabs(((new_r12)*(x130))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x130))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r12)*(x130)), ((new_r02)*(x130)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x131=IKcos(j0);
IkReal x132=IKsin(j0);
IkReal x133=((IkReal(1.00000000000000))*(cj1));
IkReal x134=((IkReal(1.00000000000000))*(sj1));
IkReal x135=((new_r12)*(x132));
IkReal x136=((new_r02)*(x131));
evalcond[0]=((((new_r12)*(x131)))+(((IkReal(-1.00000000000000))*(new_r02)*(x132))));
evalcond[1]=((x135)+(x136)+(((IkReal(-1.00000000000000))*(x134))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r22)*(x134)))+(((cj1)*(x136)))+(((cj1)*(x135))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r20)*(x133)))+(((IkReal(-1.00000000000000))*(new_r00)*(x131)*(x134)))+(((IkReal(-1.00000000000000))*(new_r10)*(x132)*(x134))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x131)*(x134)))+(((IkReal(-1.00000000000000))*(new_r11)*(x132)*(x134)))+(((IkReal(-1.00000000000000))*(new_r21)*(x133))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x134)*(x135)))+(((IkReal(-1.00000000000000))*(x134)*(x136)))+(((IkReal(-1.00000000000000))*(new_r22)*(x133))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x137=((((IkReal(-1.00000000000000))*(new_r02)*(sj0)))+(((cj0)*(new_r12))));
IkReal x138=((((new_r12)*(sj0)))+(((cj0)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x137;
evalcond[5]=x137;
evalcond[6]=x138;
evalcond[7]=x138;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj0)))+(((cj0)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))))+IKsqr(((((new_r10)*(sj0)))+(((cj0)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))), ((((new_r10)*(sj0)))+(((cj0)*(new_r00)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x139=IKsin(j2);
IkReal x140=((IkReal(1.00000000000000))*(sj0));
IkReal x141=((IkReal(1.00000000000000))*(IKcos(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x139)))+(((cj0)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x140))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x140)))+(((IkReal(-1.00000000000000))*(x141)))+(((cj0)*(new_r11))));
evalcond[2]=((((new_r11)*(sj0)))+(x139)+(((cj0)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x141)))+(((new_r10)*(sj0)))+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x142=((IkReal(1.00000000000000))+(new_r22));
IkReal x143=((new_r12)*(sj0));
IkReal x144=((cj0)*(new_r02));
IkReal x145=((((IkReal(-1.00000000000000))*(new_r02)*(sj0)))+(((cj0)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x142;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x145;
evalcond[5]=x145;
evalcond[6]=((x143)+(x144));
evalcond[7]=((((IkReal(-1.00000000000000))*(x143)))+(((IkReal(-1.00000000000000))*(x144))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x142;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((new_r11)*(sj0)))+(((cj0)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x146=IKcos(j2);
IkReal x147=((IkReal(1.00000000000000))*(sj0));
IkReal x148=((IkReal(1.00000000000000))*(IKsin(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x148)))+(((cj0)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x147))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x147)))+(((IkReal(-1.00000000000000))*(x146)))+(((cj0)*(new_r11))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x148)))+(((new_r11)*(sj0)))+(((cj0)*(new_r01))));
evalcond[3]=((((new_r10)*(sj0)))+(x146)+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj0)))+(((cj0)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj0)))+(((cj0)*(new_r10)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj0)))+(((cj0)*(new_r10)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x149=IKsin(j2);
IkReal x150=IKcos(j2);
IkReal x151=((IkReal(1.00000000000000))*(sj0));
IkReal x152=((IkReal(1.00000000000000))*(sj1));
IkReal x153=((cj0)*(new_r01));
IkReal x154=((cj0)*(new_r00));
IkReal x155=((new_r11)*(sj0));
IkReal x156=((new_r10)*(sj0));
IkReal x157=((IkReal(1.00000000000000))*(x150));
evalcond[0]=((((sj1)*(x150)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x149)*(x152))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x149)))+(((IkReal(-1.00000000000000))*(new_r00)*(x151)))+(((cj0)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x157)))+(((cj0)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x151))));
evalcond[4]=((x155)+(x153)+(((cj1)*(x149))));
evalcond[5]=((x156)+(x154)+(((IkReal(-1.00000000000000))*(cj1)*(x157))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x152)))+(x149)+(((cj1)*(x155)))+(((cj1)*(x153))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x152)))+(((IkReal(-1.00000000000000))*(x157)))+(((cj1)*(x156)))+(((cj1)*(x154))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj0)))+(((cj0)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj0)))+(((cj0)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj0)))+(((cj0)*(new_r11)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x158=IKsin(j2);
IkReal x159=IKcos(j2);
IkReal x160=((IkReal(1.00000000000000))*(sj0));
IkReal x161=((IkReal(1.00000000000000))*(sj1));
IkReal x162=((cj0)*(new_r01));
IkReal x163=((cj0)*(new_r00));
IkReal x164=((new_r11)*(sj0));
IkReal x165=((new_r10)*(sj0));
IkReal x166=((IkReal(1.00000000000000))*(x159));
evalcond[0]=((((sj1)*(x159)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x158)*(x161)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x160)))+(((IkReal(-1.00000000000000))*(x158)))+(((cj0)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x166)))+(((cj0)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x160))));
evalcond[4]=((x162)+(x164)+(((cj1)*(x158))));
evalcond[5]=((x163)+(x165)+(((IkReal(-1.00000000000000))*(cj1)*(x166))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x161)))+(x158)+(((cj1)*(x162)))+(((cj1)*(x164))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x166)))+(((IkReal(-1.00000000000000))*(new_r20)*(x161)))+(((cj1)*(x165)))+(((cj1)*(x163))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst14)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst14)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst14)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst14)*(new_r20)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x167=IKsin(j2);
IkReal x168=IKcos(j2);
IkReal x169=((IkReal(1.00000000000000))*(sj0));
IkReal x170=((IkReal(1.00000000000000))*(sj1));
IkReal x171=((cj0)*(new_r01));
IkReal x172=((cj0)*(new_r00));
IkReal x173=((new_r11)*(sj0));
IkReal x174=((new_r10)*(sj0));
IkReal x175=((IkReal(1.00000000000000))*(x168));
evalcond[0]=((((sj1)*(x168)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x167)*(x170))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x169)))+(((IkReal(-1.00000000000000))*(x167)))+(((cj0)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x175)))+(((cj0)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x169))));
evalcond[4]=((x171)+(x173)+(((cj1)*(x167))));
evalcond[5]=((x172)+(x174)+(((IkReal(-1.00000000000000))*(cj1)*(x175))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x170)))+(x167)+(((cj1)*(x173)))+(((cj1)*(x171))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x175)))+(((IkReal(-1.00000000000000))*(new_r20)*(x170)))+(((cj1)*(x172)))+(((cj1)*(x174))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x176=((gconst11)*(sj1));
if( IKabs(((new_r12)*(x176))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x176))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r12)*(x176)), ((new_r02)*(x176)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x177=IKcos(j0);
IkReal x178=IKsin(j0);
IkReal x179=((IkReal(1.00000000000000))*(cj1));
IkReal x180=((IkReal(1.00000000000000))*(sj1));
IkReal x181=((new_r12)*(x178));
IkReal x182=((new_r02)*(x177));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x178)))+(((new_r12)*(x177))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x180)))+(x181)+(x182));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r22)*(x180)))+(((cj1)*(x181)))+(((cj1)*(x182))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r20)*(x179)))+(((IkReal(-1.00000000000000))*(new_r00)*(x177)*(x180)))+(((IkReal(-1.00000000000000))*(new_r10)*(x178)*(x180))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r11)*(x178)*(x180)))+(((IkReal(-1.00000000000000))*(new_r21)*(x179)))+(((IkReal(-1.00000000000000))*(new_r01)*(x177)*(x180))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x180)*(x181)))+(((IkReal(-1.00000000000000))*(x180)*(x182)))+(((IkReal(-1.00000000000000))*(new_r22)*(x179))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x183=((((IkReal(-1.00000000000000))*(new_r02)*(sj0)))+(((cj0)*(new_r12))));
IkReal x184=((((new_r12)*(sj0)))+(((cj0)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x183;
evalcond[5]=x183;
evalcond[6]=x184;
evalcond[7]=x184;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj0)))+(((cj0)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))))+IKsqr(((((new_r10)*(sj0)))+(((cj0)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))), ((((new_r10)*(sj0)))+(((cj0)*(new_r00)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x185=IKsin(j2);
IkReal x186=((IkReal(1.00000000000000))*(sj0));
IkReal x187=((IkReal(1.00000000000000))*(IKcos(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x185)))+(((cj0)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x186))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x187)))+(((IkReal(-1.00000000000000))*(new_r01)*(x186)))+(((cj0)*(new_r11))));
evalcond[2]=((((new_r11)*(sj0)))+(x185)+(((cj0)*(new_r01))));
evalcond[3]=((((new_r10)*(sj0)))+(((IkReal(-1.00000000000000))*(x187)))+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x188=((IkReal(1.00000000000000))+(new_r22));
IkReal x189=((new_r12)*(sj0));
IkReal x190=((cj0)*(new_r02));
IkReal x191=((((IkReal(-1.00000000000000))*(new_r02)*(sj0)))+(((cj0)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x188;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x191;
evalcond[5]=x191;
evalcond[6]=((x190)+(x189));
evalcond[7]=((((IkReal(-1.00000000000000))*(x190)))+(((IkReal(-1.00000000000000))*(x189))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x188;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((new_r11)*(sj0)))+(((cj0)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x192=IKcos(j2);
IkReal x193=((IkReal(1.00000000000000))*(sj0));
IkReal x194=((IkReal(1.00000000000000))*(IKsin(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x194)))+(((IkReal(-1.00000000000000))*(new_r00)*(x193)))+(((cj0)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x192)))+(((IkReal(-1.00000000000000))*(new_r01)*(x193)))+(((cj0)*(new_r11))));
evalcond[2]=((((new_r11)*(sj0)))+(((IkReal(-1.00000000000000))*(x194)))+(((cj0)*(new_r01))));
evalcond[3]=((((new_r10)*(sj0)))+(x192)+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj0)))+(((cj0)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj0)))+(((cj0)*(new_r10)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj0)))+(((cj0)*(new_r10)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x195=IKsin(j2);
IkReal x196=IKcos(j2);
IkReal x197=((IkReal(1.00000000000000))*(sj0));
IkReal x198=((IkReal(1.00000000000000))*(sj1));
IkReal x199=((cj0)*(new_r01));
IkReal x200=((cj0)*(new_r00));
IkReal x201=((new_r11)*(sj0));
IkReal x202=((new_r10)*(sj0));
IkReal x203=((IkReal(1.00000000000000))*(x196));
evalcond[0]=((((sj1)*(x196)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x195)*(x198)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x195)))+(((IkReal(-1.00000000000000))*(new_r00)*(x197)))+(((cj0)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x203)))+(((IkReal(-1.00000000000000))*(new_r01)*(x197)))+(((cj0)*(new_r11))));
evalcond[4]=((x199)+(x201)+(((cj1)*(x195))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj1)*(x203)))+(x202)+(x200));
evalcond[6]=((((cj1)*(x201)))+(((IkReal(-1.00000000000000))*(new_r21)*(x198)))+(x195)+(((cj1)*(x199))));
evalcond[7]=((((cj1)*(x200)))+(((cj1)*(x202)))+(((IkReal(-1.00000000000000))*(new_r20)*(x198)))+(((IkReal(-1.00000000000000))*(x203))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj0)))+(((cj0)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj0)))+(((cj0)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj0)))+(((cj0)*(new_r11)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x204=IKsin(j2);
IkReal x205=IKcos(j2);
IkReal x206=((IkReal(1.00000000000000))*(sj0));
IkReal x207=((IkReal(1.00000000000000))*(sj1));
IkReal x208=((cj0)*(new_r01));
IkReal x209=((cj0)*(new_r00));
IkReal x210=((new_r11)*(sj0));
IkReal x211=((new_r10)*(sj0));
IkReal x212=((IkReal(1.00000000000000))*(x205));
evalcond[0]=((((sj1)*(x205)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x204)*(x207)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x206)))+(((cj0)*(new_r10)))+(((IkReal(-1.00000000000000))*(x204))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x212)))+(((cj0)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x206))));
evalcond[4]=((((cj1)*(x204)))+(x210)+(x208));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj1)*(x212)))+(x211)+(x209));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x207)))+(((cj1)*(x208)))+(x204)+(((cj1)*(x210))));
evalcond[7]=((((cj1)*(x209)))+(((IkReal(-1.00000000000000))*(new_r20)*(x207)))+(((cj1)*(x211)))+(((IkReal(-1.00000000000000))*(x212))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst14)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst14)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst14)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst14)*(new_r20)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x213=IKsin(j2);
IkReal x214=IKcos(j2);
IkReal x215=((IkReal(1.00000000000000))*(sj0));
IkReal x216=((IkReal(1.00000000000000))*(sj1));
IkReal x217=((cj0)*(new_r01));
IkReal x218=((cj0)*(new_r00));
IkReal x219=((new_r11)*(sj0));
IkReal x220=((new_r10)*(sj0));
IkReal x221=((IkReal(1.00000000000000))*(x214));
evalcond[0]=((((sj1)*(x214)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x213)*(x216)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x213)))+(((IkReal(-1.00000000000000))*(new_r00)*(x215)))+(((cj0)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x215)))+(((cj0)*(new_r11)))+(((IkReal(-1.00000000000000))*(x221))));
evalcond[4]=((x217)+(x219)+(((cj1)*(x213))));
evalcond[5]=((x218)+(x220)+(((IkReal(-1.00000000000000))*(cj1)*(x221))));
evalcond[6]=((x213)+(((IkReal(-1.00000000000000))*(new_r21)*(x216)))+(((cj1)*(x217)))+(((cj1)*(x219))));
evalcond[7]=((((cj1)*(x220)))+(((IkReal(-1.00000000000000))*(new_r20)*(x216)))+(((cj1)*(x218)))+(((IkReal(-1.00000000000000))*(x221))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst13)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst13)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst13)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst13)*(new_r20)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
evalcond[0]=((((sj1)*(IKcos(j2))))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj1)*(IKsin(j2))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign(((((IkReal(-1.00000000000000))*(new_r11)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r01)*(new_r02)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r11)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r01)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x222=((cj1)*(gconst16)*(sj2));
if( IKabs(((new_r12)*(x222))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x222))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r12)*(x222)), ((new_r02)*(x222)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[12];
IkReal x223=IKcos(j0);
IkReal x224=IKsin(j0);
IkReal x225=((IkReal(1.00000000000000))*(cj2));
IkReal x226=((IkReal(1.00000000000000))*(sj1));
IkReal x227=((IkReal(1.00000000000000))*(cj1));
IkReal x228=((new_r10)*(x224));
IkReal x229=((new_r01)*(x223));
IkReal x230=((new_r00)*(x223));
IkReal x231=((IkReal(1.00000000000000))*(x224));
IkReal x232=((new_r11)*(x224));
IkReal x233=((new_r12)*(x224));
IkReal x234=((new_r02)*(x223));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x231)))+(((new_r12)*(x223))));
evalcond[1]=((x233)+(x234)+(((IkReal(-1.00000000000000))*(x226))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj2)))+(((new_r10)*(x223)))+(((IkReal(-1.00000000000000))*(new_r00)*(x231))));
evalcond[3]=((((new_r11)*(x223)))+(((IkReal(-1.00000000000000))*(new_r01)*(x231)))+(((IkReal(-1.00000000000000))*(x225))));
evalcond[4]=((((cj1)*(sj2)))+(x229)+(x232));
evalcond[5]=((x228)+(x230)+(((IkReal(-1.00000000000000))*(cj1)*(x225))));
evalcond[6]=((((cj1)*(x233)))+(((cj1)*(x234)))+(((IkReal(-1.00000000000000))*(new_r22)*(x226))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x226)*(x230)))+(((IkReal(-1.00000000000000))*(x226)*(x228)))+(((IkReal(-1.00000000000000))*(new_r20)*(x227))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x226)*(x232)))+(((IkReal(-1.00000000000000))*(x226)*(x229)))+(((IkReal(-1.00000000000000))*(new_r21)*(x227))));
evalcond[9]=((((cj1)*(x232)))+(sj2)+(((cj1)*(x229)))+(((IkReal(-1.00000000000000))*(new_r21)*(x226))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x226)*(x233)))+(((IkReal(-1.00000000000000))*(x226)*(x234)))+(((IkReal(-1.00000000000000))*(new_r22)*(x227))));
evalcond[11]=((((cj1)*(x230)))+(((cj1)*(x228)))+(((IkReal(-1.00000000000000))*(new_r20)*(x226)))+(((IkReal(-1.00000000000000))*(x225))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x235=((gconst15)*(sj1));
if( IKabs(((new_r12)*(x235))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x235))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r12)*(x235)), ((new_r02)*(x235)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[12];
IkReal x236=IKcos(j0);
IkReal x237=IKsin(j0);
IkReal x238=((IkReal(1.00000000000000))*(cj2));
IkReal x239=((IkReal(1.00000000000000))*(sj1));
IkReal x240=((IkReal(1.00000000000000))*(cj1));
IkReal x241=((new_r10)*(x237));
IkReal x242=((new_r01)*(x236));
IkReal x243=((new_r00)*(x236));
IkReal x244=((IkReal(1.00000000000000))*(x237));
IkReal x245=((new_r11)*(x237));
IkReal x246=((new_r12)*(x237));
IkReal x247=((new_r02)*(x236));
evalcond[0]=((((new_r12)*(x236)))+(((IkReal(-1.00000000000000))*(new_r02)*(x244))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x239)))+(x247)+(x246));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj2)))+(((new_r10)*(x236)))+(((IkReal(-1.00000000000000))*(new_r00)*(x244))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x244)))+(((new_r11)*(x236)))+(((IkReal(-1.00000000000000))*(x238))));
evalcond[4]=((((cj1)*(sj2)))+(x242)+(x245));
evalcond[5]=((x243)+(x241)+(((IkReal(-1.00000000000000))*(cj1)*(x238))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r22)*(x239)))+(((cj1)*(x247)))+(((cj1)*(x246))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x240)))+(((IkReal(-1.00000000000000))*(x239)*(x243)))+(((IkReal(-1.00000000000000))*(x239)*(x241))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r21)*(x240)))+(((IkReal(-1.00000000000000))*(x239)*(x245)))+(((IkReal(-1.00000000000000))*(x239)*(x242))));
evalcond[9]=((sj2)+(((IkReal(-1.00000000000000))*(new_r21)*(x239)))+(((cj1)*(x242)))+(((cj1)*(x245))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x240)))+(((IkReal(-1.00000000000000))*(x239)*(x247)))+(((IkReal(-1.00000000000000))*(x239)*(x246))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r20)*(x239)))+(((cj1)*(x241)))+(((cj1)*(x243)))+(((IkReal(-1.00000000000000))*(x238))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - BarrettWAM (7e4d38b9ddec04eac44367aed0569706)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#define IKFAST_NO_MAIN

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
